
uart_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024f4  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080026a0  080026a0  000126a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026c0  080026c0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080026c0  080026c0  000126c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080026c8  080026c8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026c8  080026c8  000126c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026cc  080026cc  000126cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080026d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  2000000c  080026dc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  080026dc  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006c23  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000014fc  00000000  00000000  00026c5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006f0  00000000  00000000  00028160  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000638  00000000  00000000  00028850  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002141e  00000000  00000000  00028e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000061cc  00000000  00000000  0004a2a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca6bc  00000000  00000000  00050472  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011ab2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b28  00000000  00000000  0011abac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002688 	.word	0x08002688

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08002688 	.word	0x08002688

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b972 	b.w	80004e8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	4688      	mov	r8, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14b      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022a:	428a      	cmp	r2, r1
 800022c:	4615      	mov	r5, r2
 800022e:	d967      	bls.n	8000300 <__udivmoddi4+0xe4>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0720 	rsb	r7, r2, #32
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	fa20 f707 	lsr.w	r7, r0, r7
 8000242:	4095      	lsls	r5, r2
 8000244:	ea47 0803 	orr.w	r8, r7, r3
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbb8 f7fe 	udiv	r7, r8, lr
 8000254:	fa1f fc85 	uxth.w	ip, r5
 8000258:	fb0e 8817 	mls	r8, lr, r7, r8
 800025c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000260:	fb07 f10c 	mul.w	r1, r7, ip
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18eb      	adds	r3, r5, r3
 800026a:	f107 30ff 	add.w	r0, r7, #4294967295
 800026e:	f080 811b 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8118 	bls.w	80004a8 <__udivmoddi4+0x28c>
 8000278:	3f02      	subs	r7, #2
 800027a:	442b      	add	r3, r5
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0fe 	udiv	r0, r3, lr
 8000284:	fb0e 3310 	mls	r3, lr, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000290:	45a4      	cmp	ip, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	192c      	adds	r4, r5, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x290>
 800029e:	45a4      	cmp	ip, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x290>
 80002a4:	3802      	subs	r0, #2
 80002a6:	442c      	add	r4, r5
 80002a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ac:	eba4 040c 	sub.w	r4, r4, ip
 80002b0:	2700      	movs	r7, #0
 80002b2:	b11e      	cbz	r6, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c6 4300 	strd	r4, r3, [r6]
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xbe>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80eb 	beq.w	80004a2 <__udivmoddi4+0x286>
 80002cc:	2700      	movs	r7, #0
 80002ce:	e9c6 0100 	strd	r0, r1, [r6]
 80002d2:	4638      	mov	r0, r7
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f783 	clz	r7, r3
 80002de:	2f00      	cmp	r7, #0
 80002e0:	d147      	bne.n	8000372 <__udivmoddi4+0x156>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd0>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2c4>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	4698      	mov	r8, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa0>
 80002fa:	e9c6 4800 	strd	r4, r8, [r6]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa0>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xe8>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 808f 	bne.w	800042c <__udivmoddi4+0x210>
 800030e:	1b49      	subs	r1, r1, r5
 8000310:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000314:	fa1f f885 	uxth.w	r8, r5
 8000318:	2701      	movs	r7, #1
 800031a:	fbb1 fcfe 	udiv	ip, r1, lr
 800031e:	0c23      	lsrs	r3, r4, #16
 8000320:	fb0e 111c 	mls	r1, lr, ip, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb08 f10c 	mul.w	r1, r8, ip
 800032c:	4299      	cmp	r1, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x124>
 8000330:	18eb      	adds	r3, r5, r3
 8000332:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4299      	cmp	r1, r3
 800033a:	f200 80cd 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 800033e:	4684      	mov	ip, r0
 8000340:	1a59      	subs	r1, r3, r1
 8000342:	b2a3      	uxth	r3, r4
 8000344:	fbb1 f0fe 	udiv	r0, r1, lr
 8000348:	fb0e 1410 	mls	r4, lr, r0, r1
 800034c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000350:	fb08 f800 	mul.w	r8, r8, r0
 8000354:	45a0      	cmp	r8, r4
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x14c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x14a>
 8000360:	45a0      	cmp	r8, r4
 8000362:	f200 80b6 	bhi.w	80004d2 <__udivmoddi4+0x2b6>
 8000366:	4618      	mov	r0, r3
 8000368:	eba4 0408 	sub.w	r4, r4, r8
 800036c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000370:	e79f      	b.n	80002b2 <__udivmoddi4+0x96>
 8000372:	f1c7 0c20 	rsb	ip, r7, #32
 8000376:	40bb      	lsls	r3, r7
 8000378:	fa22 fe0c 	lsr.w	lr, r2, ip
 800037c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000380:	fa01 f407 	lsl.w	r4, r1, r7
 8000384:	fa20 f50c 	lsr.w	r5, r0, ip
 8000388:	fa21 f30c 	lsr.w	r3, r1, ip
 800038c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000390:	4325      	orrs	r5, r4
 8000392:	fbb3 f9f8 	udiv	r9, r3, r8
 8000396:	0c2c      	lsrs	r4, r5, #16
 8000398:	fb08 3319 	mls	r3, r8, r9, r3
 800039c:	fa1f fa8e 	uxth.w	sl, lr
 80003a0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a4:	fb09 f40a 	mul.w	r4, r9, sl
 80003a8:	429c      	cmp	r4, r3
 80003aa:	fa02 f207 	lsl.w	r2, r2, r7
 80003ae:	fa00 f107 	lsl.w	r1, r0, r7
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1e 0303 	adds.w	r3, lr, r3
 80003b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003bc:	f080 8087 	bcs.w	80004ce <__udivmoddi4+0x2b2>
 80003c0:	429c      	cmp	r4, r3
 80003c2:	f240 8084 	bls.w	80004ce <__udivmoddi4+0x2b2>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4473      	add	r3, lr
 80003cc:	1b1b      	subs	r3, r3, r4
 80003ce:	b2ad      	uxth	r5, r5
 80003d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d4:	fb08 3310 	mls	r3, r8, r0, r3
 80003d8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003dc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1e 0404 	adds.w	r4, lr, r4
 80003e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ec:	d26b      	bcs.n	80004c6 <__udivmoddi4+0x2aa>
 80003ee:	45a2      	cmp	sl, r4
 80003f0:	d969      	bls.n	80004c6 <__udivmoddi4+0x2aa>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4474      	add	r4, lr
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	fba0 8902 	umull	r8, r9, r0, r2
 80003fe:	eba4 040a 	sub.w	r4, r4, sl
 8000402:	454c      	cmp	r4, r9
 8000404:	46c2      	mov	sl, r8
 8000406:	464b      	mov	r3, r9
 8000408:	d354      	bcc.n	80004b4 <__udivmoddi4+0x298>
 800040a:	d051      	beq.n	80004b0 <__udivmoddi4+0x294>
 800040c:	2e00      	cmp	r6, #0
 800040e:	d069      	beq.n	80004e4 <__udivmoddi4+0x2c8>
 8000410:	ebb1 050a 	subs.w	r5, r1, sl
 8000414:	eb64 0403 	sbc.w	r4, r4, r3
 8000418:	fa04 fc0c 	lsl.w	ip, r4, ip
 800041c:	40fd      	lsrs	r5, r7
 800041e:	40fc      	lsrs	r4, r7
 8000420:	ea4c 0505 	orr.w	r5, ip, r5
 8000424:	e9c6 5400 	strd	r5, r4, [r6]
 8000428:	2700      	movs	r7, #0
 800042a:	e747      	b.n	80002bc <__udivmoddi4+0xa0>
 800042c:	f1c2 0320 	rsb	r3, r2, #32
 8000430:	fa20 f703 	lsr.w	r7, r0, r3
 8000434:	4095      	lsls	r5, r2
 8000436:	fa01 f002 	lsl.w	r0, r1, r2
 800043a:	fa21 f303 	lsr.w	r3, r1, r3
 800043e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000442:	4338      	orrs	r0, r7
 8000444:	0c01      	lsrs	r1, r0, #16
 8000446:	fbb3 f7fe 	udiv	r7, r3, lr
 800044a:	fa1f f885 	uxth.w	r8, r5
 800044e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb07 f308 	mul.w	r3, r7, r8
 800045a:	428b      	cmp	r3, r1
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x256>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f107 3cff 	add.w	ip, r7, #4294967295
 8000468:	d22f      	bcs.n	80004ca <__udivmoddi4+0x2ae>
 800046a:	428b      	cmp	r3, r1
 800046c:	d92d      	bls.n	80004ca <__udivmoddi4+0x2ae>
 800046e:	3f02      	subs	r7, #2
 8000470:	4429      	add	r1, r5
 8000472:	1acb      	subs	r3, r1, r3
 8000474:	b281      	uxth	r1, r0
 8000476:	fbb3 f0fe 	udiv	r0, r3, lr
 800047a:	fb0e 3310 	mls	r3, lr, r0, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb00 f308 	mul.w	r3, r0, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x27e>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000490:	d217      	bcs.n	80004c2 <__udivmoddi4+0x2a6>
 8000492:	428b      	cmp	r3, r1
 8000494:	d915      	bls.n	80004c2 <__udivmoddi4+0x2a6>
 8000496:	3802      	subs	r0, #2
 8000498:	4429      	add	r1, r5
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a0:	e73b      	b.n	800031a <__udivmoddi4+0xfe>
 80004a2:	4637      	mov	r7, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e709      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a8:	4607      	mov	r7, r0
 80004aa:	e6e7      	b.n	800027c <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004b0:	4541      	cmp	r1, r8
 80004b2:	d2ab      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b8:	eb69 020e 	sbc.w	r2, r9, lr
 80004bc:	3801      	subs	r0, #1
 80004be:	4613      	mov	r3, r2
 80004c0:	e7a4      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c2:	4660      	mov	r0, ip
 80004c4:	e7e9      	b.n	800049a <__udivmoddi4+0x27e>
 80004c6:	4618      	mov	r0, r3
 80004c8:	e795      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004ca:	4667      	mov	r7, ip
 80004cc:	e7d1      	b.n	8000472 <__udivmoddi4+0x256>
 80004ce:	4681      	mov	r9, r0
 80004d0:	e77c      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d2:	3802      	subs	r0, #2
 80004d4:	442c      	add	r4, r5
 80004d6:	e747      	b.n	8000368 <__udivmoddi4+0x14c>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	442b      	add	r3, r5
 80004de:	e72f      	b.n	8000340 <__udivmoddi4+0x124>
 80004e0:	4638      	mov	r0, r7
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xda>
 80004e4:	4637      	mov	r7, r6
 80004e6:	e6e9      	b.n	80002bc <__udivmoddi4+0xa0>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f0:	f000 fa4c 	bl	800098c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f4:	f000 f80a 	bl	800050c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f8:	f000 f8c6 	bl	8000688 <MX_GPIO_Init>
  MX_DMA_Init();
 80004fc:	f000 f8a4 	bl	8000648 <MX_DMA_Init>
  MX_UART4_Init();
 8000500:	f000 f878 	bl	80005f4 <MX_UART4_Init>
  MX_CRC_Init();
 8000504:	f000 f862 	bl	80005cc <MX_CRC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000508:	e7fe      	b.n	8000508 <main+0x1c>
	...

0800050c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b094      	sub	sp, #80	; 0x50
 8000510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000512:	f107 0320 	add.w	r3, r7, #32
 8000516:	2230      	movs	r2, #48	; 0x30
 8000518:	2100      	movs	r1, #0
 800051a:	4618      	mov	r0, r3
 800051c:	f002 f8ac 	bl	8002678 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000520:	f107 030c 	add.w	r3, r7, #12
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	609a      	str	r2, [r3, #8]
 800052c:	60da      	str	r2, [r3, #12]
 800052e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000530:	2300      	movs	r3, #0
 8000532:	60bb      	str	r3, [r7, #8]
 8000534:	4b23      	ldr	r3, [pc, #140]	; (80005c4 <SystemClock_Config+0xb8>)
 8000536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000538:	4a22      	ldr	r2, [pc, #136]	; (80005c4 <SystemClock_Config+0xb8>)
 800053a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053e:	6413      	str	r3, [r2, #64]	; 0x40
 8000540:	4b20      	ldr	r3, [pc, #128]	; (80005c4 <SystemClock_Config+0xb8>)
 8000542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000548:	60bb      	str	r3, [r7, #8]
 800054a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800054c:	2300      	movs	r3, #0
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	4b1d      	ldr	r3, [pc, #116]	; (80005c8 <SystemClock_Config+0xbc>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000558:	4a1b      	ldr	r2, [pc, #108]	; (80005c8 <SystemClock_Config+0xbc>)
 800055a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800055e:	6013      	str	r3, [r2, #0]
 8000560:	4b19      	ldr	r3, [pc, #100]	; (80005c8 <SystemClock_Config+0xbc>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800056c:	2302      	movs	r3, #2
 800056e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000570:	2301      	movs	r3, #1
 8000572:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000574:	2310      	movs	r3, #16
 8000576:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000578:	2300      	movs	r3, #0
 800057a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057c:	f107 0320 	add.w	r3, r7, #32
 8000580:	4618      	mov	r0, r3
 8000582:	f001 f84f 	bl	8001624 <HAL_RCC_OscConfig>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800058c:	f000 f8b0 	bl	80006f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000590:	230f      	movs	r3, #15
 8000592:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000594:	2300      	movs	r3, #0
 8000596:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005a4:	f107 030c 	add.w	r3, r7, #12
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f001 faaa 	bl	8001b04 <HAL_RCC_ClockConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005b6:	f000 f89b 	bl	80006f0 <Error_Handler>
  }
}
 80005ba:	bf00      	nop
 80005bc:	3750      	adds	r7, #80	; 0x50
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40023800 	.word	0x40023800
 80005c8:	40007000 	.word	0x40007000

080005cc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80005d0:	4b06      	ldr	r3, [pc, #24]	; (80005ec <MX_CRC_Init+0x20>)
 80005d2:	4a07      	ldr	r2, [pc, #28]	; (80005f0 <MX_CRC_Init+0x24>)
 80005d4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80005d6:	4805      	ldr	r0, [pc, #20]	; (80005ec <MX_CRC_Init+0x20>)
 80005d8:	f000 fb5b 	bl	8000c92 <HAL_CRC_Init>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80005e2:	f000 f885 	bl	80006f0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000088 	.word	0x20000088
 80005f0:	40023000 	.word	0x40023000

080005f4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80005f8:	4b11      	ldr	r3, [pc, #68]	; (8000640 <MX_UART4_Init+0x4c>)
 80005fa:	4a12      	ldr	r2, [pc, #72]	; (8000644 <MX_UART4_Init+0x50>)
 80005fc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80005fe:	4b10      	ldr	r3, [pc, #64]	; (8000640 <MX_UART4_Init+0x4c>)
 8000600:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000604:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <MX_UART4_Init+0x4c>)
 8000608:	2200      	movs	r2, #0
 800060a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <MX_UART4_Init+0x4c>)
 800060e:	2200      	movs	r2, #0
 8000610:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000612:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <MX_UART4_Init+0x4c>)
 8000614:	2200      	movs	r2, #0
 8000616:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000618:	4b09      	ldr	r3, [pc, #36]	; (8000640 <MX_UART4_Init+0x4c>)
 800061a:	220c      	movs	r2, #12
 800061c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800061e:	4b08      	ldr	r3, [pc, #32]	; (8000640 <MX_UART4_Init+0x4c>)
 8000620:	2200      	movs	r2, #0
 8000622:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000624:	4b06      	ldr	r3, [pc, #24]	; (8000640 <MX_UART4_Init+0x4c>)
 8000626:	2200      	movs	r2, #0
 8000628:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800062a:	4805      	ldr	r0, [pc, #20]	; (8000640 <MX_UART4_Init+0x4c>)
 800062c:	f001 fc36 	bl	8001e9c <HAL_UART_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000636:	f000 f85b 	bl	80006f0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000090 	.word	0x20000090
 8000644:	40004c00 	.word	0x40004c00

08000648 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <MX_DMA_Init+0x3c>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	4a0b      	ldr	r2, [pc, #44]	; (8000684 <MX_DMA_Init+0x3c>)
 8000658:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800065c:	6313      	str	r3, [r2, #48]	; 0x30
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <MX_DMA_Init+0x3c>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800066a:	2200      	movs	r2, #0
 800066c:	2100      	movs	r1, #0
 800066e:	200d      	movs	r0, #13
 8000670:	f000 fad9 	bl	8000c26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000674:	200d      	movs	r0, #13
 8000676:	f000 faf2 	bl	8000c5e <HAL_NVIC_EnableIRQ>

}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40023800 	.word	0x40023800

08000688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069c:	2300      	movs	r3, #0
 800069e:	603b      	str	r3, [r7, #0]
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <MX_GPIO_Init+0x60>)
 80006a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a4:	4a10      	ldr	r2, [pc, #64]	; (80006e8 <MX_GPIO_Init+0x60>)
 80006a6:	f043 0301 	orr.w	r3, r3, #1
 80006aa:	6313      	str	r3, [r2, #48]	; 0x30
 80006ac:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <MX_GPIO_Init+0x60>)
 80006ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b0:	f003 0301 	and.w	r3, r3, #1
 80006b4:	603b      	str	r3, [r7, #0]
 80006b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OnBoardLED_GPIO_Port, OnBoardLED_Pin, GPIO_PIN_RESET);
 80006b8:	2200      	movs	r2, #0
 80006ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006be:	480b      	ldr	r0, [pc, #44]	; (80006ec <MX_GPIO_Init+0x64>)
 80006c0:	f000 ff96 	bl	80015f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OnBoardLED_Pin */
  GPIO_InitStruct.Pin = OnBoardLED_Pin;
 80006c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ca:	2301      	movs	r3, #1
 80006cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(OnBoardLED_GPIO_Port, &GPIO_InitStruct);
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	4619      	mov	r1, r3
 80006da:	4804      	ldr	r0, [pc, #16]	; (80006ec <MX_GPIO_Init+0x64>)
 80006dc:	f000 fdde 	bl	800129c <HAL_GPIO_Init>

}
 80006e0:	bf00      	nop
 80006e2:	3718      	adds	r7, #24
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40020000 	.word	0x40020000

080006f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
	...

08000700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	4b10      	ldr	r3, [pc, #64]	; (800074c <HAL_MspInit+0x4c>)
 800070c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800070e:	4a0f      	ldr	r2, [pc, #60]	; (800074c <HAL_MspInit+0x4c>)
 8000710:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000714:	6453      	str	r3, [r2, #68]	; 0x44
 8000716:	4b0d      	ldr	r3, [pc, #52]	; (800074c <HAL_MspInit+0x4c>)
 8000718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800071a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	603b      	str	r3, [r7, #0]
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <HAL_MspInit+0x4c>)
 8000728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072a:	4a08      	ldr	r2, [pc, #32]	; (800074c <HAL_MspInit+0x4c>)
 800072c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000730:	6413      	str	r3, [r2, #64]	; 0x40
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <HAL_MspInit+0x4c>)
 8000734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800073a:	603b      	str	r3, [r7, #0]
 800073c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800073e:	bf00      	nop
 8000740:	370c      	adds	r7, #12
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	40023800 	.word	0x40023800

08000750 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000750:	b480      	push	{r7}
 8000752:	b085      	sub	sp, #20
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a0b      	ldr	r2, [pc, #44]	; (800078c <HAL_CRC_MspInit+0x3c>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d10d      	bne.n	800077e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	4b0a      	ldr	r3, [pc, #40]	; (8000790 <HAL_CRC_MspInit+0x40>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a09      	ldr	r2, [pc, #36]	; (8000790 <HAL_CRC_MspInit+0x40>)
 800076c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b07      	ldr	r3, [pc, #28]	; (8000790 <HAL_CRC_MspInit+0x40>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800077e:	bf00      	nop
 8000780:	3714      	adds	r7, #20
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	40023000 	.word	0x40023000
 8000790:	40023800 	.word	0x40023800

08000794 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08a      	sub	sp, #40	; 0x28
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a35      	ldr	r2, [pc, #212]	; (8000888 <HAL_UART_MspInit+0xf4>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d163      	bne.n	800087e <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	613b      	str	r3, [r7, #16]
 80007ba:	4b34      	ldr	r3, [pc, #208]	; (800088c <HAL_UART_MspInit+0xf8>)
 80007bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007be:	4a33      	ldr	r2, [pc, #204]	; (800088c <HAL_UART_MspInit+0xf8>)
 80007c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007c4:	6413      	str	r3, [r2, #64]	; 0x40
 80007c6:	4b31      	ldr	r3, [pc, #196]	; (800088c <HAL_UART_MspInit+0xf8>)
 80007c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80007ce:	613b      	str	r3, [r7, #16]
 80007d0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	4b2d      	ldr	r3, [pc, #180]	; (800088c <HAL_UART_MspInit+0xf8>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a2c      	ldr	r2, [pc, #176]	; (800088c <HAL_UART_MspInit+0xf8>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b2a      	ldr	r3, [pc, #168]	; (800088c <HAL_UART_MspInit+0xf8>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration    
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80007ee:	2303      	movs	r3, #3
 80007f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f2:	2302      	movs	r3, #2
 80007f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007f6:	2301      	movs	r3, #1
 80007f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fa:	2303      	movs	r3, #3
 80007fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80007fe:	2308      	movs	r3, #8
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	4619      	mov	r1, r3
 8000808:	4821      	ldr	r0, [pc, #132]	; (8000890 <HAL_UART_MspInit+0xfc>)
 800080a:	f000 fd47 	bl	800129c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800080e:	4b21      	ldr	r3, [pc, #132]	; (8000894 <HAL_UART_MspInit+0x100>)
 8000810:	4a21      	ldr	r2, [pc, #132]	; (8000898 <HAL_UART_MspInit+0x104>)
 8000812:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8000814:	4b1f      	ldr	r3, [pc, #124]	; (8000894 <HAL_UART_MspInit+0x100>)
 8000816:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800081a:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800081c:	4b1d      	ldr	r3, [pc, #116]	; (8000894 <HAL_UART_MspInit+0x100>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000822:	4b1c      	ldr	r3, [pc, #112]	; (8000894 <HAL_UART_MspInit+0x100>)
 8000824:	2200      	movs	r2, #0
 8000826:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000828:	4b1a      	ldr	r3, [pc, #104]	; (8000894 <HAL_UART_MspInit+0x100>)
 800082a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800082e:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000830:	4b18      	ldr	r3, [pc, #96]	; (8000894 <HAL_UART_MspInit+0x100>)
 8000832:	2200      	movs	r2, #0
 8000834:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000836:	4b17      	ldr	r3, [pc, #92]	; (8000894 <HAL_UART_MspInit+0x100>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 800083c:	4b15      	ldr	r3, [pc, #84]	; (8000894 <HAL_UART_MspInit+0x100>)
 800083e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000842:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000844:	4b13      	ldr	r3, [pc, #76]	; (8000894 <HAL_UART_MspInit+0x100>)
 8000846:	2200      	movs	r2, #0
 8000848:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800084a:	4b12      	ldr	r3, [pc, #72]	; (8000894 <HAL_UART_MspInit+0x100>)
 800084c:	2204      	movs	r2, #4
 800084e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000850:	4b10      	ldr	r3, [pc, #64]	; (8000894 <HAL_UART_MspInit+0x100>)
 8000852:	2203      	movs	r2, #3
 8000854:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000856:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <HAL_UART_MspInit+0x100>)
 8000858:	2200      	movs	r2, #0
 800085a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800085c:	4b0d      	ldr	r3, [pc, #52]	; (8000894 <HAL_UART_MspInit+0x100>)
 800085e:	2200      	movs	r2, #0
 8000860:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8000862:	480c      	ldr	r0, [pc, #48]	; (8000894 <HAL_UART_MspInit+0x100>)
 8000864:	f000 fa32 	bl	8000ccc <HAL_DMA_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 800086e:	f7ff ff3f 	bl	80006f0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4a07      	ldr	r2, [pc, #28]	; (8000894 <HAL_UART_MspInit+0x100>)
 8000876:	635a      	str	r2, [r3, #52]	; 0x34
 8000878:	4a06      	ldr	r2, [pc, #24]	; (8000894 <HAL_UART_MspInit+0x100>)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 800087e:	bf00      	nop
 8000880:	3728      	adds	r7, #40	; 0x28
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40004c00 	.word	0x40004c00
 800088c:	40023800 	.word	0x40023800
 8000890:	40020000 	.word	0x40020000
 8000894:	20000028 	.word	0x20000028
 8000898:	40026040 	.word	0x40026040

0800089c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr

080008aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ae:	e7fe      	b.n	80008ae <HardFault_Handler+0x4>

080008b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <MemManage_Handler+0x4>

080008b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ba:	e7fe      	b.n	80008ba <BusFault_Handler+0x4>

080008bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <UsageFault_Handler+0x4>

080008c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr

080008d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr

080008de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f0:	f000 f89e 	bl	8000a30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80008fc:	4802      	ldr	r0, [pc, #8]	; (8000908 <DMA1_Stream2_IRQHandler+0x10>)
 80008fe:	f000 fa93 	bl	8000e28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000028 	.word	0x20000028

0800090c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000910:	4b08      	ldr	r3, [pc, #32]	; (8000934 <SystemInit+0x28>)
 8000912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000916:	4a07      	ldr	r2, [pc, #28]	; (8000934 <SystemInit+0x28>)
 8000918:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800091c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000920:	4b04      	ldr	r3, [pc, #16]	; (8000934 <SystemInit+0x28>)
 8000922:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000926:	609a      	str	r2, [r3, #8]
#endif
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	e000ed00 	.word	0xe000ed00

08000938 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000938:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000970 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800093c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800093e:	e003      	b.n	8000948 <LoopCopyDataInit>

08000940 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000942:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000944:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000946:	3104      	adds	r1, #4

08000948 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000948:	480b      	ldr	r0, [pc, #44]	; (8000978 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800094a:	4b0c      	ldr	r3, [pc, #48]	; (800097c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800094c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800094e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000950:	d3f6      	bcc.n	8000940 <CopyDataInit>
  ldr  r2, =_sbss
 8000952:	4a0b      	ldr	r2, [pc, #44]	; (8000980 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000954:	e002      	b.n	800095c <LoopFillZerobss>

08000956 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000956:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000958:	f842 3b04 	str.w	r3, [r2], #4

0800095c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800095e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000960:	d3f9      	bcc.n	8000956 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000962:	f7ff ffd3 	bl	800090c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000966:	f001 fe63 	bl	8002630 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800096a:	f7ff fdbf 	bl	80004ec <main>
  bx  lr    
 800096e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000970:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000974:	080026d0 	.word	0x080026d0
  ldr  r0, =_sdata
 8000978:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800097c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000980:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000984:	200000d4 	.word	0x200000d4

08000988 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000988:	e7fe      	b.n	8000988 <ADC_IRQHandler>
	...

0800098c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000990:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <HAL_Init+0x40>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a0d      	ldr	r2, [pc, #52]	; (80009cc <HAL_Init+0x40>)
 8000996:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800099a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800099c:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <HAL_Init+0x40>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a0a      	ldr	r2, [pc, #40]	; (80009cc <HAL_Init+0x40>)
 80009a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009a8:	4b08      	ldr	r3, [pc, #32]	; (80009cc <HAL_Init+0x40>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a07      	ldr	r2, [pc, #28]	; (80009cc <HAL_Init+0x40>)
 80009ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b4:	2003      	movs	r0, #3
 80009b6:	f000 f92b 	bl	8000c10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ba:	2000      	movs	r0, #0
 80009bc:	f000 f808 	bl	80009d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009c0:	f7ff fe9e 	bl	8000700 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009c4:	2300      	movs	r3, #0
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40023c00 	.word	0x40023c00

080009d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <HAL_InitTick+0x54>)
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <HAL_InitTick+0x58>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	4619      	mov	r1, r3
 80009e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ee:	4618      	mov	r0, r3
 80009f0:	f000 f943 	bl	8000c7a <HAL_SYSTICK_Config>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009fa:	2301      	movs	r3, #1
 80009fc:	e00e      	b.n	8000a1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2b0f      	cmp	r3, #15
 8000a02:	d80a      	bhi.n	8000a1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a04:	2200      	movs	r2, #0
 8000a06:	6879      	ldr	r1, [r7, #4]
 8000a08:	f04f 30ff 	mov.w	r0, #4294967295
 8000a0c:	f000 f90b 	bl	8000c26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a10:	4a06      	ldr	r2, [pc, #24]	; (8000a2c <HAL_InitTick+0x5c>)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a16:	2300      	movs	r3, #0
 8000a18:	e000      	b.n	8000a1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a1a:	2301      	movs	r3, #1
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20000000 	.word	0x20000000
 8000a28:	20000008 	.word	0x20000008
 8000a2c:	20000004 	.word	0x20000004

08000a30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_IncTick+0x20>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	461a      	mov	r2, r3
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <HAL_IncTick+0x24>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4413      	add	r3, r2
 8000a40:	4a04      	ldr	r2, [pc, #16]	; (8000a54 <HAL_IncTick+0x24>)
 8000a42:	6013      	str	r3, [r2, #0]
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	20000008 	.word	0x20000008
 8000a54:	200000d0 	.word	0x200000d0

08000a58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a5c:	4b03      	ldr	r3, [pc, #12]	; (8000a6c <HAL_GetTick+0x14>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	200000d0 	.word	0x200000d0

08000a70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	f003 0307 	and.w	r3, r3, #7
 8000a7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a86:	68ba      	ldr	r2, [r7, #8]
 8000a88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aa2:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	60d3      	str	r3, [r2, #12]
}
 8000aa8:	bf00      	nop
 8000aaa:	3714      	adds	r7, #20
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000abc:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <__NVIC_GetPriorityGrouping+0x18>)
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	0a1b      	lsrs	r3, r3, #8
 8000ac2:	f003 0307 	and.w	r3, r3, #7
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	db0b      	blt.n	8000afe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	f003 021f 	and.w	r2, r3, #31
 8000aec:	4907      	ldr	r1, [pc, #28]	; (8000b0c <__NVIC_EnableIRQ+0x38>)
 8000aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af2:	095b      	lsrs	r3, r3, #5
 8000af4:	2001      	movs	r0, #1
 8000af6:	fa00 f202 	lsl.w	r2, r0, r2
 8000afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	e000e100 	.word	0xe000e100

08000b10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	6039      	str	r1, [r7, #0]
 8000b1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	db0a      	blt.n	8000b3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	490c      	ldr	r1, [pc, #48]	; (8000b5c <__NVIC_SetPriority+0x4c>)
 8000b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2e:	0112      	lsls	r2, r2, #4
 8000b30:	b2d2      	uxtb	r2, r2
 8000b32:	440b      	add	r3, r1
 8000b34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b38:	e00a      	b.n	8000b50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	b2da      	uxtb	r2, r3
 8000b3e:	4908      	ldr	r1, [pc, #32]	; (8000b60 <__NVIC_SetPriority+0x50>)
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	f003 030f 	and.w	r3, r3, #15
 8000b46:	3b04      	subs	r3, #4
 8000b48:	0112      	lsls	r2, r2, #4
 8000b4a:	b2d2      	uxtb	r2, r2
 8000b4c:	440b      	add	r3, r1
 8000b4e:	761a      	strb	r2, [r3, #24]
}
 8000b50:	bf00      	nop
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	e000e100 	.word	0xe000e100
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b089      	sub	sp, #36	; 0x24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	f003 0307 	and.w	r3, r3, #7
 8000b76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b78:	69fb      	ldr	r3, [r7, #28]
 8000b7a:	f1c3 0307 	rsb	r3, r3, #7
 8000b7e:	2b04      	cmp	r3, #4
 8000b80:	bf28      	it	cs
 8000b82:	2304      	movcs	r3, #4
 8000b84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	3304      	adds	r3, #4
 8000b8a:	2b06      	cmp	r3, #6
 8000b8c:	d902      	bls.n	8000b94 <NVIC_EncodePriority+0x30>
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	3b03      	subs	r3, #3
 8000b92:	e000      	b.n	8000b96 <NVIC_EncodePriority+0x32>
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b98:	f04f 32ff 	mov.w	r2, #4294967295
 8000b9c:	69bb      	ldr	r3, [r7, #24]
 8000b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba2:	43da      	mvns	r2, r3
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	401a      	ands	r2, r3
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bac:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb6:	43d9      	mvns	r1, r3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bbc:	4313      	orrs	r3, r2
         );
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3724      	adds	r7, #36	; 0x24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
	...

08000bcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bdc:	d301      	bcc.n	8000be2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bde:	2301      	movs	r3, #1
 8000be0:	e00f      	b.n	8000c02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000be2:	4a0a      	ldr	r2, [pc, #40]	; (8000c0c <SysTick_Config+0x40>)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bea:	210f      	movs	r1, #15
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	f7ff ff8e 	bl	8000b10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bf4:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <SysTick_Config+0x40>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bfa:	4b04      	ldr	r3, [pc, #16]	; (8000c0c <SysTick_Config+0x40>)
 8000bfc:	2207      	movs	r2, #7
 8000bfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	e000e010 	.word	0xe000e010

08000c10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f7ff ff29 	bl	8000a70 <__NVIC_SetPriorityGrouping>
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b086      	sub	sp, #24
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	60b9      	str	r1, [r7, #8]
 8000c30:	607a      	str	r2, [r7, #4]
 8000c32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c38:	f7ff ff3e 	bl	8000ab8 <__NVIC_GetPriorityGrouping>
 8000c3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	68b9      	ldr	r1, [r7, #8]
 8000c42:	6978      	ldr	r0, [r7, #20]
 8000c44:	f7ff ff8e 	bl	8000b64 <NVIC_EncodePriority>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c4e:	4611      	mov	r1, r2
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff ff5d 	bl	8000b10 <__NVIC_SetPriority>
}
 8000c56:	bf00      	nop
 8000c58:	3718      	adds	r7, #24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b082      	sub	sp, #8
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	4603      	mov	r3, r0
 8000c66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff ff31 	bl	8000ad4 <__NVIC_EnableIRQ>
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b082      	sub	sp, #8
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f7ff ffa2 	bl	8000bcc <SysTick_Config>
 8000c88:	4603      	mov	r3, r0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b082      	sub	sp, #8
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d101      	bne.n	8000ca4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	e00e      	b.n	8000cc2 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	795b      	ldrb	r3, [r3, #5]
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d105      	bne.n	8000cba <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	f7ff fd4b 	bl	8000750 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
	...

08000ccc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000cd8:	f7ff febe 	bl	8000a58 <HAL_GetTick>
 8000cdc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d101      	bne.n	8000ce8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	e099      	b.n	8000e1c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2200      	movs	r2, #0
 8000cec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2202      	movs	r2, #2
 8000cf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f022 0201 	bic.w	r2, r2, #1
 8000d06:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d08:	e00f      	b.n	8000d2a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000d0a:	f7ff fea5 	bl	8000a58 <HAL_GetTick>
 8000d0e:	4602      	mov	r2, r0
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	1ad3      	subs	r3, r2, r3
 8000d14:	2b05      	cmp	r3, #5
 8000d16:	d908      	bls.n	8000d2a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2220      	movs	r2, #32
 8000d1c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2203      	movs	r2, #3
 8000d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000d26:	2303      	movs	r3, #3
 8000d28:	e078      	b.n	8000e1c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f003 0301 	and.w	r3, r3, #1
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d1e8      	bne.n	8000d0a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000d40:	697a      	ldr	r2, [r7, #20]
 8000d42:	4b38      	ldr	r3, [pc, #224]	; (8000e24 <HAL_DMA_Init+0x158>)
 8000d44:	4013      	ands	r3, r2
 8000d46:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	685a      	ldr	r2, [r3, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	689b      	ldr	r3, [r3, #8]
 8000d50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d56:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	691b      	ldr	r3, [r3, #16]
 8000d5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6a1b      	ldr	r3, [r3, #32]
 8000d74:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d76:	697a      	ldr	r2, [r7, #20]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d80:	2b04      	cmp	r3, #4
 8000d82:	d107      	bne.n	8000d94 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	697a      	ldr	r2, [r7, #20]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	697a      	ldr	r2, [r7, #20]
 8000d9a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	695b      	ldr	r3, [r3, #20]
 8000da2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	f023 0307 	bic.w	r3, r3, #7
 8000daa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db0:	697a      	ldr	r2, [r7, #20]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dba:	2b04      	cmp	r3, #4
 8000dbc:	d117      	bne.n	8000dee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc2:	697a      	ldr	r2, [r7, #20]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d00e      	beq.n	8000dee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f000 f9e9 	bl	80011a8 <DMA_CheckFifoParam>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d008      	beq.n	8000dee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2240      	movs	r2, #64	; 0x40
 8000de0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2201      	movs	r2, #1
 8000de6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000dea:	2301      	movs	r3, #1
 8000dec:	e016      	b.n	8000e1c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	697a      	ldr	r2, [r7, #20]
 8000df4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f000 f9a0 	bl	800113c <DMA_CalcBaseAndBitshift>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e04:	223f      	movs	r2, #63	; 0x3f
 8000e06:	409a      	lsls	r2, r3
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2201      	movs	r2, #1
 8000e16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000e1a:	2300      	movs	r3, #0
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3718      	adds	r7, #24
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	f010803f 	.word	0xf010803f

08000e28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000e30:	2300      	movs	r3, #0
 8000e32:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000e34:	4b92      	ldr	r3, [pc, #584]	; (8001080 <HAL_DMA_IRQHandler+0x258>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a92      	ldr	r2, [pc, #584]	; (8001084 <HAL_DMA_IRQHandler+0x25c>)
 8000e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e3e:	0a9b      	lsrs	r3, r3, #10
 8000e40:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e46:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e52:	2208      	movs	r2, #8
 8000e54:	409a      	lsls	r2, r3
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d01a      	beq.n	8000e94 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f003 0304 	and.w	r3, r3, #4
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d013      	beq.n	8000e94 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f022 0204 	bic.w	r2, r2, #4
 8000e7a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e80:	2208      	movs	r2, #8
 8000e82:	409a      	lsls	r2, r3
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e8c:	f043 0201 	orr.w	r2, r3, #1
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e98:	2201      	movs	r2, #1
 8000e9a:	409a      	lsls	r2, r3
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d012      	beq.n	8000eca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	695b      	ldr	r3, [r3, #20]
 8000eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d00b      	beq.n	8000eca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	409a      	lsls	r2, r3
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ec2:	f043 0202 	orr.w	r2, r3, #2
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ece:	2204      	movs	r2, #4
 8000ed0:	409a      	lsls	r2, r3
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d012      	beq.n	8000f00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f003 0302 	and.w	r3, r3, #2
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d00b      	beq.n	8000f00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000eec:	2204      	movs	r2, #4
 8000eee:	409a      	lsls	r2, r3
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ef8:	f043 0204 	orr.w	r2, r3, #4
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f04:	2210      	movs	r2, #16
 8000f06:	409a      	lsls	r2, r3
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d043      	beq.n	8000f98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f003 0308 	and.w	r3, r3, #8
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d03c      	beq.n	8000f98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f22:	2210      	movs	r2, #16
 8000f24:	409a      	lsls	r2, r3
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d018      	beq.n	8000f6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d108      	bne.n	8000f58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d024      	beq.n	8000f98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	4798      	blx	r3
 8000f56:	e01f      	b.n	8000f98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d01b      	beq.n	8000f98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	4798      	blx	r3
 8000f68:	e016      	b.n	8000f98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d107      	bne.n	8000f88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f022 0208 	bic.w	r2, r2, #8
 8000f86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d003      	beq.n	8000f98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f9c:	2220      	movs	r2, #32
 8000f9e:	409a      	lsls	r2, r3
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	f000 808e 	beq.w	80010c6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f003 0310 	and.w	r3, r3, #16
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	f000 8086 	beq.w	80010c6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fbe:	2220      	movs	r2, #32
 8000fc0:	409a      	lsls	r2, r3
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	2b05      	cmp	r3, #5
 8000fd0:	d136      	bne.n	8001040 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f022 0216 	bic.w	r2, r2, #22
 8000fe0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	695a      	ldr	r2, [r3, #20]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ff0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d103      	bne.n	8001002 <HAL_DMA_IRQHandler+0x1da>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d007      	beq.n	8001012 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f022 0208 	bic.w	r2, r2, #8
 8001010:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001016:	223f      	movs	r2, #63	; 0x3f
 8001018:	409a      	lsls	r2, r3
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2201      	movs	r2, #1
 800102a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001032:	2b00      	cmp	r3, #0
 8001034:	d07d      	beq.n	8001132 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	4798      	blx	r3
        }
        return;
 800103e:	e078      	b.n	8001132 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d01c      	beq.n	8001088 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d108      	bne.n	800106e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001060:	2b00      	cmp	r3, #0
 8001062:	d030      	beq.n	80010c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	4798      	blx	r3
 800106c:	e02b      	b.n	80010c6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001072:	2b00      	cmp	r3, #0
 8001074:	d027      	beq.n	80010c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	4798      	blx	r3
 800107e:	e022      	b.n	80010c6 <HAL_DMA_IRQHandler+0x29e>
 8001080:	20000000 	.word	0x20000000
 8001084:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001092:	2b00      	cmp	r3, #0
 8001094:	d10f      	bne.n	80010b6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f022 0210 	bic.w	r2, r2, #16
 80010a4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2201      	movs	r2, #1
 80010b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d003      	beq.n	80010c6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d032      	beq.n	8001134 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d022      	beq.n	8001120 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2205      	movs	r2, #5
 80010de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f022 0201 	bic.w	r2, r2, #1
 80010f0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	3301      	adds	r3, #1
 80010f6:	60bb      	str	r3, [r7, #8]
 80010f8:	697a      	ldr	r2, [r7, #20]
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d307      	bcc.n	800110e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f2      	bne.n	80010f2 <HAL_DMA_IRQHandler+0x2ca>
 800110c:	e000      	b.n	8001110 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800110e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2201      	movs	r2, #1
 800111c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001124:	2b00      	cmp	r3, #0
 8001126:	d005      	beq.n	8001134 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	4798      	blx	r3
 8001130:	e000      	b.n	8001134 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001132:	bf00      	nop
    }
  }
}
 8001134:	3718      	adds	r7, #24
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop

0800113c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	b2db      	uxtb	r3, r3
 800114a:	3b10      	subs	r3, #16
 800114c:	4a14      	ldr	r2, [pc, #80]	; (80011a0 <DMA_CalcBaseAndBitshift+0x64>)
 800114e:	fba2 2303 	umull	r2, r3, r2, r3
 8001152:	091b      	lsrs	r3, r3, #4
 8001154:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001156:	4a13      	ldr	r2, [pc, #76]	; (80011a4 <DMA_CalcBaseAndBitshift+0x68>)
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	4413      	add	r3, r2
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	461a      	mov	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	2b03      	cmp	r3, #3
 8001168:	d909      	bls.n	800117e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001172:	f023 0303 	bic.w	r3, r3, #3
 8001176:	1d1a      	adds	r2, r3, #4
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	659a      	str	r2, [r3, #88]	; 0x58
 800117c:	e007      	b.n	800118e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001186:	f023 0303 	bic.w	r3, r3, #3
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001192:	4618      	mov	r0, r3
 8001194:	3714      	adds	r7, #20
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	aaaaaaab 	.word	0xaaaaaaab
 80011a4:	080026b8 	.word	0x080026b8

080011a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011b0:	2300      	movs	r3, #0
 80011b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	699b      	ldr	r3, [r3, #24]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d11f      	bne.n	8001202 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	2b03      	cmp	r3, #3
 80011c6:	d855      	bhi.n	8001274 <DMA_CheckFifoParam+0xcc>
 80011c8:	a201      	add	r2, pc, #4	; (adr r2, 80011d0 <DMA_CheckFifoParam+0x28>)
 80011ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ce:	bf00      	nop
 80011d0:	080011e1 	.word	0x080011e1
 80011d4:	080011f3 	.word	0x080011f3
 80011d8:	080011e1 	.word	0x080011e1
 80011dc:	08001275 	.word	0x08001275
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d045      	beq.n	8001278 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80011f0:	e042      	b.n	8001278 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80011fa:	d13f      	bne.n	800127c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001200:	e03c      	b.n	800127c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800120a:	d121      	bne.n	8001250 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	2b03      	cmp	r3, #3
 8001210:	d836      	bhi.n	8001280 <DMA_CheckFifoParam+0xd8>
 8001212:	a201      	add	r2, pc, #4	; (adr r2, 8001218 <DMA_CheckFifoParam+0x70>)
 8001214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001218:	08001229 	.word	0x08001229
 800121c:	0800122f 	.word	0x0800122f
 8001220:	08001229 	.word	0x08001229
 8001224:	08001241 	.word	0x08001241
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	73fb      	strb	r3, [r7, #15]
      break;
 800122c:	e02f      	b.n	800128e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001232:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d024      	beq.n	8001284 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800123e:	e021      	b.n	8001284 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001244:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001248:	d11e      	bne.n	8001288 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800124e:	e01b      	b.n	8001288 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	2b02      	cmp	r3, #2
 8001254:	d902      	bls.n	800125c <DMA_CheckFifoParam+0xb4>
 8001256:	2b03      	cmp	r3, #3
 8001258:	d003      	beq.n	8001262 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800125a:	e018      	b.n	800128e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	73fb      	strb	r3, [r7, #15]
      break;
 8001260:	e015      	b.n	800128e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001266:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d00e      	beq.n	800128c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	73fb      	strb	r3, [r7, #15]
      break;
 8001272:	e00b      	b.n	800128c <DMA_CheckFifoParam+0xe4>
      break;
 8001274:	bf00      	nop
 8001276:	e00a      	b.n	800128e <DMA_CheckFifoParam+0xe6>
      break;
 8001278:	bf00      	nop
 800127a:	e008      	b.n	800128e <DMA_CheckFifoParam+0xe6>
      break;
 800127c:	bf00      	nop
 800127e:	e006      	b.n	800128e <DMA_CheckFifoParam+0xe6>
      break;
 8001280:	bf00      	nop
 8001282:	e004      	b.n	800128e <DMA_CheckFifoParam+0xe6>
      break;
 8001284:	bf00      	nop
 8001286:	e002      	b.n	800128e <DMA_CheckFifoParam+0xe6>
      break;   
 8001288:	bf00      	nop
 800128a:	e000      	b.n	800128e <DMA_CheckFifoParam+0xe6>
      break;
 800128c:	bf00      	nop
    }
  } 
  
  return status; 
 800128e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001290:	4618      	mov	r0, r3
 8001292:	3714      	adds	r7, #20
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800129c:	b480      	push	{r7}
 800129e:	b089      	sub	sp, #36	; 0x24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012a6:	2300      	movs	r3, #0
 80012a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012aa:	2300      	movs	r3, #0
 80012ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012b2:	2300      	movs	r3, #0
 80012b4:	61fb      	str	r3, [r7, #28]
 80012b6:	e177      	b.n	80015a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012b8:	2201      	movs	r2, #1
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	697a      	ldr	r2, [r7, #20]
 80012c8:	4013      	ands	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	f040 8166 	bne.w	80015a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d00b      	beq.n	80012f6 <HAL_GPIO_Init+0x5a>
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d007      	beq.n	80012f6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012ea:	2b11      	cmp	r3, #17
 80012ec:	d003      	beq.n	80012f6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	2b12      	cmp	r3, #18
 80012f4:	d130      	bne.n	8001358 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	2203      	movs	r2, #3
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43db      	mvns	r3, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4013      	ands	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	68da      	ldr	r2, [r3, #12]
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4313      	orrs	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800132c:	2201      	movs	r2, #1
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4013      	ands	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	091b      	lsrs	r3, r3, #4
 8001342:	f003 0201 	and.w	r2, r3, #1
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4313      	orrs	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	2203      	movs	r2, #3
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	43db      	mvns	r3, r3
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4013      	ands	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	689a      	ldr	r2, [r3, #8]
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	2b02      	cmp	r3, #2
 800138e:	d003      	beq.n	8001398 <HAL_GPIO_Init+0xfc>
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	2b12      	cmp	r3, #18
 8001396:	d123      	bne.n	80013e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	08da      	lsrs	r2, r3, #3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3208      	adds	r2, #8
 80013a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	f003 0307 	and.w	r3, r3, #7
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	220f      	movs	r2, #15
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	43db      	mvns	r3, r3
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4013      	ands	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	691a      	ldr	r2, [r3, #16]
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	08da      	lsrs	r2, r3, #3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	3208      	adds	r2, #8
 80013da:	69b9      	ldr	r1, [r7, #24]
 80013dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	2203      	movs	r2, #3
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	43db      	mvns	r3, r3
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4013      	ands	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f003 0203 	and.w	r2, r3, #3
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4313      	orrs	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141c:	2b00      	cmp	r3, #0
 800141e:	f000 80c0 	beq.w	80015a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	4b65      	ldr	r3, [pc, #404]	; (80015bc <HAL_GPIO_Init+0x320>)
 8001428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142a:	4a64      	ldr	r2, [pc, #400]	; (80015bc <HAL_GPIO_Init+0x320>)
 800142c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001430:	6453      	str	r3, [r2, #68]	; 0x44
 8001432:	4b62      	ldr	r3, [pc, #392]	; (80015bc <HAL_GPIO_Init+0x320>)
 8001434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001436:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800143e:	4a60      	ldr	r2, [pc, #384]	; (80015c0 <HAL_GPIO_Init+0x324>)
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	089b      	lsrs	r3, r3, #2
 8001444:	3302      	adds	r3, #2
 8001446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800144a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	f003 0303 	and.w	r3, r3, #3
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	220f      	movs	r2, #15
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	43db      	mvns	r3, r3
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	4013      	ands	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a57      	ldr	r2, [pc, #348]	; (80015c4 <HAL_GPIO_Init+0x328>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d037      	beq.n	80014da <HAL_GPIO_Init+0x23e>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a56      	ldr	r2, [pc, #344]	; (80015c8 <HAL_GPIO_Init+0x32c>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d031      	beq.n	80014d6 <HAL_GPIO_Init+0x23a>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a55      	ldr	r2, [pc, #340]	; (80015cc <HAL_GPIO_Init+0x330>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d02b      	beq.n	80014d2 <HAL_GPIO_Init+0x236>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a54      	ldr	r2, [pc, #336]	; (80015d0 <HAL_GPIO_Init+0x334>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d025      	beq.n	80014ce <HAL_GPIO_Init+0x232>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a53      	ldr	r2, [pc, #332]	; (80015d4 <HAL_GPIO_Init+0x338>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d01f      	beq.n	80014ca <HAL_GPIO_Init+0x22e>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a52      	ldr	r2, [pc, #328]	; (80015d8 <HAL_GPIO_Init+0x33c>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d019      	beq.n	80014c6 <HAL_GPIO_Init+0x22a>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a51      	ldr	r2, [pc, #324]	; (80015dc <HAL_GPIO_Init+0x340>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d013      	beq.n	80014c2 <HAL_GPIO_Init+0x226>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a50      	ldr	r2, [pc, #320]	; (80015e0 <HAL_GPIO_Init+0x344>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d00d      	beq.n	80014be <HAL_GPIO_Init+0x222>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a4f      	ldr	r2, [pc, #316]	; (80015e4 <HAL_GPIO_Init+0x348>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d007      	beq.n	80014ba <HAL_GPIO_Init+0x21e>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a4e      	ldr	r2, [pc, #312]	; (80015e8 <HAL_GPIO_Init+0x34c>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d101      	bne.n	80014b6 <HAL_GPIO_Init+0x21a>
 80014b2:	2309      	movs	r3, #9
 80014b4:	e012      	b.n	80014dc <HAL_GPIO_Init+0x240>
 80014b6:	230a      	movs	r3, #10
 80014b8:	e010      	b.n	80014dc <HAL_GPIO_Init+0x240>
 80014ba:	2308      	movs	r3, #8
 80014bc:	e00e      	b.n	80014dc <HAL_GPIO_Init+0x240>
 80014be:	2307      	movs	r3, #7
 80014c0:	e00c      	b.n	80014dc <HAL_GPIO_Init+0x240>
 80014c2:	2306      	movs	r3, #6
 80014c4:	e00a      	b.n	80014dc <HAL_GPIO_Init+0x240>
 80014c6:	2305      	movs	r3, #5
 80014c8:	e008      	b.n	80014dc <HAL_GPIO_Init+0x240>
 80014ca:	2304      	movs	r3, #4
 80014cc:	e006      	b.n	80014dc <HAL_GPIO_Init+0x240>
 80014ce:	2303      	movs	r3, #3
 80014d0:	e004      	b.n	80014dc <HAL_GPIO_Init+0x240>
 80014d2:	2302      	movs	r3, #2
 80014d4:	e002      	b.n	80014dc <HAL_GPIO_Init+0x240>
 80014d6:	2301      	movs	r3, #1
 80014d8:	e000      	b.n	80014dc <HAL_GPIO_Init+0x240>
 80014da:	2300      	movs	r3, #0
 80014dc:	69fa      	ldr	r2, [r7, #28]
 80014de:	f002 0203 	and.w	r2, r2, #3
 80014e2:	0092      	lsls	r2, r2, #2
 80014e4:	4093      	lsls	r3, r2
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014ec:	4934      	ldr	r1, [pc, #208]	; (80015c0 <HAL_GPIO_Init+0x324>)
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	089b      	lsrs	r3, r3, #2
 80014f2:	3302      	adds	r3, #2
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014fa:	4b3c      	ldr	r3, [pc, #240]	; (80015ec <HAL_GPIO_Init+0x350>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	43db      	mvns	r3, r3
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	4013      	ands	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d003      	beq.n	800151e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	4313      	orrs	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800151e:	4a33      	ldr	r2, [pc, #204]	; (80015ec <HAL_GPIO_Init+0x350>)
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001524:	4b31      	ldr	r3, [pc, #196]	; (80015ec <HAL_GPIO_Init+0x350>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	43db      	mvns	r3, r3
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	4013      	ands	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d003      	beq.n	8001548 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	4313      	orrs	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001548:	4a28      	ldr	r2, [pc, #160]	; (80015ec <HAL_GPIO_Init+0x350>)
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800154e:	4b27      	ldr	r3, [pc, #156]	; (80015ec <HAL_GPIO_Init+0x350>)
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	43db      	mvns	r3, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4013      	ands	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d003      	beq.n	8001572 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	4313      	orrs	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001572:	4a1e      	ldr	r2, [pc, #120]	; (80015ec <HAL_GPIO_Init+0x350>)
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001578:	4b1c      	ldr	r3, [pc, #112]	; (80015ec <HAL_GPIO_Init+0x350>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	43db      	mvns	r3, r3
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	4013      	ands	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d003      	beq.n	800159c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	4313      	orrs	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800159c:	4a13      	ldr	r2, [pc, #76]	; (80015ec <HAL_GPIO_Init+0x350>)
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	3301      	adds	r3, #1
 80015a6:	61fb      	str	r3, [r7, #28]
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	2b0f      	cmp	r3, #15
 80015ac:	f67f ae84 	bls.w	80012b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015b0:	bf00      	nop
 80015b2:	3724      	adds	r7, #36	; 0x24
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	40023800 	.word	0x40023800
 80015c0:	40013800 	.word	0x40013800
 80015c4:	40020000 	.word	0x40020000
 80015c8:	40020400 	.word	0x40020400
 80015cc:	40020800 	.word	0x40020800
 80015d0:	40020c00 	.word	0x40020c00
 80015d4:	40021000 	.word	0x40021000
 80015d8:	40021400 	.word	0x40021400
 80015dc:	40021800 	.word	0x40021800
 80015e0:	40021c00 	.word	0x40021c00
 80015e4:	40022000 	.word	0x40022000
 80015e8:	40022400 	.word	0x40022400
 80015ec:	40013c00 	.word	0x40013c00

080015f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	460b      	mov	r3, r1
 80015fa:	807b      	strh	r3, [r7, #2]
 80015fc:	4613      	mov	r3, r2
 80015fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001600:	787b      	ldrb	r3, [r7, #1]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d003      	beq.n	800160e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001606:	887a      	ldrh	r2, [r7, #2]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800160c:	e003      	b.n	8001616 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800160e:	887b      	ldrh	r3, [r7, #2]
 8001610:	041a      	lsls	r2, r3, #16
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	619a      	str	r2, [r3, #24]
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
	...

08001624 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d101      	bne.n	8001636 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e25b      	b.n	8001aee <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	2b00      	cmp	r3, #0
 8001640:	d075      	beq.n	800172e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001642:	4ba3      	ldr	r3, [pc, #652]	; (80018d0 <HAL_RCC_OscConfig+0x2ac>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f003 030c 	and.w	r3, r3, #12
 800164a:	2b04      	cmp	r3, #4
 800164c:	d00c      	beq.n	8001668 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800164e:	4ba0      	ldr	r3, [pc, #640]	; (80018d0 <HAL_RCC_OscConfig+0x2ac>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001656:	2b08      	cmp	r3, #8
 8001658:	d112      	bne.n	8001680 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800165a:	4b9d      	ldr	r3, [pc, #628]	; (80018d0 <HAL_RCC_OscConfig+0x2ac>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001662:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001666:	d10b      	bne.n	8001680 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001668:	4b99      	ldr	r3, [pc, #612]	; (80018d0 <HAL_RCC_OscConfig+0x2ac>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d05b      	beq.n	800172c <HAL_RCC_OscConfig+0x108>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d157      	bne.n	800172c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e236      	b.n	8001aee <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001688:	d106      	bne.n	8001698 <HAL_RCC_OscConfig+0x74>
 800168a:	4b91      	ldr	r3, [pc, #580]	; (80018d0 <HAL_RCC_OscConfig+0x2ac>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a90      	ldr	r2, [pc, #576]	; (80018d0 <HAL_RCC_OscConfig+0x2ac>)
 8001690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001694:	6013      	str	r3, [r2, #0]
 8001696:	e01d      	b.n	80016d4 <HAL_RCC_OscConfig+0xb0>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016a0:	d10c      	bne.n	80016bc <HAL_RCC_OscConfig+0x98>
 80016a2:	4b8b      	ldr	r3, [pc, #556]	; (80018d0 <HAL_RCC_OscConfig+0x2ac>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a8a      	ldr	r2, [pc, #552]	; (80018d0 <HAL_RCC_OscConfig+0x2ac>)
 80016a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016ac:	6013      	str	r3, [r2, #0]
 80016ae:	4b88      	ldr	r3, [pc, #544]	; (80018d0 <HAL_RCC_OscConfig+0x2ac>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a87      	ldr	r2, [pc, #540]	; (80018d0 <HAL_RCC_OscConfig+0x2ac>)
 80016b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016b8:	6013      	str	r3, [r2, #0]
 80016ba:	e00b      	b.n	80016d4 <HAL_RCC_OscConfig+0xb0>
 80016bc:	4b84      	ldr	r3, [pc, #528]	; (80018d0 <HAL_RCC_OscConfig+0x2ac>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a83      	ldr	r2, [pc, #524]	; (80018d0 <HAL_RCC_OscConfig+0x2ac>)
 80016c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016c6:	6013      	str	r3, [r2, #0]
 80016c8:	4b81      	ldr	r3, [pc, #516]	; (80018d0 <HAL_RCC_OscConfig+0x2ac>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a80      	ldr	r2, [pc, #512]	; (80018d0 <HAL_RCC_OscConfig+0x2ac>)
 80016ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d013      	beq.n	8001704 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016dc:	f7ff f9bc 	bl	8000a58 <HAL_GetTick>
 80016e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016e4:	f7ff f9b8 	bl	8000a58 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b64      	cmp	r3, #100	; 0x64
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e1fb      	b.n	8001aee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016f6:	4b76      	ldr	r3, [pc, #472]	; (80018d0 <HAL_RCC_OscConfig+0x2ac>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d0f0      	beq.n	80016e4 <HAL_RCC_OscConfig+0xc0>
 8001702:	e014      	b.n	800172e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001704:	f7ff f9a8 	bl	8000a58 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800170c:	f7ff f9a4 	bl	8000a58 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b64      	cmp	r3, #100	; 0x64
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e1e7      	b.n	8001aee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800171e:	4b6c      	ldr	r3, [pc, #432]	; (80018d0 <HAL_RCC_OscConfig+0x2ac>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1f0      	bne.n	800170c <HAL_RCC_OscConfig+0xe8>
 800172a:	e000      	b.n	800172e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800172c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d063      	beq.n	8001802 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800173a:	4b65      	ldr	r3, [pc, #404]	; (80018d0 <HAL_RCC_OscConfig+0x2ac>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f003 030c 	and.w	r3, r3, #12
 8001742:	2b00      	cmp	r3, #0
 8001744:	d00b      	beq.n	800175e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001746:	4b62      	ldr	r3, [pc, #392]	; (80018d0 <HAL_RCC_OscConfig+0x2ac>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800174e:	2b08      	cmp	r3, #8
 8001750:	d11c      	bne.n	800178c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001752:	4b5f      	ldr	r3, [pc, #380]	; (80018d0 <HAL_RCC_OscConfig+0x2ac>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d116      	bne.n	800178c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800175e:	4b5c      	ldr	r3, [pc, #368]	; (80018d0 <HAL_RCC_OscConfig+0x2ac>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d005      	beq.n	8001776 <HAL_RCC_OscConfig+0x152>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d001      	beq.n	8001776 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e1bb      	b.n	8001aee <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001776:	4b56      	ldr	r3, [pc, #344]	; (80018d0 <HAL_RCC_OscConfig+0x2ac>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	00db      	lsls	r3, r3, #3
 8001784:	4952      	ldr	r1, [pc, #328]	; (80018d0 <HAL_RCC_OscConfig+0x2ac>)
 8001786:	4313      	orrs	r3, r2
 8001788:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800178a:	e03a      	b.n	8001802 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d020      	beq.n	80017d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001794:	4b4f      	ldr	r3, [pc, #316]	; (80018d4 <HAL_RCC_OscConfig+0x2b0>)
 8001796:	2201      	movs	r2, #1
 8001798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179a:	f7ff f95d 	bl	8000a58 <HAL_GetTick>
 800179e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017a0:	e008      	b.n	80017b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017a2:	f7ff f959 	bl	8000a58 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e19c      	b.n	8001aee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b4:	4b46      	ldr	r3, [pc, #280]	; (80018d0 <HAL_RCC_OscConfig+0x2ac>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d0f0      	beq.n	80017a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c0:	4b43      	ldr	r3, [pc, #268]	; (80018d0 <HAL_RCC_OscConfig+0x2ac>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	691b      	ldr	r3, [r3, #16]
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	4940      	ldr	r1, [pc, #256]	; (80018d0 <HAL_RCC_OscConfig+0x2ac>)
 80017d0:	4313      	orrs	r3, r2
 80017d2:	600b      	str	r3, [r1, #0]
 80017d4:	e015      	b.n	8001802 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017d6:	4b3f      	ldr	r3, [pc, #252]	; (80018d4 <HAL_RCC_OscConfig+0x2b0>)
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017dc:	f7ff f93c 	bl	8000a58 <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017e4:	f7ff f938 	bl	8000a58 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e17b      	b.n	8001aee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017f6:	4b36      	ldr	r3, [pc, #216]	; (80018d0 <HAL_RCC_OscConfig+0x2ac>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1f0      	bne.n	80017e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0308 	and.w	r3, r3, #8
 800180a:	2b00      	cmp	r3, #0
 800180c:	d030      	beq.n	8001870 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	695b      	ldr	r3, [r3, #20]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d016      	beq.n	8001844 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001816:	4b30      	ldr	r3, [pc, #192]	; (80018d8 <HAL_RCC_OscConfig+0x2b4>)
 8001818:	2201      	movs	r2, #1
 800181a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800181c:	f7ff f91c 	bl	8000a58 <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001824:	f7ff f918 	bl	8000a58 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e15b      	b.n	8001aee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001836:	4b26      	ldr	r3, [pc, #152]	; (80018d0 <HAL_RCC_OscConfig+0x2ac>)
 8001838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d0f0      	beq.n	8001824 <HAL_RCC_OscConfig+0x200>
 8001842:	e015      	b.n	8001870 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001844:	4b24      	ldr	r3, [pc, #144]	; (80018d8 <HAL_RCC_OscConfig+0x2b4>)
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800184a:	f7ff f905 	bl	8000a58 <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001850:	e008      	b.n	8001864 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001852:	f7ff f901 	bl	8000a58 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e144      	b.n	8001aee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001864:	4b1a      	ldr	r3, [pc, #104]	; (80018d0 <HAL_RCC_OscConfig+0x2ac>)
 8001866:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d1f0      	bne.n	8001852 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0304 	and.w	r3, r3, #4
 8001878:	2b00      	cmp	r3, #0
 800187a:	f000 80a0 	beq.w	80019be <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800187e:	2300      	movs	r3, #0
 8001880:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001882:	4b13      	ldr	r3, [pc, #76]	; (80018d0 <HAL_RCC_OscConfig+0x2ac>)
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d10f      	bne.n	80018ae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	60bb      	str	r3, [r7, #8]
 8001892:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <HAL_RCC_OscConfig+0x2ac>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	4a0e      	ldr	r2, [pc, #56]	; (80018d0 <HAL_RCC_OscConfig+0x2ac>)
 8001898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800189c:	6413      	str	r3, [r2, #64]	; 0x40
 800189e:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <HAL_RCC_OscConfig+0x2ac>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a6:	60bb      	str	r3, [r7, #8]
 80018a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018aa:	2301      	movs	r3, #1
 80018ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ae:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <HAL_RCC_OscConfig+0x2b8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d121      	bne.n	80018fe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018ba:	4b08      	ldr	r3, [pc, #32]	; (80018dc <HAL_RCC_OscConfig+0x2b8>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a07      	ldr	r2, [pc, #28]	; (80018dc <HAL_RCC_OscConfig+0x2b8>)
 80018c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018c6:	f7ff f8c7 	bl	8000a58 <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018cc:	e011      	b.n	80018f2 <HAL_RCC_OscConfig+0x2ce>
 80018ce:	bf00      	nop
 80018d0:	40023800 	.word	0x40023800
 80018d4:	42470000 	.word	0x42470000
 80018d8:	42470e80 	.word	0x42470e80
 80018dc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018e0:	f7ff f8ba 	bl	8000a58 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e0fd      	b.n	8001aee <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f2:	4b81      	ldr	r3, [pc, #516]	; (8001af8 <HAL_RCC_OscConfig+0x4d4>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d0f0      	beq.n	80018e0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d106      	bne.n	8001914 <HAL_RCC_OscConfig+0x2f0>
 8001906:	4b7d      	ldr	r3, [pc, #500]	; (8001afc <HAL_RCC_OscConfig+0x4d8>)
 8001908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800190a:	4a7c      	ldr	r2, [pc, #496]	; (8001afc <HAL_RCC_OscConfig+0x4d8>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	6713      	str	r3, [r2, #112]	; 0x70
 8001912:	e01c      	b.n	800194e <HAL_RCC_OscConfig+0x32a>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	2b05      	cmp	r3, #5
 800191a:	d10c      	bne.n	8001936 <HAL_RCC_OscConfig+0x312>
 800191c:	4b77      	ldr	r3, [pc, #476]	; (8001afc <HAL_RCC_OscConfig+0x4d8>)
 800191e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001920:	4a76      	ldr	r2, [pc, #472]	; (8001afc <HAL_RCC_OscConfig+0x4d8>)
 8001922:	f043 0304 	orr.w	r3, r3, #4
 8001926:	6713      	str	r3, [r2, #112]	; 0x70
 8001928:	4b74      	ldr	r3, [pc, #464]	; (8001afc <HAL_RCC_OscConfig+0x4d8>)
 800192a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800192c:	4a73      	ldr	r2, [pc, #460]	; (8001afc <HAL_RCC_OscConfig+0x4d8>)
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	6713      	str	r3, [r2, #112]	; 0x70
 8001934:	e00b      	b.n	800194e <HAL_RCC_OscConfig+0x32a>
 8001936:	4b71      	ldr	r3, [pc, #452]	; (8001afc <HAL_RCC_OscConfig+0x4d8>)
 8001938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800193a:	4a70      	ldr	r2, [pc, #448]	; (8001afc <HAL_RCC_OscConfig+0x4d8>)
 800193c:	f023 0301 	bic.w	r3, r3, #1
 8001940:	6713      	str	r3, [r2, #112]	; 0x70
 8001942:	4b6e      	ldr	r3, [pc, #440]	; (8001afc <HAL_RCC_OscConfig+0x4d8>)
 8001944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001946:	4a6d      	ldr	r2, [pc, #436]	; (8001afc <HAL_RCC_OscConfig+0x4d8>)
 8001948:	f023 0304 	bic.w	r3, r3, #4
 800194c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d015      	beq.n	8001982 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001956:	f7ff f87f 	bl	8000a58 <HAL_GetTick>
 800195a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800195c:	e00a      	b.n	8001974 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800195e:	f7ff f87b 	bl	8000a58 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	f241 3288 	movw	r2, #5000	; 0x1388
 800196c:	4293      	cmp	r3, r2
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e0bc      	b.n	8001aee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001974:	4b61      	ldr	r3, [pc, #388]	; (8001afc <HAL_RCC_OscConfig+0x4d8>)
 8001976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0ee      	beq.n	800195e <HAL_RCC_OscConfig+0x33a>
 8001980:	e014      	b.n	80019ac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001982:	f7ff f869 	bl	8000a58 <HAL_GetTick>
 8001986:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001988:	e00a      	b.n	80019a0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800198a:	f7ff f865 	bl	8000a58 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	f241 3288 	movw	r2, #5000	; 0x1388
 8001998:	4293      	cmp	r3, r2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e0a6      	b.n	8001aee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019a0:	4b56      	ldr	r3, [pc, #344]	; (8001afc <HAL_RCC_OscConfig+0x4d8>)
 80019a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a4:	f003 0302 	and.w	r3, r3, #2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1ee      	bne.n	800198a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019ac:	7dfb      	ldrb	r3, [r7, #23]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d105      	bne.n	80019be <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019b2:	4b52      	ldr	r3, [pc, #328]	; (8001afc <HAL_RCC_OscConfig+0x4d8>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	4a51      	ldr	r2, [pc, #324]	; (8001afc <HAL_RCC_OscConfig+0x4d8>)
 80019b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f000 8092 	beq.w	8001aec <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019c8:	4b4c      	ldr	r3, [pc, #304]	; (8001afc <HAL_RCC_OscConfig+0x4d8>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f003 030c 	and.w	r3, r3, #12
 80019d0:	2b08      	cmp	r3, #8
 80019d2:	d05c      	beq.n	8001a8e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d141      	bne.n	8001a60 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019dc:	4b48      	ldr	r3, [pc, #288]	; (8001b00 <HAL_RCC_OscConfig+0x4dc>)
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e2:	f7ff f839 	bl	8000a58 <HAL_GetTick>
 80019e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019e8:	e008      	b.n	80019fc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ea:	f7ff f835 	bl	8000a58 <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e078      	b.n	8001aee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019fc:	4b3f      	ldr	r3, [pc, #252]	; (8001afc <HAL_RCC_OscConfig+0x4d8>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1f0      	bne.n	80019ea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	69da      	ldr	r2, [r3, #28]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a1b      	ldr	r3, [r3, #32]
 8001a10:	431a      	orrs	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a16:	019b      	lsls	r3, r3, #6
 8001a18:	431a      	orrs	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1e:	085b      	lsrs	r3, r3, #1
 8001a20:	3b01      	subs	r3, #1
 8001a22:	041b      	lsls	r3, r3, #16
 8001a24:	431a      	orrs	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2a:	061b      	lsls	r3, r3, #24
 8001a2c:	4933      	ldr	r1, [pc, #204]	; (8001afc <HAL_RCC_OscConfig+0x4d8>)
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a32:	4b33      	ldr	r3, [pc, #204]	; (8001b00 <HAL_RCC_OscConfig+0x4dc>)
 8001a34:	2201      	movs	r2, #1
 8001a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a38:	f7ff f80e 	bl	8000a58 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a40:	f7ff f80a 	bl	8000a58 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e04d      	b.n	8001aee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a52:	4b2a      	ldr	r3, [pc, #168]	; (8001afc <HAL_RCC_OscConfig+0x4d8>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d0f0      	beq.n	8001a40 <HAL_RCC_OscConfig+0x41c>
 8001a5e:	e045      	b.n	8001aec <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a60:	4b27      	ldr	r3, [pc, #156]	; (8001b00 <HAL_RCC_OscConfig+0x4dc>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a66:	f7fe fff7 	bl	8000a58 <HAL_GetTick>
 8001a6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a6c:	e008      	b.n	8001a80 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a6e:	f7fe fff3 	bl	8000a58 <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e036      	b.n	8001aee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a80:	4b1e      	ldr	r3, [pc, #120]	; (8001afc <HAL_RCC_OscConfig+0x4d8>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1f0      	bne.n	8001a6e <HAL_RCC_OscConfig+0x44a>
 8001a8c:	e02e      	b.n	8001aec <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d101      	bne.n	8001a9a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e029      	b.n	8001aee <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a9a:	4b18      	ldr	r3, [pc, #96]	; (8001afc <HAL_RCC_OscConfig+0x4d8>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d11c      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d115      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001abc:	68fa      	ldr	r2, [r7, #12]
 8001abe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d10d      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d106      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d001      	beq.n	8001aec <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e000      	b.n	8001aee <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3718      	adds	r7, #24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40007000 	.word	0x40007000
 8001afc:	40023800 	.word	0x40023800
 8001b00:	42470060 	.word	0x42470060

08001b04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d101      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e0cc      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b18:	4b68      	ldr	r3, [pc, #416]	; (8001cbc <HAL_RCC_ClockConfig+0x1b8>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 030f 	and.w	r3, r3, #15
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d90c      	bls.n	8001b40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b26:	4b65      	ldr	r3, [pc, #404]	; (8001cbc <HAL_RCC_ClockConfig+0x1b8>)
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b2e:	4b63      	ldr	r3, [pc, #396]	; (8001cbc <HAL_RCC_ClockConfig+0x1b8>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d001      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e0b8      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d020      	beq.n	8001b8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0304 	and.w	r3, r3, #4
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d005      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b58:	4b59      	ldr	r3, [pc, #356]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	4a58      	ldr	r2, [pc, #352]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0308 	and.w	r3, r3, #8
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d005      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b70:	4b53      	ldr	r3, [pc, #332]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	4a52      	ldr	r2, [pc, #328]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b7c:	4b50      	ldr	r3, [pc, #320]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	494d      	ldr	r1, [pc, #308]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d044      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d107      	bne.n	8001bb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba2:	4b47      	ldr	r3, [pc, #284]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d119      	bne.n	8001be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e07f      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d003      	beq.n	8001bc2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bbe:	2b03      	cmp	r3, #3
 8001bc0:	d107      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bc2:	4b3f      	ldr	r3, [pc, #252]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d109      	bne.n	8001be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e06f      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd2:	4b3b      	ldr	r3, [pc, #236]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e067      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001be2:	4b37      	ldr	r3, [pc, #220]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f023 0203 	bic.w	r2, r3, #3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	4934      	ldr	r1, [pc, #208]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bf4:	f7fe ff30 	bl	8000a58 <HAL_GetTick>
 8001bf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bfa:	e00a      	b.n	8001c12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bfc:	f7fe ff2c 	bl	8000a58 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e04f      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c12:	4b2b      	ldr	r3, [pc, #172]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 020c 	and.w	r2, r3, #12
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d1eb      	bne.n	8001bfc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c24:	4b25      	ldr	r3, [pc, #148]	; (8001cbc <HAL_RCC_ClockConfig+0x1b8>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 030f 	and.w	r3, r3, #15
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d20c      	bcs.n	8001c4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c32:	4b22      	ldr	r3, [pc, #136]	; (8001cbc <HAL_RCC_ClockConfig+0x1b8>)
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	b2d2      	uxtb	r2, r2
 8001c38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3a:	4b20      	ldr	r3, [pc, #128]	; (8001cbc <HAL_RCC_ClockConfig+0x1b8>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 030f 	and.w	r3, r3, #15
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d001      	beq.n	8001c4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e032      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0304 	and.w	r3, r3, #4
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d008      	beq.n	8001c6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c58:	4b19      	ldr	r3, [pc, #100]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	4916      	ldr	r1, [pc, #88]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0308 	and.w	r3, r3, #8
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d009      	beq.n	8001c8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c76:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	490e      	ldr	r1, [pc, #56]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c8a:	f000 f821 	bl	8001cd0 <HAL_RCC_GetSysClockFreq>
 8001c8e:	4601      	mov	r1, r0
 8001c90:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	091b      	lsrs	r3, r3, #4
 8001c96:	f003 030f 	and.w	r3, r3, #15
 8001c9a:	4a0a      	ldr	r2, [pc, #40]	; (8001cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c9c:	5cd3      	ldrb	r3, [r2, r3]
 8001c9e:	fa21 f303 	lsr.w	r3, r1, r3
 8001ca2:	4a09      	ldr	r2, [pc, #36]	; (8001cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ca6:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <HAL_RCC_ClockConfig+0x1c8>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7fe fe90 	bl	80009d0 <HAL_InitTick>

  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40023c00 	.word	0x40023c00
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	080026a0 	.word	0x080026a0
 8001cc8:	20000000 	.word	0x20000000
 8001ccc:	20000004 	.word	0x20000004

08001cd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	607b      	str	r3, [r7, #4]
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	2300      	movs	r3, #0
 8001ce0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ce6:	4b50      	ldr	r3, [pc, #320]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x158>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f003 030c 	and.w	r3, r3, #12
 8001cee:	2b04      	cmp	r3, #4
 8001cf0:	d007      	beq.n	8001d02 <HAL_RCC_GetSysClockFreq+0x32>
 8001cf2:	2b08      	cmp	r3, #8
 8001cf4:	d008      	beq.n	8001d08 <HAL_RCC_GetSysClockFreq+0x38>
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f040 808d 	bne.w	8001e16 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cfc:	4b4b      	ldr	r3, [pc, #300]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x15c>)
 8001cfe:	60bb      	str	r3, [r7, #8]
       break;
 8001d00:	e08c      	b.n	8001e1c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d02:	4b4b      	ldr	r3, [pc, #300]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d04:	60bb      	str	r3, [r7, #8]
      break;
 8001d06:	e089      	b.n	8001e1c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d08:	4b47      	ldr	r3, [pc, #284]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x158>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d10:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d12:	4b45      	ldr	r3, [pc, #276]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x158>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d023      	beq.n	8001d66 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d1e:	4b42      	ldr	r3, [pc, #264]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x158>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	099b      	lsrs	r3, r3, #6
 8001d24:	f04f 0400 	mov.w	r4, #0
 8001d28:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d2c:	f04f 0200 	mov.w	r2, #0
 8001d30:	ea03 0501 	and.w	r5, r3, r1
 8001d34:	ea04 0602 	and.w	r6, r4, r2
 8001d38:	4a3d      	ldr	r2, [pc, #244]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d3a:	fb02 f106 	mul.w	r1, r2, r6
 8001d3e:	2200      	movs	r2, #0
 8001d40:	fb02 f205 	mul.w	r2, r2, r5
 8001d44:	440a      	add	r2, r1
 8001d46:	493a      	ldr	r1, [pc, #232]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d48:	fba5 0101 	umull	r0, r1, r5, r1
 8001d4c:	1853      	adds	r3, r2, r1
 8001d4e:	4619      	mov	r1, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f04f 0400 	mov.w	r4, #0
 8001d56:	461a      	mov	r2, r3
 8001d58:	4623      	mov	r3, r4
 8001d5a:	f7fe fa47 	bl	80001ec <__aeabi_uldivmod>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	460c      	mov	r4, r1
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	e049      	b.n	8001dfa <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d66:	4b30      	ldr	r3, [pc, #192]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x158>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	099b      	lsrs	r3, r3, #6
 8001d6c:	f04f 0400 	mov.w	r4, #0
 8001d70:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d74:	f04f 0200 	mov.w	r2, #0
 8001d78:	ea03 0501 	and.w	r5, r3, r1
 8001d7c:	ea04 0602 	and.w	r6, r4, r2
 8001d80:	4629      	mov	r1, r5
 8001d82:	4632      	mov	r2, r6
 8001d84:	f04f 0300 	mov.w	r3, #0
 8001d88:	f04f 0400 	mov.w	r4, #0
 8001d8c:	0154      	lsls	r4, r2, #5
 8001d8e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d92:	014b      	lsls	r3, r1, #5
 8001d94:	4619      	mov	r1, r3
 8001d96:	4622      	mov	r2, r4
 8001d98:	1b49      	subs	r1, r1, r5
 8001d9a:	eb62 0206 	sbc.w	r2, r2, r6
 8001d9e:	f04f 0300 	mov.w	r3, #0
 8001da2:	f04f 0400 	mov.w	r4, #0
 8001da6:	0194      	lsls	r4, r2, #6
 8001da8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001dac:	018b      	lsls	r3, r1, #6
 8001dae:	1a5b      	subs	r3, r3, r1
 8001db0:	eb64 0402 	sbc.w	r4, r4, r2
 8001db4:	f04f 0100 	mov.w	r1, #0
 8001db8:	f04f 0200 	mov.w	r2, #0
 8001dbc:	00e2      	lsls	r2, r4, #3
 8001dbe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001dc2:	00d9      	lsls	r1, r3, #3
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	4614      	mov	r4, r2
 8001dc8:	195b      	adds	r3, r3, r5
 8001dca:	eb44 0406 	adc.w	r4, r4, r6
 8001dce:	f04f 0100 	mov.w	r1, #0
 8001dd2:	f04f 0200 	mov.w	r2, #0
 8001dd6:	02a2      	lsls	r2, r4, #10
 8001dd8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001ddc:	0299      	lsls	r1, r3, #10
 8001dde:	460b      	mov	r3, r1
 8001de0:	4614      	mov	r4, r2
 8001de2:	4618      	mov	r0, r3
 8001de4:	4621      	mov	r1, r4
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f04f 0400 	mov.w	r4, #0
 8001dec:	461a      	mov	r2, r3
 8001dee:	4623      	mov	r3, r4
 8001df0:	f7fe f9fc 	bl	80001ec <__aeabi_uldivmod>
 8001df4:	4603      	mov	r3, r0
 8001df6:	460c      	mov	r4, r1
 8001df8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001dfa:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x158>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	0c1b      	lsrs	r3, r3, #16
 8001e00:	f003 0303 	and.w	r3, r3, #3
 8001e04:	3301      	adds	r3, #1
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e12:	60bb      	str	r3, [r7, #8]
      break;
 8001e14:	e002      	b.n	8001e1c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e16:	4b05      	ldr	r3, [pc, #20]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x15c>)
 8001e18:	60bb      	str	r3, [r7, #8]
      break;
 8001e1a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e1c:	68bb      	ldr	r3, [r7, #8]
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3714      	adds	r7, #20
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	00f42400 	.word	0x00f42400
 8001e30:	017d7840 	.word	0x017d7840

08001e34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e38:	4b03      	ldr	r3, [pc, #12]	; (8001e48 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	20000000 	.word	0x20000000

08001e4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e50:	f7ff fff0 	bl	8001e34 <HAL_RCC_GetHCLKFreq>
 8001e54:	4601      	mov	r1, r0
 8001e56:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	0a9b      	lsrs	r3, r3, #10
 8001e5c:	f003 0307 	and.w	r3, r3, #7
 8001e60:	4a03      	ldr	r2, [pc, #12]	; (8001e70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e62:	5cd3      	ldrb	r3, [r2, r3]
 8001e64:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	080026b0 	.word	0x080026b0

08001e74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e78:	f7ff ffdc 	bl	8001e34 <HAL_RCC_GetHCLKFreq>
 8001e7c:	4601      	mov	r1, r0
 8001e7e:	4b05      	ldr	r3, [pc, #20]	; (8001e94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	0b5b      	lsrs	r3, r3, #13
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	4a03      	ldr	r2, [pc, #12]	; (8001e98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e8a:	5cd3      	ldrb	r3, [r2, r3]
 8001e8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40023800 	.word	0x40023800
 8001e98:	080026b0 	.word	0x080026b0

08001e9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e03f      	b.n	8001f2e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d106      	bne.n	8001ec8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7fe fc66 	bl	8000794 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2224      	movs	r2, #36	; 0x24
 8001ecc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68da      	ldr	r2, [r3, #12]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ede:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 f829 	bl	8001f38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	691a      	ldr	r2, [r3, #16]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ef4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	695a      	ldr	r2, [r3, #20]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68da      	ldr	r2, [r3, #12]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2220      	movs	r2, #32
 8001f20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2220      	movs	r2, #32
 8001f28:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
	...

08001f38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f3c:	b085      	sub	sp, #20
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	68da      	ldr	r2, [r3, #12]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	430a      	orrs	r2, r1
 8001f56:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689a      	ldr	r2, [r3, #8]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	431a      	orrs	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	431a      	orrs	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69db      	ldr	r3, [r3, #28]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001f7a:	f023 030c 	bic.w	r3, r3, #12
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	6812      	ldr	r2, [r2, #0]
 8001f82:	68f9      	ldr	r1, [r7, #12]
 8001f84:	430b      	orrs	r3, r1
 8001f86:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	699a      	ldr	r2, [r3, #24]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fa6:	f040 818b 	bne.w	80022c0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4ac1      	ldr	r2, [pc, #772]	; (80022b4 <UART_SetConfig+0x37c>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d005      	beq.n	8001fc0 <UART_SetConfig+0x88>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4abf      	ldr	r2, [pc, #764]	; (80022b8 <UART_SetConfig+0x380>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	f040 80bd 	bne.w	800213a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001fc0:	f7ff ff58 	bl	8001e74 <HAL_RCC_GetPCLK2Freq>
 8001fc4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	461d      	mov	r5, r3
 8001fca:	f04f 0600 	mov.w	r6, #0
 8001fce:	46a8      	mov	r8, r5
 8001fd0:	46b1      	mov	r9, r6
 8001fd2:	eb18 0308 	adds.w	r3, r8, r8
 8001fd6:	eb49 0409 	adc.w	r4, r9, r9
 8001fda:	4698      	mov	r8, r3
 8001fdc:	46a1      	mov	r9, r4
 8001fde:	eb18 0805 	adds.w	r8, r8, r5
 8001fe2:	eb49 0906 	adc.w	r9, r9, r6
 8001fe6:	f04f 0100 	mov.w	r1, #0
 8001fea:	f04f 0200 	mov.w	r2, #0
 8001fee:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001ff2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001ff6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001ffa:	4688      	mov	r8, r1
 8001ffc:	4691      	mov	r9, r2
 8001ffe:	eb18 0005 	adds.w	r0, r8, r5
 8002002:	eb49 0106 	adc.w	r1, r9, r6
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	461d      	mov	r5, r3
 800200c:	f04f 0600 	mov.w	r6, #0
 8002010:	196b      	adds	r3, r5, r5
 8002012:	eb46 0406 	adc.w	r4, r6, r6
 8002016:	461a      	mov	r2, r3
 8002018:	4623      	mov	r3, r4
 800201a:	f7fe f8e7 	bl	80001ec <__aeabi_uldivmod>
 800201e:	4603      	mov	r3, r0
 8002020:	460c      	mov	r4, r1
 8002022:	461a      	mov	r2, r3
 8002024:	4ba5      	ldr	r3, [pc, #660]	; (80022bc <UART_SetConfig+0x384>)
 8002026:	fba3 2302 	umull	r2, r3, r3, r2
 800202a:	095b      	lsrs	r3, r3, #5
 800202c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	461d      	mov	r5, r3
 8002034:	f04f 0600 	mov.w	r6, #0
 8002038:	46a9      	mov	r9, r5
 800203a:	46b2      	mov	sl, r6
 800203c:	eb19 0309 	adds.w	r3, r9, r9
 8002040:	eb4a 040a 	adc.w	r4, sl, sl
 8002044:	4699      	mov	r9, r3
 8002046:	46a2      	mov	sl, r4
 8002048:	eb19 0905 	adds.w	r9, r9, r5
 800204c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002050:	f04f 0100 	mov.w	r1, #0
 8002054:	f04f 0200 	mov.w	r2, #0
 8002058:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800205c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002060:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002064:	4689      	mov	r9, r1
 8002066:	4692      	mov	sl, r2
 8002068:	eb19 0005 	adds.w	r0, r9, r5
 800206c:	eb4a 0106 	adc.w	r1, sl, r6
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	461d      	mov	r5, r3
 8002076:	f04f 0600 	mov.w	r6, #0
 800207a:	196b      	adds	r3, r5, r5
 800207c:	eb46 0406 	adc.w	r4, r6, r6
 8002080:	461a      	mov	r2, r3
 8002082:	4623      	mov	r3, r4
 8002084:	f7fe f8b2 	bl	80001ec <__aeabi_uldivmod>
 8002088:	4603      	mov	r3, r0
 800208a:	460c      	mov	r4, r1
 800208c:	461a      	mov	r2, r3
 800208e:	4b8b      	ldr	r3, [pc, #556]	; (80022bc <UART_SetConfig+0x384>)
 8002090:	fba3 1302 	umull	r1, r3, r3, r2
 8002094:	095b      	lsrs	r3, r3, #5
 8002096:	2164      	movs	r1, #100	; 0x64
 8002098:	fb01 f303 	mul.w	r3, r1, r3
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	3332      	adds	r3, #50	; 0x32
 80020a2:	4a86      	ldr	r2, [pc, #536]	; (80022bc <UART_SetConfig+0x384>)
 80020a4:	fba2 2303 	umull	r2, r3, r2, r3
 80020a8:	095b      	lsrs	r3, r3, #5
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80020b0:	4498      	add	r8, r3
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	461d      	mov	r5, r3
 80020b6:	f04f 0600 	mov.w	r6, #0
 80020ba:	46a9      	mov	r9, r5
 80020bc:	46b2      	mov	sl, r6
 80020be:	eb19 0309 	adds.w	r3, r9, r9
 80020c2:	eb4a 040a 	adc.w	r4, sl, sl
 80020c6:	4699      	mov	r9, r3
 80020c8:	46a2      	mov	sl, r4
 80020ca:	eb19 0905 	adds.w	r9, r9, r5
 80020ce:	eb4a 0a06 	adc.w	sl, sl, r6
 80020d2:	f04f 0100 	mov.w	r1, #0
 80020d6:	f04f 0200 	mov.w	r2, #0
 80020da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80020e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80020e6:	4689      	mov	r9, r1
 80020e8:	4692      	mov	sl, r2
 80020ea:	eb19 0005 	adds.w	r0, r9, r5
 80020ee:	eb4a 0106 	adc.w	r1, sl, r6
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	461d      	mov	r5, r3
 80020f8:	f04f 0600 	mov.w	r6, #0
 80020fc:	196b      	adds	r3, r5, r5
 80020fe:	eb46 0406 	adc.w	r4, r6, r6
 8002102:	461a      	mov	r2, r3
 8002104:	4623      	mov	r3, r4
 8002106:	f7fe f871 	bl	80001ec <__aeabi_uldivmod>
 800210a:	4603      	mov	r3, r0
 800210c:	460c      	mov	r4, r1
 800210e:	461a      	mov	r2, r3
 8002110:	4b6a      	ldr	r3, [pc, #424]	; (80022bc <UART_SetConfig+0x384>)
 8002112:	fba3 1302 	umull	r1, r3, r3, r2
 8002116:	095b      	lsrs	r3, r3, #5
 8002118:	2164      	movs	r1, #100	; 0x64
 800211a:	fb01 f303 	mul.w	r3, r1, r3
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	3332      	adds	r3, #50	; 0x32
 8002124:	4a65      	ldr	r2, [pc, #404]	; (80022bc <UART_SetConfig+0x384>)
 8002126:	fba2 2303 	umull	r2, r3, r2, r3
 800212a:	095b      	lsrs	r3, r3, #5
 800212c:	f003 0207 	and.w	r2, r3, #7
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4442      	add	r2, r8
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	e26f      	b.n	800261a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800213a:	f7ff fe87 	bl	8001e4c <HAL_RCC_GetPCLK1Freq>
 800213e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	461d      	mov	r5, r3
 8002144:	f04f 0600 	mov.w	r6, #0
 8002148:	46a8      	mov	r8, r5
 800214a:	46b1      	mov	r9, r6
 800214c:	eb18 0308 	adds.w	r3, r8, r8
 8002150:	eb49 0409 	adc.w	r4, r9, r9
 8002154:	4698      	mov	r8, r3
 8002156:	46a1      	mov	r9, r4
 8002158:	eb18 0805 	adds.w	r8, r8, r5
 800215c:	eb49 0906 	adc.w	r9, r9, r6
 8002160:	f04f 0100 	mov.w	r1, #0
 8002164:	f04f 0200 	mov.w	r2, #0
 8002168:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800216c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002170:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002174:	4688      	mov	r8, r1
 8002176:	4691      	mov	r9, r2
 8002178:	eb18 0005 	adds.w	r0, r8, r5
 800217c:	eb49 0106 	adc.w	r1, r9, r6
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	461d      	mov	r5, r3
 8002186:	f04f 0600 	mov.w	r6, #0
 800218a:	196b      	adds	r3, r5, r5
 800218c:	eb46 0406 	adc.w	r4, r6, r6
 8002190:	461a      	mov	r2, r3
 8002192:	4623      	mov	r3, r4
 8002194:	f7fe f82a 	bl	80001ec <__aeabi_uldivmod>
 8002198:	4603      	mov	r3, r0
 800219a:	460c      	mov	r4, r1
 800219c:	461a      	mov	r2, r3
 800219e:	4b47      	ldr	r3, [pc, #284]	; (80022bc <UART_SetConfig+0x384>)
 80021a0:	fba3 2302 	umull	r2, r3, r3, r2
 80021a4:	095b      	lsrs	r3, r3, #5
 80021a6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	461d      	mov	r5, r3
 80021ae:	f04f 0600 	mov.w	r6, #0
 80021b2:	46a9      	mov	r9, r5
 80021b4:	46b2      	mov	sl, r6
 80021b6:	eb19 0309 	adds.w	r3, r9, r9
 80021ba:	eb4a 040a 	adc.w	r4, sl, sl
 80021be:	4699      	mov	r9, r3
 80021c0:	46a2      	mov	sl, r4
 80021c2:	eb19 0905 	adds.w	r9, r9, r5
 80021c6:	eb4a 0a06 	adc.w	sl, sl, r6
 80021ca:	f04f 0100 	mov.w	r1, #0
 80021ce:	f04f 0200 	mov.w	r2, #0
 80021d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021d6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80021da:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80021de:	4689      	mov	r9, r1
 80021e0:	4692      	mov	sl, r2
 80021e2:	eb19 0005 	adds.w	r0, r9, r5
 80021e6:	eb4a 0106 	adc.w	r1, sl, r6
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	461d      	mov	r5, r3
 80021f0:	f04f 0600 	mov.w	r6, #0
 80021f4:	196b      	adds	r3, r5, r5
 80021f6:	eb46 0406 	adc.w	r4, r6, r6
 80021fa:	461a      	mov	r2, r3
 80021fc:	4623      	mov	r3, r4
 80021fe:	f7fd fff5 	bl	80001ec <__aeabi_uldivmod>
 8002202:	4603      	mov	r3, r0
 8002204:	460c      	mov	r4, r1
 8002206:	461a      	mov	r2, r3
 8002208:	4b2c      	ldr	r3, [pc, #176]	; (80022bc <UART_SetConfig+0x384>)
 800220a:	fba3 1302 	umull	r1, r3, r3, r2
 800220e:	095b      	lsrs	r3, r3, #5
 8002210:	2164      	movs	r1, #100	; 0x64
 8002212:	fb01 f303 	mul.w	r3, r1, r3
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	3332      	adds	r3, #50	; 0x32
 800221c:	4a27      	ldr	r2, [pc, #156]	; (80022bc <UART_SetConfig+0x384>)
 800221e:	fba2 2303 	umull	r2, r3, r2, r3
 8002222:	095b      	lsrs	r3, r3, #5
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800222a:	4498      	add	r8, r3
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	461d      	mov	r5, r3
 8002230:	f04f 0600 	mov.w	r6, #0
 8002234:	46a9      	mov	r9, r5
 8002236:	46b2      	mov	sl, r6
 8002238:	eb19 0309 	adds.w	r3, r9, r9
 800223c:	eb4a 040a 	adc.w	r4, sl, sl
 8002240:	4699      	mov	r9, r3
 8002242:	46a2      	mov	sl, r4
 8002244:	eb19 0905 	adds.w	r9, r9, r5
 8002248:	eb4a 0a06 	adc.w	sl, sl, r6
 800224c:	f04f 0100 	mov.w	r1, #0
 8002250:	f04f 0200 	mov.w	r2, #0
 8002254:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002258:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800225c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002260:	4689      	mov	r9, r1
 8002262:	4692      	mov	sl, r2
 8002264:	eb19 0005 	adds.w	r0, r9, r5
 8002268:	eb4a 0106 	adc.w	r1, sl, r6
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	461d      	mov	r5, r3
 8002272:	f04f 0600 	mov.w	r6, #0
 8002276:	196b      	adds	r3, r5, r5
 8002278:	eb46 0406 	adc.w	r4, r6, r6
 800227c:	461a      	mov	r2, r3
 800227e:	4623      	mov	r3, r4
 8002280:	f7fd ffb4 	bl	80001ec <__aeabi_uldivmod>
 8002284:	4603      	mov	r3, r0
 8002286:	460c      	mov	r4, r1
 8002288:	461a      	mov	r2, r3
 800228a:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <UART_SetConfig+0x384>)
 800228c:	fba3 1302 	umull	r1, r3, r3, r2
 8002290:	095b      	lsrs	r3, r3, #5
 8002292:	2164      	movs	r1, #100	; 0x64
 8002294:	fb01 f303 	mul.w	r3, r1, r3
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	3332      	adds	r3, #50	; 0x32
 800229e:	4a07      	ldr	r2, [pc, #28]	; (80022bc <UART_SetConfig+0x384>)
 80022a0:	fba2 2303 	umull	r2, r3, r2, r3
 80022a4:	095b      	lsrs	r3, r3, #5
 80022a6:	f003 0207 	and.w	r2, r3, #7
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4442      	add	r2, r8
 80022b0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80022b2:	e1b2      	b.n	800261a <UART_SetConfig+0x6e2>
 80022b4:	40011000 	.word	0x40011000
 80022b8:	40011400 	.word	0x40011400
 80022bc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4ad7      	ldr	r2, [pc, #860]	; (8002624 <UART_SetConfig+0x6ec>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d005      	beq.n	80022d6 <UART_SetConfig+0x39e>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4ad6      	ldr	r2, [pc, #856]	; (8002628 <UART_SetConfig+0x6f0>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	f040 80d1 	bne.w	8002478 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80022d6:	f7ff fdcd 	bl	8001e74 <HAL_RCC_GetPCLK2Freq>
 80022da:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	469a      	mov	sl, r3
 80022e0:	f04f 0b00 	mov.w	fp, #0
 80022e4:	46d0      	mov	r8, sl
 80022e6:	46d9      	mov	r9, fp
 80022e8:	eb18 0308 	adds.w	r3, r8, r8
 80022ec:	eb49 0409 	adc.w	r4, r9, r9
 80022f0:	4698      	mov	r8, r3
 80022f2:	46a1      	mov	r9, r4
 80022f4:	eb18 080a 	adds.w	r8, r8, sl
 80022f8:	eb49 090b 	adc.w	r9, r9, fp
 80022fc:	f04f 0100 	mov.w	r1, #0
 8002300:	f04f 0200 	mov.w	r2, #0
 8002304:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002308:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800230c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002310:	4688      	mov	r8, r1
 8002312:	4691      	mov	r9, r2
 8002314:	eb1a 0508 	adds.w	r5, sl, r8
 8002318:	eb4b 0609 	adc.w	r6, fp, r9
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	4619      	mov	r1, r3
 8002322:	f04f 0200 	mov.w	r2, #0
 8002326:	f04f 0300 	mov.w	r3, #0
 800232a:	f04f 0400 	mov.w	r4, #0
 800232e:	0094      	lsls	r4, r2, #2
 8002330:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002334:	008b      	lsls	r3, r1, #2
 8002336:	461a      	mov	r2, r3
 8002338:	4623      	mov	r3, r4
 800233a:	4628      	mov	r0, r5
 800233c:	4631      	mov	r1, r6
 800233e:	f7fd ff55 	bl	80001ec <__aeabi_uldivmod>
 8002342:	4603      	mov	r3, r0
 8002344:	460c      	mov	r4, r1
 8002346:	461a      	mov	r2, r3
 8002348:	4bb8      	ldr	r3, [pc, #736]	; (800262c <UART_SetConfig+0x6f4>)
 800234a:	fba3 2302 	umull	r2, r3, r3, r2
 800234e:	095b      	lsrs	r3, r3, #5
 8002350:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	469b      	mov	fp, r3
 8002358:	f04f 0c00 	mov.w	ip, #0
 800235c:	46d9      	mov	r9, fp
 800235e:	46e2      	mov	sl, ip
 8002360:	eb19 0309 	adds.w	r3, r9, r9
 8002364:	eb4a 040a 	adc.w	r4, sl, sl
 8002368:	4699      	mov	r9, r3
 800236a:	46a2      	mov	sl, r4
 800236c:	eb19 090b 	adds.w	r9, r9, fp
 8002370:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002374:	f04f 0100 	mov.w	r1, #0
 8002378:	f04f 0200 	mov.w	r2, #0
 800237c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002380:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002384:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002388:	4689      	mov	r9, r1
 800238a:	4692      	mov	sl, r2
 800238c:	eb1b 0509 	adds.w	r5, fp, r9
 8002390:	eb4c 060a 	adc.w	r6, ip, sl
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	4619      	mov	r1, r3
 800239a:	f04f 0200 	mov.w	r2, #0
 800239e:	f04f 0300 	mov.w	r3, #0
 80023a2:	f04f 0400 	mov.w	r4, #0
 80023a6:	0094      	lsls	r4, r2, #2
 80023a8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80023ac:	008b      	lsls	r3, r1, #2
 80023ae:	461a      	mov	r2, r3
 80023b0:	4623      	mov	r3, r4
 80023b2:	4628      	mov	r0, r5
 80023b4:	4631      	mov	r1, r6
 80023b6:	f7fd ff19 	bl	80001ec <__aeabi_uldivmod>
 80023ba:	4603      	mov	r3, r0
 80023bc:	460c      	mov	r4, r1
 80023be:	461a      	mov	r2, r3
 80023c0:	4b9a      	ldr	r3, [pc, #616]	; (800262c <UART_SetConfig+0x6f4>)
 80023c2:	fba3 1302 	umull	r1, r3, r3, r2
 80023c6:	095b      	lsrs	r3, r3, #5
 80023c8:	2164      	movs	r1, #100	; 0x64
 80023ca:	fb01 f303 	mul.w	r3, r1, r3
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	011b      	lsls	r3, r3, #4
 80023d2:	3332      	adds	r3, #50	; 0x32
 80023d4:	4a95      	ldr	r2, [pc, #596]	; (800262c <UART_SetConfig+0x6f4>)
 80023d6:	fba2 2303 	umull	r2, r3, r2, r3
 80023da:	095b      	lsrs	r3, r3, #5
 80023dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023e0:	4498      	add	r8, r3
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	469b      	mov	fp, r3
 80023e6:	f04f 0c00 	mov.w	ip, #0
 80023ea:	46d9      	mov	r9, fp
 80023ec:	46e2      	mov	sl, ip
 80023ee:	eb19 0309 	adds.w	r3, r9, r9
 80023f2:	eb4a 040a 	adc.w	r4, sl, sl
 80023f6:	4699      	mov	r9, r3
 80023f8:	46a2      	mov	sl, r4
 80023fa:	eb19 090b 	adds.w	r9, r9, fp
 80023fe:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002402:	f04f 0100 	mov.w	r1, #0
 8002406:	f04f 0200 	mov.w	r2, #0
 800240a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800240e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002412:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002416:	4689      	mov	r9, r1
 8002418:	4692      	mov	sl, r2
 800241a:	eb1b 0509 	adds.w	r5, fp, r9
 800241e:	eb4c 060a 	adc.w	r6, ip, sl
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	4619      	mov	r1, r3
 8002428:	f04f 0200 	mov.w	r2, #0
 800242c:	f04f 0300 	mov.w	r3, #0
 8002430:	f04f 0400 	mov.w	r4, #0
 8002434:	0094      	lsls	r4, r2, #2
 8002436:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800243a:	008b      	lsls	r3, r1, #2
 800243c:	461a      	mov	r2, r3
 800243e:	4623      	mov	r3, r4
 8002440:	4628      	mov	r0, r5
 8002442:	4631      	mov	r1, r6
 8002444:	f7fd fed2 	bl	80001ec <__aeabi_uldivmod>
 8002448:	4603      	mov	r3, r0
 800244a:	460c      	mov	r4, r1
 800244c:	461a      	mov	r2, r3
 800244e:	4b77      	ldr	r3, [pc, #476]	; (800262c <UART_SetConfig+0x6f4>)
 8002450:	fba3 1302 	umull	r1, r3, r3, r2
 8002454:	095b      	lsrs	r3, r3, #5
 8002456:	2164      	movs	r1, #100	; 0x64
 8002458:	fb01 f303 	mul.w	r3, r1, r3
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	011b      	lsls	r3, r3, #4
 8002460:	3332      	adds	r3, #50	; 0x32
 8002462:	4a72      	ldr	r2, [pc, #456]	; (800262c <UART_SetConfig+0x6f4>)
 8002464:	fba2 2303 	umull	r2, r3, r2, r3
 8002468:	095b      	lsrs	r3, r3, #5
 800246a:	f003 020f 	and.w	r2, r3, #15
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4442      	add	r2, r8
 8002474:	609a      	str	r2, [r3, #8]
 8002476:	e0d0      	b.n	800261a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002478:	f7ff fce8 	bl	8001e4c <HAL_RCC_GetPCLK1Freq>
 800247c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	469a      	mov	sl, r3
 8002482:	f04f 0b00 	mov.w	fp, #0
 8002486:	46d0      	mov	r8, sl
 8002488:	46d9      	mov	r9, fp
 800248a:	eb18 0308 	adds.w	r3, r8, r8
 800248e:	eb49 0409 	adc.w	r4, r9, r9
 8002492:	4698      	mov	r8, r3
 8002494:	46a1      	mov	r9, r4
 8002496:	eb18 080a 	adds.w	r8, r8, sl
 800249a:	eb49 090b 	adc.w	r9, r9, fp
 800249e:	f04f 0100 	mov.w	r1, #0
 80024a2:	f04f 0200 	mov.w	r2, #0
 80024a6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80024aa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80024ae:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80024b2:	4688      	mov	r8, r1
 80024b4:	4691      	mov	r9, r2
 80024b6:	eb1a 0508 	adds.w	r5, sl, r8
 80024ba:	eb4b 0609 	adc.w	r6, fp, r9
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	4619      	mov	r1, r3
 80024c4:	f04f 0200 	mov.w	r2, #0
 80024c8:	f04f 0300 	mov.w	r3, #0
 80024cc:	f04f 0400 	mov.w	r4, #0
 80024d0:	0094      	lsls	r4, r2, #2
 80024d2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80024d6:	008b      	lsls	r3, r1, #2
 80024d8:	461a      	mov	r2, r3
 80024da:	4623      	mov	r3, r4
 80024dc:	4628      	mov	r0, r5
 80024de:	4631      	mov	r1, r6
 80024e0:	f7fd fe84 	bl	80001ec <__aeabi_uldivmod>
 80024e4:	4603      	mov	r3, r0
 80024e6:	460c      	mov	r4, r1
 80024e8:	461a      	mov	r2, r3
 80024ea:	4b50      	ldr	r3, [pc, #320]	; (800262c <UART_SetConfig+0x6f4>)
 80024ec:	fba3 2302 	umull	r2, r3, r3, r2
 80024f0:	095b      	lsrs	r3, r3, #5
 80024f2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	469b      	mov	fp, r3
 80024fa:	f04f 0c00 	mov.w	ip, #0
 80024fe:	46d9      	mov	r9, fp
 8002500:	46e2      	mov	sl, ip
 8002502:	eb19 0309 	adds.w	r3, r9, r9
 8002506:	eb4a 040a 	adc.w	r4, sl, sl
 800250a:	4699      	mov	r9, r3
 800250c:	46a2      	mov	sl, r4
 800250e:	eb19 090b 	adds.w	r9, r9, fp
 8002512:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002516:	f04f 0100 	mov.w	r1, #0
 800251a:	f04f 0200 	mov.w	r2, #0
 800251e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002522:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002526:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800252a:	4689      	mov	r9, r1
 800252c:	4692      	mov	sl, r2
 800252e:	eb1b 0509 	adds.w	r5, fp, r9
 8002532:	eb4c 060a 	adc.w	r6, ip, sl
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	4619      	mov	r1, r3
 800253c:	f04f 0200 	mov.w	r2, #0
 8002540:	f04f 0300 	mov.w	r3, #0
 8002544:	f04f 0400 	mov.w	r4, #0
 8002548:	0094      	lsls	r4, r2, #2
 800254a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800254e:	008b      	lsls	r3, r1, #2
 8002550:	461a      	mov	r2, r3
 8002552:	4623      	mov	r3, r4
 8002554:	4628      	mov	r0, r5
 8002556:	4631      	mov	r1, r6
 8002558:	f7fd fe48 	bl	80001ec <__aeabi_uldivmod>
 800255c:	4603      	mov	r3, r0
 800255e:	460c      	mov	r4, r1
 8002560:	461a      	mov	r2, r3
 8002562:	4b32      	ldr	r3, [pc, #200]	; (800262c <UART_SetConfig+0x6f4>)
 8002564:	fba3 1302 	umull	r1, r3, r3, r2
 8002568:	095b      	lsrs	r3, r3, #5
 800256a:	2164      	movs	r1, #100	; 0x64
 800256c:	fb01 f303 	mul.w	r3, r1, r3
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	011b      	lsls	r3, r3, #4
 8002574:	3332      	adds	r3, #50	; 0x32
 8002576:	4a2d      	ldr	r2, [pc, #180]	; (800262c <UART_SetConfig+0x6f4>)
 8002578:	fba2 2303 	umull	r2, r3, r2, r3
 800257c:	095b      	lsrs	r3, r3, #5
 800257e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002582:	4498      	add	r8, r3
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	469b      	mov	fp, r3
 8002588:	f04f 0c00 	mov.w	ip, #0
 800258c:	46d9      	mov	r9, fp
 800258e:	46e2      	mov	sl, ip
 8002590:	eb19 0309 	adds.w	r3, r9, r9
 8002594:	eb4a 040a 	adc.w	r4, sl, sl
 8002598:	4699      	mov	r9, r3
 800259a:	46a2      	mov	sl, r4
 800259c:	eb19 090b 	adds.w	r9, r9, fp
 80025a0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80025a4:	f04f 0100 	mov.w	r1, #0
 80025a8:	f04f 0200 	mov.w	r2, #0
 80025ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80025b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80025b8:	4689      	mov	r9, r1
 80025ba:	4692      	mov	sl, r2
 80025bc:	eb1b 0509 	adds.w	r5, fp, r9
 80025c0:	eb4c 060a 	adc.w	r6, ip, sl
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	4619      	mov	r1, r3
 80025ca:	f04f 0200 	mov.w	r2, #0
 80025ce:	f04f 0300 	mov.w	r3, #0
 80025d2:	f04f 0400 	mov.w	r4, #0
 80025d6:	0094      	lsls	r4, r2, #2
 80025d8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80025dc:	008b      	lsls	r3, r1, #2
 80025de:	461a      	mov	r2, r3
 80025e0:	4623      	mov	r3, r4
 80025e2:	4628      	mov	r0, r5
 80025e4:	4631      	mov	r1, r6
 80025e6:	f7fd fe01 	bl	80001ec <__aeabi_uldivmod>
 80025ea:	4603      	mov	r3, r0
 80025ec:	460c      	mov	r4, r1
 80025ee:	461a      	mov	r2, r3
 80025f0:	4b0e      	ldr	r3, [pc, #56]	; (800262c <UART_SetConfig+0x6f4>)
 80025f2:	fba3 1302 	umull	r1, r3, r3, r2
 80025f6:	095b      	lsrs	r3, r3, #5
 80025f8:	2164      	movs	r1, #100	; 0x64
 80025fa:	fb01 f303 	mul.w	r3, r1, r3
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	011b      	lsls	r3, r3, #4
 8002602:	3332      	adds	r3, #50	; 0x32
 8002604:	4a09      	ldr	r2, [pc, #36]	; (800262c <UART_SetConfig+0x6f4>)
 8002606:	fba2 2303 	umull	r2, r3, r2, r3
 800260a:	095b      	lsrs	r3, r3, #5
 800260c:	f003 020f 	and.w	r2, r3, #15
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4442      	add	r2, r8
 8002616:	609a      	str	r2, [r3, #8]
}
 8002618:	e7ff      	b.n	800261a <UART_SetConfig+0x6e2>
 800261a:	bf00      	nop
 800261c:	3714      	adds	r7, #20
 800261e:	46bd      	mov	sp, r7
 8002620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002624:	40011000 	.word	0x40011000
 8002628:	40011400 	.word	0x40011400
 800262c:	51eb851f 	.word	0x51eb851f

08002630 <__libc_init_array>:
 8002630:	b570      	push	{r4, r5, r6, lr}
 8002632:	4e0d      	ldr	r6, [pc, #52]	; (8002668 <__libc_init_array+0x38>)
 8002634:	4c0d      	ldr	r4, [pc, #52]	; (800266c <__libc_init_array+0x3c>)
 8002636:	1ba4      	subs	r4, r4, r6
 8002638:	10a4      	asrs	r4, r4, #2
 800263a:	2500      	movs	r5, #0
 800263c:	42a5      	cmp	r5, r4
 800263e:	d109      	bne.n	8002654 <__libc_init_array+0x24>
 8002640:	4e0b      	ldr	r6, [pc, #44]	; (8002670 <__libc_init_array+0x40>)
 8002642:	4c0c      	ldr	r4, [pc, #48]	; (8002674 <__libc_init_array+0x44>)
 8002644:	f000 f820 	bl	8002688 <_init>
 8002648:	1ba4      	subs	r4, r4, r6
 800264a:	10a4      	asrs	r4, r4, #2
 800264c:	2500      	movs	r5, #0
 800264e:	42a5      	cmp	r5, r4
 8002650:	d105      	bne.n	800265e <__libc_init_array+0x2e>
 8002652:	bd70      	pop	{r4, r5, r6, pc}
 8002654:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002658:	4798      	blx	r3
 800265a:	3501      	adds	r5, #1
 800265c:	e7ee      	b.n	800263c <__libc_init_array+0xc>
 800265e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002662:	4798      	blx	r3
 8002664:	3501      	adds	r5, #1
 8002666:	e7f2      	b.n	800264e <__libc_init_array+0x1e>
 8002668:	080026c8 	.word	0x080026c8
 800266c:	080026c8 	.word	0x080026c8
 8002670:	080026c8 	.word	0x080026c8
 8002674:	080026cc 	.word	0x080026cc

08002678 <memset>:
 8002678:	4402      	add	r2, r0
 800267a:	4603      	mov	r3, r0
 800267c:	4293      	cmp	r3, r2
 800267e:	d100      	bne.n	8002682 <memset+0xa>
 8002680:	4770      	bx	lr
 8002682:	f803 1b01 	strb.w	r1, [r3], #1
 8002686:	e7f9      	b.n	800267c <memset+0x4>

08002688 <_init>:
 8002688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800268a:	bf00      	nop
 800268c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800268e:	bc08      	pop	{r3}
 8002690:	469e      	mov	lr, r3
 8002692:	4770      	bx	lr

08002694 <_fini>:
 8002694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002696:	bf00      	nop
 8002698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800269a:	bc08      	pop	{r3}
 800269c:	469e      	mov	lr, r3
 800269e:	4770      	bx	lr
