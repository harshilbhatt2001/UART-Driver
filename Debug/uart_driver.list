
uart_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047a8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08004958  08004958  00014958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a30  08004a30  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004a30  08004a30  00014a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a38  08004a38  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a38  08004a38  00014a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a3c  08004a3c  00014a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004a40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000070  08004ab0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08004ab0  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d448  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002140  00000000  00000000  0002d4e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d08  00000000  00000000  0002f628  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000be0  00000000  00000000  00030330  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024566  00000000  00000000  00030f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ab79  00000000  00000000  00055476  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d724a  00000000  00000000  0005ffef  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00137239  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c48  00000000  00000000  001372b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004940 	.word	0x08004940

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08004940 	.word	0x08004940

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000596:	2300      	movs	r3, #0
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <MX_DMA_Init+0x3c>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	4a0b      	ldr	r2, [pc, #44]	; (80005cc <MX_DMA_Init+0x3c>)
 80005a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005a4:	6313      	str	r3, [r2, #48]	; 0x30
 80005a6:	4b09      	ldr	r3, [pc, #36]	; (80005cc <MX_DMA_Init+0x3c>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2100      	movs	r1, #0
 80005b6:	200c      	movs	r0, #12
 80005b8:	f000 fdad 	bl	8001116 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80005bc:	200c      	movs	r0, #12
 80005be:	f000 fdc6 	bl	800114e <HAL_NVIC_EnableIRQ>

}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40023800 	.word	0x40023800

080005d0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	4b10      	ldr	r3, [pc, #64]	; (800061c <MX_GPIO_Init+0x4c>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	4a0f      	ldr	r2, [pc, #60]	; (800061c <MX_GPIO_Init+0x4c>)
 80005e0:	f043 0310 	orr.w	r3, r3, #16
 80005e4:	6313      	str	r3, [r2, #48]	; 0x30
 80005e6:	4b0d      	ldr	r3, [pc, #52]	; (800061c <MX_GPIO_Init+0x4c>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f003 0310 	and.w	r3, r3, #16
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	603b      	str	r3, [r7, #0]
 80005f6:	4b09      	ldr	r3, [pc, #36]	; (800061c <MX_GPIO_Init+0x4c>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	4a08      	ldr	r2, [pc, #32]	; (800061c <MX_GPIO_Init+0x4c>)
 80005fc:	f043 0302 	orr.w	r3, r3, #2
 8000600:	6313      	str	r3, [r2, #48]	; 0x30
 8000602:	4b06      	ldr	r3, [pc, #24]	; (800061c <MX_GPIO_Init+0x4c>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	f003 0302 	and.w	r3, r3, #2
 800060a:	603b      	str	r3, [r7, #0]
 800060c:	683b      	ldr	r3, [r7, #0]

}
 800060e:	bf00      	nop
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	40023800 	.word	0x40023800

08000620 <createQueue>:
	unsigned capacity;
	int* array;
};

struct Queue* createQueue(unsigned capacity)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]

    struct Queue* rxBuffer = (struct Queue*)malloc(
 8000628:	2014      	movs	r0, #20
 800062a:	f003 fa95 	bl	8003b58 <malloc>
 800062e:	4603      	mov	r3, r0
 8000630:	60fb      	str	r3, [r7, #12]
        sizeof(struct Queue));
    rxBuffer->capacity = capacity;
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	687a      	ldr	r2, [r7, #4]
 8000636:	60da      	str	r2, [r3, #12]
    rxBuffer->front = rxBuffer->size = 0;
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	689a      	ldr	r2, [r3, #8]
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	601a      	str	r2, [r3, #0]
      rxBuffer->rear = capacity - 1;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	3b01      	subs	r3, #1
 800064a:	461a      	mov	r2, r3
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	605a      	str	r2, [r3, #4]
    rxBuffer->array = (int*)malloc(
        rxBuffer->capacity * sizeof(int));
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	68db      	ldr	r3, [r3, #12]
    rxBuffer->array = (int*)malloc(
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	4618      	mov	r0, r3
 8000658:	f003 fa7e 	bl	8003b58 <malloc>
 800065c:	4603      	mov	r3, r0
 800065e:	461a      	mov	r2, r3
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	611a      	str	r2, [r3, #16]
    return rxBuffer;
 8000664:	68fb      	ldr	r3, [r7, #12]
}
 8000666:	4618      	mov	r0, r3
 8000668:	3710      	adds	r7, #16
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}

0800066e <isEmpty>:
{
    return (rxBuffer->size == rxBuffer->capacity);
}

int isEmpty(struct Queue* rxBuffer)
{
 800066e:	b480      	push	{r7}
 8000670:	b083      	sub	sp, #12
 8000672:	af00      	add	r7, sp, #0
 8000674:	6078      	str	r0, [r7, #4]
    return (rxBuffer->size == 0);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	689b      	ldr	r3, [r3, #8]
 800067a:	2b00      	cmp	r3, #0
 800067c:	bf0c      	ite	eq
 800067e:	2301      	moveq	r3, #1
 8000680:	2300      	movne	r3, #0
 8000682:	b2db      	uxtb	r3, r3
}
 8000684:	4618      	mov	r0, r3
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr

08000690 <dequeue>:
    rxBuffer->array[rxBuffer->rear] = item;
    rxBuffer->size = rxBuffer->size + 1;
}

int dequeue(struct Queue* rxBuffer)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
    if (isEmpty(rxBuffer))
 8000698:	6878      	ldr	r0, [r7, #4]
 800069a:	f7ff ffe8 	bl	800066e <isEmpty>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d002      	beq.n	80006aa <dequeue+0x1a>
        return -1;
 80006a4:	f04f 33ff 	mov.w	r3, #4294967295
 80006a8:	e01b      	b.n	80006e2 <dequeue+0x52>
    int item = rxBuffer->array[rxBuffer->front];
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	691a      	ldr	r2, [r3, #16]
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	009b      	lsls	r3, r3, #2
 80006b4:	4413      	add	r3, r2
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	60fb      	str	r3, [r7, #12]
    rxBuffer->front = (rxBuffer->front + 1)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	3301      	adds	r3, #1
 80006c0:	461a      	mov	r2, r3
                   % rxBuffer->capacity;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	68db      	ldr	r3, [r3, #12]
 80006c6:	fbb2 f1f3 	udiv	r1, r2, r3
 80006ca:	fb03 f301 	mul.w	r3, r3, r1
 80006ce:	1ad3      	subs	r3, r2, r3
 80006d0:	461a      	mov	r2, r3
    rxBuffer->front = (rxBuffer->front + 1)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	601a      	str	r2, [r3, #0]
    rxBuffer->size = rxBuffer->size - 1;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	689b      	ldr	r3, [r3, #8]
 80006da:	1e5a      	subs	r2, r3, #1
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	609a      	str	r2, [r3, #8]
    return item;
 80006e0:	68fb      	ldr	r3, [r7, #12]
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3710      	adds	r7, #16
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
	...

080006ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  rxBuffer = createQueue(25);
 80006f0:	2019      	movs	r0, #25
 80006f2:	f7ff ff95 	bl	8000620 <createQueue>
 80006f6:	4602      	mov	r2, r0
 80006f8:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <main+0x3c>)
 80006fa:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006fc:	f000 fbbe 	bl	8000e7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000700:	f000 f816 	bl	8000730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000704:	f7ff ff64 	bl	80005d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000708:	f7ff ff42 	bl	8000590 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800070c:	f000 fae8 	bl	8000ce0 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000710:	f000 f9ea 	bl	8000ae8 <MX_TIM1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_UART_Receive_DMA(&huart3, (uint8_t *)rxBuffer->array, 1);
 8000714:	4b04      	ldr	r3, [pc, #16]	; (8000728 <main+0x3c>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	691b      	ldr	r3, [r3, #16]
 800071a:	2201      	movs	r2, #1
 800071c:	4619      	mov	r1, r3
 800071e:	4803      	ldr	r0, [pc, #12]	; (800072c <main+0x40>)
 8000720:	f002 fcd4 	bl	80030cc <HAL_UART_Receive_DMA>
 8000724:	e7f6      	b.n	8000714 <main+0x28>
 8000726:	bf00      	nop
 8000728:	20000098 	.word	0x20000098
 800072c:	2000013c 	.word	0x2000013c

08000730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b094      	sub	sp, #80	; 0x50
 8000734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000736:	f107 0320 	add.w	r3, r7, #32
 800073a:	2230      	movs	r2, #48	; 0x30
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f003 fa12 	bl	8003b68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000754:	2300      	movs	r3, #0
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	4b23      	ldr	r3, [pc, #140]	; (80007e8 <SystemClock_Config+0xb8>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075c:	4a22      	ldr	r2, [pc, #136]	; (80007e8 <SystemClock_Config+0xb8>)
 800075e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000762:	6413      	str	r3, [r2, #64]	; 0x40
 8000764:	4b20      	ldr	r3, [pc, #128]	; (80007e8 <SystemClock_Config+0xb8>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000770:	2300      	movs	r3, #0
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	4b1d      	ldr	r3, [pc, #116]	; (80007ec <SystemClock_Config+0xbc>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800077c:	4a1b      	ldr	r2, [pc, #108]	; (80007ec <SystemClock_Config+0xbc>)
 800077e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000782:	6013      	str	r3, [r2, #0]
 8000784:	4b19      	ldr	r3, [pc, #100]	; (80007ec <SystemClock_Config+0xbc>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000790:	2302      	movs	r3, #2
 8000792:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000794:	2301      	movs	r3, #1
 8000796:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000798:	2310      	movs	r3, #16
 800079a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800079c:	2300      	movs	r3, #0
 800079e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a0:	f107 0320 	add.w	r3, r7, #32
 80007a4:	4618      	mov	r0, r3
 80007a6:	f001 fa05 	bl	8001bb4 <HAL_RCC_OscConfig>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80007b0:	f000 f882 	bl	80008b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b4:	230f      	movs	r3, #15
 80007b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007b8:	2300      	movs	r3, #0
 80007ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007c8:	f107 030c 	add.w	r3, r7, #12
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f001 fc60 	bl	8002094 <HAL_RCC_ClockConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0xae>
  {
    Error_Handler();
 80007da:	f000 f86d 	bl	80008b8 <Error_Handler>
  }
}
 80007de:	bf00      	nop
 80007e0:	3750      	adds	r7, #80	; 0x50
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40007000 	.word	0x40007000

080007f0 <Check_Divisibility>:
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
	return ch;
}

void Check_Divisibility(int num)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	/* Number divisible by 4, Print "Rightbot"
	   * Number divisible by 7, Print "Labs"
	   * Number divisible by 4 and 7, Print "Rightbot Pvt Ltd"
	   * Number not divisible, Print Number
	   */
	if ((num & 3) ==0)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	f003 0303 	and.w	r3, r3, #3
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d114      	bne.n	800082c <Check_Divisibility+0x3c>
	  {
		  printf ("Rightbot ");
 8000802:	4817      	ldr	r0, [pc, #92]	; (8000860 <Check_Divisibility+0x70>)
 8000804:	f003 fa60 	bl	8003cc8 <iprintf>
		  if (num % 7 == 0)
 8000808:	687a      	ldr	r2, [r7, #4]
 800080a:	4b16      	ldr	r3, [pc, #88]	; (8000864 <Check_Divisibility+0x74>)
 800080c:	fb83 1302 	smull	r1, r3, r3, r2
 8000810:	4413      	add	r3, r2
 8000812:	1099      	asrs	r1, r3, #2
 8000814:	17d3      	asrs	r3, r2, #31
 8000816:	1ac9      	subs	r1, r1, r3
 8000818:	460b      	mov	r3, r1
 800081a:	00db      	lsls	r3, r3, #3
 800081c:	1a5b      	subs	r3, r3, r1
 800081e:	1ad1      	subs	r1, r2, r3
 8000820:	2900      	cmp	r1, #0
 8000822:	d119      	bne.n	8000858 <Check_Divisibility+0x68>
		  {
			  printf ("Pvt Ltd");
 8000824:	4810      	ldr	r0, [pc, #64]	; (8000868 <Check_Divisibility+0x78>)
 8000826:	f003 fa4f 	bl	8003cc8 <iprintf>
	  }
	  else
	  {
		  printf ("%d", num);
	  }
}
 800082a:	e015      	b.n	8000858 <Check_Divisibility+0x68>
	  else if (num % 7 == 0)
 800082c:	687a      	ldr	r2, [r7, #4]
 800082e:	4b0d      	ldr	r3, [pc, #52]	; (8000864 <Check_Divisibility+0x74>)
 8000830:	fb83 1302 	smull	r1, r3, r3, r2
 8000834:	4413      	add	r3, r2
 8000836:	1099      	asrs	r1, r3, #2
 8000838:	17d3      	asrs	r3, r2, #31
 800083a:	1ac9      	subs	r1, r1, r3
 800083c:	460b      	mov	r3, r1
 800083e:	00db      	lsls	r3, r3, #3
 8000840:	1a5b      	subs	r3, r3, r1
 8000842:	1ad1      	subs	r1, r2, r3
 8000844:	2900      	cmp	r1, #0
 8000846:	d103      	bne.n	8000850 <Check_Divisibility+0x60>
		  printf ("Labs");
 8000848:	4808      	ldr	r0, [pc, #32]	; (800086c <Check_Divisibility+0x7c>)
 800084a:	f003 fa3d 	bl	8003cc8 <iprintf>
}
 800084e:	e003      	b.n	8000858 <Check_Divisibility+0x68>
		  printf ("%d", num);
 8000850:	6879      	ldr	r1, [r7, #4]
 8000852:	4807      	ldr	r0, [pc, #28]	; (8000870 <Check_Divisibility+0x80>)
 8000854:	f003 fa38 	bl	8003cc8 <iprintf>
}
 8000858:	bf00      	nop
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	08004958 	.word	0x08004958
 8000864:	92492493 	.word	0x92492493
 8000868:	08004964 	.word	0x08004964
 800086c:	0800496c 	.word	0x0800496c
 8000870:	08004974 	.word	0x08004974

08000874 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
  // TODO:CHECK CMD MSG
  int num = dequeue(rxBuffer);
 800087c:	4b0d      	ldr	r3, [pc, #52]	; (80008b4 <HAL_UART_RxCpltCallback+0x40>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff ff05 	bl	8000690 <dequeue>
 8000886:	60f8      	str	r0, [r7, #12]
  if (num > 0 || num < 100)
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	2b00      	cmp	r3, #0
 800088c:	dc02      	bgt.n	8000894 <HAL_UART_RxCpltCallback+0x20>
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	2b63      	cmp	r3, #99	; 0x63
 8000892:	dc03      	bgt.n	800089c <HAL_UART_RxCpltCallback+0x28>
  {
	  Check_Divisibility(num);
 8000894:	68f8      	ldr	r0, [r7, #12]
 8000896:	f7ff ffab 	bl	80007f0 <Check_Divisibility>
 800089a:	e007      	b.n	80008ac <HAL_UART_RxCpltCallback+0x38>
  }
  else
  {
	  HAL_UART_Transmit_DMA(&huart, (uint8_t *)rxBuffer->array, 1);
 800089c:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <HAL_UART_RxCpltCallback+0x40>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	6919      	ldr	r1, [r3, #16]
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	2201      	movs	r2, #1
 80008a6:	4618      	mov	r0, r3
 80008a8:	f002 fba4 	bl	8002ff4 <HAL_UART_Transmit_DMA>
  }
}
 80008ac:	bf00      	nop
 80008ae:	3710      	adds	r7, #16
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20000098 	.word	0x20000098

080008b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
	...

080008c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	4b10      	ldr	r3, [pc, #64]	; (8000914 <HAL_MspInit+0x4c>)
 80008d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d6:	4a0f      	ldr	r2, [pc, #60]	; (8000914 <HAL_MspInit+0x4c>)
 80008d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008dc:	6453      	str	r3, [r2, #68]	; 0x44
 80008de:	4b0d      	ldr	r3, [pc, #52]	; (8000914 <HAL_MspInit+0x4c>)
 80008e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	603b      	str	r3, [r7, #0]
 80008ee:	4b09      	ldr	r3, [pc, #36]	; (8000914 <HAL_MspInit+0x4c>)
 80008f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f2:	4a08      	ldr	r2, [pc, #32]	; (8000914 <HAL_MspInit+0x4c>)
 80008f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f8:	6413      	str	r3, [r2, #64]	; 0x40
 80008fa:	4b06      	ldr	r3, [pc, #24]	; (8000914 <HAL_MspInit+0x4c>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000902:	603b      	str	r3, [r7, #0]
 8000904:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	40023800 	.word	0x40023800

08000918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr

08000926 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800092a:	e7fe      	b.n	800092a <HardFault_Handler+0x4>

0800092c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000930:	e7fe      	b.n	8000930 <MemManage_Handler+0x4>

08000932 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000936:	e7fe      	b.n	8000936 <BusFault_Handler+0x4>

08000938 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800093c:	e7fe      	b.n	800093c <UsageFault_Handler+0x4>

0800093e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr

0800095a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800095e:	bf00      	nop
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800096c:	f000 fad8 	bl	8000f20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}

08000974 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000978:	4802      	ldr	r0, [pc, #8]	; (8000984 <DMA1_Stream1_IRQHandler+0x10>)
 800097a:	f000 fd09 	bl	8001390 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	200000dc 	.word	0x200000dc

08000988 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af00      	add	r7, sp, #0
 800098e:	60f8      	str	r0, [r7, #12]
 8000990:	60b9      	str	r1, [r7, #8]
 8000992:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000994:	2300      	movs	r3, #0
 8000996:	617b      	str	r3, [r7, #20]
 8000998:	e00a      	b.n	80009b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800099a:	f3af 8000 	nop.w
 800099e:	4601      	mov	r1, r0
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	1c5a      	adds	r2, r3, #1
 80009a4:	60ba      	str	r2, [r7, #8]
 80009a6:	b2ca      	uxtb	r2, r1
 80009a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	3301      	adds	r3, #1
 80009ae:	617b      	str	r3, [r7, #20]
 80009b0:	697a      	ldr	r2, [r7, #20]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	dbf0      	blt.n	800099a <_read+0x12>
	}

return len;
 80009b8:	687b      	ldr	r3, [r7, #4]
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3718      	adds	r7, #24
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b086      	sub	sp, #24
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	60f8      	str	r0, [r7, #12]
 80009ca:	60b9      	str	r1, [r7, #8]
 80009cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ce:	2300      	movs	r3, #0
 80009d0:	617b      	str	r3, [r7, #20]
 80009d2:	e009      	b.n	80009e8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	1c5a      	adds	r2, r3, #1
 80009d8:	60ba      	str	r2, [r7, #8]
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	4618      	mov	r0, r3
 80009de:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	3301      	adds	r3, #1
 80009e6:	617b      	str	r3, [r7, #20]
 80009e8:	697a      	ldr	r2, [r7, #20]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	dbf1      	blt.n	80009d4 <_write+0x12>
	}
	return len;
 80009f0:	687b      	ldr	r3, [r7, #4]
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3718      	adds	r7, #24
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <_close>:

int _close(int file)
{
 80009fa:	b480      	push	{r7}
 80009fc:	b083      	sub	sp, #12
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
	return -1;
 8000a02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a12:	b480      	push	{r7}
 8000a14:	b083      	sub	sp, #12
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
 8000a1a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a22:	605a      	str	r2, [r3, #4]
	return 0;
 8000a24:	2300      	movs	r3, #0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <_isatty>:

int _isatty(int file)
{
 8000a32:	b480      	push	{r7}
 8000a34:	b083      	sub	sp, #12
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
	return 1;
 8000a3a:	2301      	movs	r3, #1
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b085      	sub	sp, #20
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	60f8      	str	r0, [r7, #12]
 8000a50:	60b9      	str	r1, [r7, #8]
 8000a52:	607a      	str	r2, [r7, #4]
	return 0;
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3714      	adds	r7, #20
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
	...

08000a64 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000a6c:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <_sbrk+0x50>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d102      	bne.n	8000a7a <_sbrk+0x16>
		heap_end = &end;
 8000a74:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <_sbrk+0x50>)
 8000a76:	4a10      	ldr	r2, [pc, #64]	; (8000ab8 <_sbrk+0x54>)
 8000a78:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <_sbrk+0x50>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <_sbrk+0x50>)
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4413      	add	r3, r2
 8000a88:	466a      	mov	r2, sp
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d907      	bls.n	8000a9e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000a8e:	f003 f839 	bl	8003b04 <__errno>
 8000a92:	4602      	mov	r2, r0
 8000a94:	230c      	movs	r3, #12
 8000a96:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000a98:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9c:	e006      	b.n	8000aac <_sbrk+0x48>
	}

	heap_end += incr;
 8000a9e:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <_sbrk+0x50>)
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	4a03      	ldr	r2, [pc, #12]	; (8000ab4 <_sbrk+0x50>)
 8000aa8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	2000008c 	.word	0x2000008c
 8000ab8:	20000188 	.word	0x20000188

08000abc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac0:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <SystemInit+0x28>)
 8000ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ac6:	4a07      	ldr	r2, [pc, #28]	; (8000ae4 <SystemInit+0x28>)
 8000ac8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000acc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ad0:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <SystemInit+0x28>)
 8000ad2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ad6:	609a      	str	r2, [r3, #8]
#endif
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b096      	sub	sp, #88	; 0x58
 8000aec:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000afc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]
 8000b12:	60da      	str	r2, [r3, #12]
 8000b14:	611a      	str	r2, [r3, #16]
 8000b16:	615a      	str	r2, [r3, #20]
 8000b18:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	2220      	movs	r2, #32
 8000b1e:	2100      	movs	r1, #0
 8000b20:	4618      	mov	r0, r3
 8000b22:	f003 f821 	bl	8003b68 <memset>

  htim1.Instance = TIM1;
 8000b26:	4b3e      	ldr	r3, [pc, #248]	; (8000c20 <MX_TIM1_Init+0x138>)
 8000b28:	4a3e      	ldr	r2, [pc, #248]	; (8000c24 <MX_TIM1_Init+0x13c>)
 8000b2a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16;
 8000b2c:	4b3c      	ldr	r3, [pc, #240]	; (8000c20 <MX_TIM1_Init+0x138>)
 8000b2e:	2210      	movs	r2, #16
 8000b30:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b32:	4b3b      	ldr	r3, [pc, #236]	; (8000c20 <MX_TIM1_Init+0x138>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8000b38:	4b39      	ldr	r3, [pc, #228]	; (8000c20 <MX_TIM1_Init+0x138>)
 8000b3a:	2264      	movs	r2, #100	; 0x64
 8000b3c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b3e:	4b38      	ldr	r3, [pc, #224]	; (8000c20 <MX_TIM1_Init+0x138>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b44:	4b36      	ldr	r3, [pc, #216]	; (8000c20 <MX_TIM1_Init+0x138>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b4a:	4b35      	ldr	r3, [pc, #212]	; (8000c20 <MX_TIM1_Init+0x138>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b50:	4833      	ldr	r0, [pc, #204]	; (8000c20 <MX_TIM1_Init+0x138>)
 8000b52:	f001 fc6b 	bl	800242c <HAL_TIM_Base_Init>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000b5c:	f7ff feac 	bl	80008b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b64:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b66:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	482c      	ldr	r0, [pc, #176]	; (8000c20 <MX_TIM1_Init+0x138>)
 8000b6e:	f001 fd83 	bl	8002678 <HAL_TIM_ConfigClockSource>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000b78:	f7ff fe9e 	bl	80008b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b7c:	4828      	ldr	r0, [pc, #160]	; (8000c20 <MX_TIM1_Init+0x138>)
 8000b7e:	f001 fc80 	bl	8002482 <HAL_TIM_PWM_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000b88:	f7ff fe96 	bl	80008b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b90:	2300      	movs	r3, #0
 8000b92:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b94:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4821      	ldr	r0, [pc, #132]	; (8000c20 <MX_TIM1_Init+0x138>)
 8000b9c:	f002 f90e 	bl	8002dbc <HAL_TIMEx_MasterConfigSynchronization>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000ba6:	f7ff fe87 	bl	80008b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000baa:	2360      	movs	r3, #96	; 0x60
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bca:	2200      	movs	r2, #0
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4814      	ldr	r0, [pc, #80]	; (8000c20 <MX_TIM1_Init+0x138>)
 8000bd0:	f001 fc8c 	bl	80024ec <HAL_TIM_PWM_ConfigChannel>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000bda:	f7ff fe6d 	bl	80008b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bde:	2300      	movs	r3, #0
 8000be0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000be2:	2300      	movs	r3, #0
 8000be4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bf2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bf6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4807      	ldr	r0, [pc, #28]	; (8000c20 <MX_TIM1_Init+0x138>)
 8000c02:	f002 f957 	bl	8002eb4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000c0c:	f7ff fe54 	bl	80008b8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8000c10:	4803      	ldr	r0, [pc, #12]	; (8000c20 <MX_TIM1_Init+0x138>)
 8000c12:	f000 f82b 	bl	8000c6c <HAL_TIM_MspPostInit>

}
 8000c16:	bf00      	nop
 8000c18:	3758      	adds	r7, #88	; 0x58
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	2000009c 	.word	0x2000009c
 8000c24:	40010000 	.word	0x40010000

08000c28 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a0b      	ldr	r2, [pc, #44]	; (8000c64 <HAL_TIM_Base_MspInit+0x3c>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d10d      	bne.n	8000c56 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <HAL_TIM_Base_MspInit+0x40>)
 8000c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c42:	4a09      	ldr	r2, [pc, #36]	; (8000c68 <HAL_TIM_Base_MspInit+0x40>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6453      	str	r3, [r2, #68]	; 0x44
 8000c4a:	4b07      	ldr	r3, [pc, #28]	; (8000c68 <HAL_TIM_Base_MspInit+0x40>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000c56:	bf00      	nop
 8000c58:	3714      	adds	r7, #20
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	40010000 	.word	0x40010000
 8000c68:	40023800 	.word	0x40023800

08000c6c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b088      	sub	sp, #32
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	f107 030c 	add.w	r3, r7, #12
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a12      	ldr	r2, [pc, #72]	; (8000cd4 <HAL_TIM_MspPostInit+0x68>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d11e      	bne.n	8000ccc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60bb      	str	r3, [r7, #8]
 8000c92:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <HAL_TIM_MspPostInit+0x6c>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	4a10      	ldr	r2, [pc, #64]	; (8000cd8 <HAL_TIM_MspPostInit+0x6c>)
 8000c98:	f043 0310 	orr.w	r3, r3, #16
 8000c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <HAL_TIM_MspPostInit+0x6c>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	f003 0310 	and.w	r3, r3, #16
 8000ca6:	60bb      	str	r3, [r7, #8]
 8000ca8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = LED_Pin;
 8000caa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000cc0:	f107 030c 	add.w	r3, r7, #12
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4805      	ldr	r0, [pc, #20]	; (8000cdc <HAL_TIM_MspPostInit+0x70>)
 8000cc8:	f000 fdca 	bl	8001860 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000ccc:	bf00      	nop
 8000cce:	3720      	adds	r7, #32
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40010000 	.word	0x40010000
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40021000 	.word	0x40021000

08000ce0 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8000ce4:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <MX_USART3_UART_Init+0x4c>)
 8000ce6:	4a12      	ldr	r2, [pc, #72]	; (8000d30 <MX_USART3_UART_Init+0x50>)
 8000ce8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cea:	4b10      	ldr	r3, [pc, #64]	; (8000d2c <MX_USART3_UART_Init+0x4c>)
 8000cec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cf0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <MX_USART3_UART_Init+0x4c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <MX_USART3_UART_Init+0x4c>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cfe:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <MX_USART3_UART_Init+0x4c>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d04:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <MX_USART3_UART_Init+0x4c>)
 8000d06:	220c      	movs	r2, #12
 8000d08:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d0a:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <MX_USART3_UART_Init+0x4c>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <MX_USART3_UART_Init+0x4c>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d16:	4805      	ldr	r0, [pc, #20]	; (8000d2c <MX_USART3_UART_Init+0x4c>)
 8000d18:	f002 f91e 	bl	8002f58 <HAL_UART_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000d22:	f7ff fdc9 	bl	80008b8 <Error_Handler>
  }

}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	2000013c 	.word	0x2000013c
 8000d30:	40004800 	.word	0x40004800

08000d34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08a      	sub	sp, #40	; 0x28
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a30      	ldr	r2, [pc, #192]	; (8000e14 <HAL_UART_MspInit+0xe0>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d15a      	bne.n	8000e0c <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
 8000d5a:	4b2f      	ldr	r3, [pc, #188]	; (8000e18 <HAL_UART_MspInit+0xe4>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	4a2e      	ldr	r2, [pc, #184]	; (8000e18 <HAL_UART_MspInit+0xe4>)
 8000d60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d64:	6413      	str	r3, [r2, #64]	; 0x40
 8000d66:	4b2c      	ldr	r3, [pc, #176]	; (8000e18 <HAL_UART_MspInit+0xe4>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d6e:	613b      	str	r3, [r7, #16]
 8000d70:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	4b28      	ldr	r3, [pc, #160]	; (8000e18 <HAL_UART_MspInit+0xe4>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	4a27      	ldr	r2, [pc, #156]	; (8000e18 <HAL_UART_MspInit+0xe4>)
 8000d7c:	f043 0302 	orr.w	r3, r3, #2
 8000d80:	6313      	str	r3, [r2, #48]	; 0x30
 8000d82:	4b25      	ldr	r3, [pc, #148]	; (8000e18 <HAL_UART_MspInit+0xe4>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f003 0302 	and.w	r3, r3, #2
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d8e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d94:	2302      	movs	r3, #2
 8000d96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000da0:	2307      	movs	r3, #7
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	4619      	mov	r1, r3
 8000daa:	481c      	ldr	r0, [pc, #112]	; (8000e1c <HAL_UART_MspInit+0xe8>)
 8000dac:	f000 fd58 	bl	8001860 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8000db0:	4b1b      	ldr	r3, [pc, #108]	; (8000e20 <HAL_UART_MspInit+0xec>)
 8000db2:	4a1c      	ldr	r2, [pc, #112]	; (8000e24 <HAL_UART_MspInit+0xf0>)
 8000db4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8000db6:	4b1a      	ldr	r3, [pc, #104]	; (8000e20 <HAL_UART_MspInit+0xec>)
 8000db8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dbc:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dbe:	4b18      	ldr	r3, [pc, #96]	; (8000e20 <HAL_UART_MspInit+0xec>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dc4:	4b16      	ldr	r3, [pc, #88]	; (8000e20 <HAL_UART_MspInit+0xec>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000dca:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <HAL_UART_MspInit+0xec>)
 8000dcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dd0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dd2:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <HAL_UART_MspInit+0xec>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dd8:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <HAL_UART_MspInit+0xec>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000dde:	4b10      	ldr	r3, [pc, #64]	; (8000e20 <HAL_UART_MspInit+0xec>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000de4:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <HAL_UART_MspInit+0xec>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dea:	4b0d      	ldr	r3, [pc, #52]	; (8000e20 <HAL_UART_MspInit+0xec>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000df0:	480b      	ldr	r0, [pc, #44]	; (8000e20 <HAL_UART_MspInit+0xec>)
 8000df2:	f000 f9c7 	bl	8001184 <HAL_DMA_Init>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000dfc:	f7ff fd5c 	bl	80008b8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4a07      	ldr	r2, [pc, #28]	; (8000e20 <HAL_UART_MspInit+0xec>)
 8000e04:	635a      	str	r2, [r3, #52]	; 0x34
 8000e06:	4a06      	ldr	r2, [pc, #24]	; (8000e20 <HAL_UART_MspInit+0xec>)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e0c:	bf00      	nop
 8000e0e:	3728      	adds	r7, #40	; 0x28
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40004800 	.word	0x40004800
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	40020400 	.word	0x40020400
 8000e20:	200000dc 	.word	0x200000dc
 8000e24:	40026028 	.word	0x40026028

08000e28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e60 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e2c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e2e:	e003      	b.n	8000e38 <LoopCopyDataInit>

08000e30 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e30:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e32:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e34:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e36:	3104      	adds	r1, #4

08000e38 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e38:	480b      	ldr	r0, [pc, #44]	; (8000e68 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e3a:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e3c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e3e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e40:	d3f6      	bcc.n	8000e30 <CopyDataInit>
  ldr  r2, =_sbss
 8000e42:	4a0b      	ldr	r2, [pc, #44]	; (8000e70 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e44:	e002      	b.n	8000e4c <LoopFillZerobss>

08000e46 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e46:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e48:	f842 3b04 	str.w	r3, [r2], #4

08000e4c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e4c:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e4e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e50:	d3f9      	bcc.n	8000e46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e52:	f7ff fe33 	bl	8000abc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e56:	f002 fe5b 	bl	8003b10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e5a:	f7ff fc47 	bl	80006ec <main>
  bx  lr    
 8000e5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e60:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000e64:	08004a40 	.word	0x08004a40
  ldr  r0, =_sdata
 8000e68:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e6c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000e70:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000e74:	20000184 	.word	0x20000184

08000e78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e78:	e7fe      	b.n	8000e78 <ADC_IRQHandler>
	...

08000e7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e80:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <HAL_Init+0x40>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a0d      	ldr	r2, [pc, #52]	; (8000ebc <HAL_Init+0x40>)
 8000e86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e8c:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <HAL_Init+0x40>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a0a      	ldr	r2, [pc, #40]	; (8000ebc <HAL_Init+0x40>)
 8000e92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e98:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <HAL_Init+0x40>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a07      	ldr	r2, [pc, #28]	; (8000ebc <HAL_Init+0x40>)
 8000e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ea2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea4:	2003      	movs	r0, #3
 8000ea6:	f000 f92b 	bl	8001100 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eaa:	2000      	movs	r0, #0
 8000eac:	f000 f808 	bl	8000ec0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb0:	f7ff fd0a 	bl	80008c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40023c00 	.word	0x40023c00

08000ec0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec8:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <HAL_InitTick+0x54>)
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <HAL_InitTick+0x58>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 f943 	bl	800116a <HAL_SYSTICK_Config>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e00e      	b.n	8000f0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2b0f      	cmp	r3, #15
 8000ef2:	d80a      	bhi.n	8000f0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	6879      	ldr	r1, [r7, #4]
 8000ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8000efc:	f000 f90b 	bl	8001116 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f00:	4a06      	ldr	r2, [pc, #24]	; (8000f1c <HAL_InitTick+0x5c>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f06:	2300      	movs	r3, #0
 8000f08:	e000      	b.n	8000f0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000000 	.word	0x20000000
 8000f18:	20000008 	.word	0x20000008
 8000f1c:	20000004 	.word	0x20000004

08000f20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <HAL_IncTick+0x20>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <HAL_IncTick+0x24>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4413      	add	r3, r2
 8000f30:	4a04      	ldr	r2, [pc, #16]	; (8000f44 <HAL_IncTick+0x24>)
 8000f32:	6013      	str	r3, [r2, #0]
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	20000008 	.word	0x20000008
 8000f44:	2000017c 	.word	0x2000017c

08000f48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f4c:	4b03      	ldr	r3, [pc, #12]	; (8000f5c <HAL_GetTick+0x14>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	2000017c 	.word	0x2000017c

08000f60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f70:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f76:	68ba      	ldr	r2, [r7, #8]
 8000f78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f92:	4a04      	ldr	r2, [pc, #16]	; (8000fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	60d3      	str	r3, [r2, #12]
}
 8000f98:	bf00      	nop
 8000f9a:	3714      	adds	r7, #20
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fac:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	0a1b      	lsrs	r3, r3, #8
 8000fb2:	f003 0307 	and.w	r3, r3, #7
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	db0b      	blt.n	8000fee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	f003 021f 	and.w	r2, r3, #31
 8000fdc:	4907      	ldr	r1, [pc, #28]	; (8000ffc <__NVIC_EnableIRQ+0x38>)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	095b      	lsrs	r3, r3, #5
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	e000e100 	.word	0xe000e100

08001000 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	6039      	str	r1, [r7, #0]
 800100a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001010:	2b00      	cmp	r3, #0
 8001012:	db0a      	blt.n	800102a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	b2da      	uxtb	r2, r3
 8001018:	490c      	ldr	r1, [pc, #48]	; (800104c <__NVIC_SetPriority+0x4c>)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	0112      	lsls	r2, r2, #4
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	440b      	add	r3, r1
 8001024:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001028:	e00a      	b.n	8001040 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	b2da      	uxtb	r2, r3
 800102e:	4908      	ldr	r1, [pc, #32]	; (8001050 <__NVIC_SetPriority+0x50>)
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	f003 030f 	and.w	r3, r3, #15
 8001036:	3b04      	subs	r3, #4
 8001038:	0112      	lsls	r2, r2, #4
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	440b      	add	r3, r1
 800103e:	761a      	strb	r2, [r3, #24]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	e000e100 	.word	0xe000e100
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001054:	b480      	push	{r7}
 8001056:	b089      	sub	sp, #36	; 0x24
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	f1c3 0307 	rsb	r3, r3, #7
 800106e:	2b04      	cmp	r3, #4
 8001070:	bf28      	it	cs
 8001072:	2304      	movcs	r3, #4
 8001074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3304      	adds	r3, #4
 800107a:	2b06      	cmp	r3, #6
 800107c:	d902      	bls.n	8001084 <NVIC_EncodePriority+0x30>
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3b03      	subs	r3, #3
 8001082:	e000      	b.n	8001086 <NVIC_EncodePriority+0x32>
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	f04f 32ff 	mov.w	r2, #4294967295
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43da      	mvns	r2, r3
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	401a      	ands	r2, r3
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800109c:	f04f 31ff 	mov.w	r1, #4294967295
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	fa01 f303 	lsl.w	r3, r1, r3
 80010a6:	43d9      	mvns	r1, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ac:	4313      	orrs	r3, r2
         );
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3724      	adds	r7, #36	; 0x24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010cc:	d301      	bcc.n	80010d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ce:	2301      	movs	r3, #1
 80010d0:	e00f      	b.n	80010f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010d2:	4a0a      	ldr	r2, [pc, #40]	; (80010fc <SysTick_Config+0x40>)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010da:	210f      	movs	r1, #15
 80010dc:	f04f 30ff 	mov.w	r0, #4294967295
 80010e0:	f7ff ff8e 	bl	8001000 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e4:	4b05      	ldr	r3, [pc, #20]	; (80010fc <SysTick_Config+0x40>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ea:	4b04      	ldr	r3, [pc, #16]	; (80010fc <SysTick_Config+0x40>)
 80010ec:	2207      	movs	r2, #7
 80010ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	e000e010 	.word	0xe000e010

08001100 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff ff29 	bl	8000f60 <__NVIC_SetPriorityGrouping>
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001116:	b580      	push	{r7, lr}
 8001118:	b086      	sub	sp, #24
 800111a:	af00      	add	r7, sp, #0
 800111c:	4603      	mov	r3, r0
 800111e:	60b9      	str	r1, [r7, #8]
 8001120:	607a      	str	r2, [r7, #4]
 8001122:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001128:	f7ff ff3e 	bl	8000fa8 <__NVIC_GetPriorityGrouping>
 800112c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	68b9      	ldr	r1, [r7, #8]
 8001132:	6978      	ldr	r0, [r7, #20]
 8001134:	f7ff ff8e 	bl	8001054 <NVIC_EncodePriority>
 8001138:	4602      	mov	r2, r0
 800113a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113e:	4611      	mov	r1, r2
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ff5d 	bl	8001000 <__NVIC_SetPriority>
}
 8001146:	bf00      	nop
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
 8001154:	4603      	mov	r3, r0
 8001156:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff ff31 	bl	8000fc4 <__NVIC_EnableIRQ>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff ffa2 	bl	80010bc <SysTick_Config>
 8001178:	4603      	mov	r3, r0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001190:	f7ff feda 	bl	8000f48 <HAL_GetTick>
 8001194:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d101      	bne.n	80011a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	e099      	b.n	80012d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2202      	movs	r2, #2
 80011ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f022 0201 	bic.w	r2, r2, #1
 80011be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011c0:	e00f      	b.n	80011e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011c2:	f7ff fec1 	bl	8000f48 <HAL_GetTick>
 80011c6:	4602      	mov	r2, r0
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	2b05      	cmp	r3, #5
 80011ce:	d908      	bls.n	80011e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2220      	movs	r2, #32
 80011d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2203      	movs	r2, #3
 80011da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e078      	b.n	80012d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d1e8      	bne.n	80011c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80011f8:	697a      	ldr	r2, [r7, #20]
 80011fa:	4b38      	ldr	r3, [pc, #224]	; (80012dc <HAL_DMA_Init+0x158>)
 80011fc:	4013      	ands	r3, r2
 80011fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685a      	ldr	r2, [r3, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800120e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	691b      	ldr	r3, [r3, #16]
 8001214:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800121a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001226:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a1b      	ldr	r3, [r3, #32]
 800122c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800122e:	697a      	ldr	r2, [r7, #20]
 8001230:	4313      	orrs	r3, r2
 8001232:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001238:	2b04      	cmp	r3, #4
 800123a:	d107      	bne.n	800124c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001244:	4313      	orrs	r3, r2
 8001246:	697a      	ldr	r2, [r7, #20]
 8001248:	4313      	orrs	r3, r2
 800124a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	697a      	ldr	r2, [r7, #20]
 8001252:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	f023 0307 	bic.w	r3, r3, #7
 8001262:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001268:	697a      	ldr	r2, [r7, #20]
 800126a:	4313      	orrs	r3, r2
 800126c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001272:	2b04      	cmp	r3, #4
 8001274:	d117      	bne.n	80012a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800127a:	697a      	ldr	r2, [r7, #20]
 800127c:	4313      	orrs	r3, r2
 800127e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001284:	2b00      	cmp	r3, #0
 8001286:	d00e      	beq.n	80012a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f000 fa6f 	bl	800176c <DMA_CheckFifoParam>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d008      	beq.n	80012a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2240      	movs	r2, #64	; 0x40
 8001298:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2201      	movs	r2, #1
 800129e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80012a2:	2301      	movs	r3, #1
 80012a4:	e016      	b.n	80012d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	697a      	ldr	r2, [r7, #20]
 80012ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f000 fa26 	bl	8001700 <DMA_CalcBaseAndBitshift>
 80012b4:	4603      	mov	r3, r0
 80012b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012bc:	223f      	movs	r2, #63	; 0x3f
 80012be:	409a      	lsls	r2, r3
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2200      	movs	r2, #0
 80012c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2201      	movs	r2, #1
 80012ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3718      	adds	r7, #24
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	f010803f 	.word	0xf010803f

080012e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
 80012ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80012ee:	2300      	movs	r3, #0
 80012f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d101      	bne.n	8001306 <HAL_DMA_Start_IT+0x26>
 8001302:	2302      	movs	r3, #2
 8001304:	e040      	b.n	8001388 <HAL_DMA_Start_IT+0xa8>
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	2201      	movs	r2, #1
 800130a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b01      	cmp	r3, #1
 8001318:	d12f      	bne.n	800137a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	2202      	movs	r2, #2
 800131e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	2200      	movs	r2, #0
 8001326:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	68b9      	ldr	r1, [r7, #8]
 800132e:	68f8      	ldr	r0, [r7, #12]
 8001330:	f000 f9b8 	bl	80016a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001338:	223f      	movs	r2, #63	; 0x3f
 800133a:	409a      	lsls	r2, r3
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f042 0216 	orr.w	r2, r2, #22
 800134e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001354:	2b00      	cmp	r3, #0
 8001356:	d007      	beq.n	8001368 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f042 0208 	orr.w	r2, r2, #8
 8001366:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f042 0201 	orr.w	r2, r2, #1
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	e005      	b.n	8001386 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2200      	movs	r2, #0
 800137e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001382:	2302      	movs	r3, #2
 8001384:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001386:	7dfb      	ldrb	r3, [r7, #23]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3718      	adds	r7, #24
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001398:	2300      	movs	r3, #0
 800139a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800139c:	4b92      	ldr	r3, [pc, #584]	; (80015e8 <HAL_DMA_IRQHandler+0x258>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a92      	ldr	r2, [pc, #584]	; (80015ec <HAL_DMA_IRQHandler+0x25c>)
 80013a2:	fba2 2303 	umull	r2, r3, r2, r3
 80013a6:	0a9b      	lsrs	r3, r3, #10
 80013a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ba:	2208      	movs	r2, #8
 80013bc:	409a      	lsls	r2, r3
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	4013      	ands	r3, r2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d01a      	beq.n	80013fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0304 	and.w	r3, r3, #4
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d013      	beq.n	80013fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f022 0204 	bic.w	r2, r2, #4
 80013e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013e8:	2208      	movs	r2, #8
 80013ea:	409a      	lsls	r2, r3
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f4:	f043 0201 	orr.w	r2, r3, #1
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001400:	2201      	movs	r2, #1
 8001402:	409a      	lsls	r2, r3
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	4013      	ands	r3, r2
 8001408:	2b00      	cmp	r3, #0
 800140a:	d012      	beq.n	8001432 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001416:	2b00      	cmp	r3, #0
 8001418:	d00b      	beq.n	8001432 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800141e:	2201      	movs	r2, #1
 8001420:	409a      	lsls	r2, r3
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800142a:	f043 0202 	orr.w	r2, r3, #2
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001436:	2204      	movs	r2, #4
 8001438:	409a      	lsls	r2, r3
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	4013      	ands	r3, r2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d012      	beq.n	8001468 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d00b      	beq.n	8001468 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001454:	2204      	movs	r2, #4
 8001456:	409a      	lsls	r2, r3
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001460:	f043 0204 	orr.w	r2, r3, #4
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800146c:	2210      	movs	r2, #16
 800146e:	409a      	lsls	r2, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4013      	ands	r3, r2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d043      	beq.n	8001500 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0308 	and.w	r3, r3, #8
 8001482:	2b00      	cmp	r3, #0
 8001484:	d03c      	beq.n	8001500 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800148a:	2210      	movs	r2, #16
 800148c:	409a      	lsls	r2, r3
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d018      	beq.n	80014d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d108      	bne.n	80014c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d024      	beq.n	8001500 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	4798      	blx	r3
 80014be:	e01f      	b.n	8001500 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d01b      	beq.n	8001500 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	4798      	blx	r3
 80014d0:	e016      	b.n	8001500 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d107      	bne.n	80014f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f022 0208 	bic.w	r2, r2, #8
 80014ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d003      	beq.n	8001500 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001504:	2220      	movs	r2, #32
 8001506:	409a      	lsls	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	4013      	ands	r3, r2
 800150c:	2b00      	cmp	r3, #0
 800150e:	f000 808e 	beq.w	800162e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0310 	and.w	r3, r3, #16
 800151c:	2b00      	cmp	r3, #0
 800151e:	f000 8086 	beq.w	800162e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001526:	2220      	movs	r2, #32
 8001528:	409a      	lsls	r2, r3
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b05      	cmp	r3, #5
 8001538:	d136      	bne.n	80015a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f022 0216 	bic.w	r2, r2, #22
 8001548:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	695a      	ldr	r2, [r3, #20]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001558:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	2b00      	cmp	r3, #0
 8001560:	d103      	bne.n	800156a <HAL_DMA_IRQHandler+0x1da>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001566:	2b00      	cmp	r3, #0
 8001568:	d007      	beq.n	800157a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f022 0208 	bic.w	r2, r2, #8
 8001578:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800157e:	223f      	movs	r2, #63	; 0x3f
 8001580:	409a      	lsls	r2, r3
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2201      	movs	r2, #1
 8001592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800159a:	2b00      	cmp	r3, #0
 800159c:	d07d      	beq.n	800169a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	4798      	blx	r3
        }
        return;
 80015a6:	e078      	b.n	800169a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d01c      	beq.n	80015f0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d108      	bne.n	80015d6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d030      	beq.n	800162e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	4798      	blx	r3
 80015d4:	e02b      	b.n	800162e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d027      	beq.n	800162e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	4798      	blx	r3
 80015e6:	e022      	b.n	800162e <HAL_DMA_IRQHandler+0x29e>
 80015e8:	20000000 	.word	0x20000000
 80015ec:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d10f      	bne.n	800161e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f022 0210 	bic.w	r2, r2, #16
 800160c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2201      	movs	r2, #1
 800161a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001632:	2b00      	cmp	r3, #0
 8001634:	d032      	beq.n	800169c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	2b00      	cmp	r3, #0
 8001640:	d022      	beq.n	8001688 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2205      	movs	r2, #5
 8001646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 0201 	bic.w	r2, r2, #1
 8001658:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	3301      	adds	r3, #1
 800165e:	60bb      	str	r3, [r7, #8]
 8001660:	697a      	ldr	r2, [r7, #20]
 8001662:	429a      	cmp	r2, r3
 8001664:	d307      	bcc.n	8001676 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1f2      	bne.n	800165a <HAL_DMA_IRQHandler+0x2ca>
 8001674:	e000      	b.n	8001678 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001676:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2201      	movs	r2, #1
 8001684:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168c:	2b00      	cmp	r3, #0
 800168e:	d005      	beq.n	800169c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	4798      	blx	r3
 8001698:	e000      	b.n	800169c <HAL_DMA_IRQHandler+0x30c>
        return;
 800169a:	bf00      	nop
    }
  }
}
 800169c:	3718      	adds	r7, #24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop

080016a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
 80016b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80016c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	683a      	ldr	r2, [r7, #0]
 80016c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	2b40      	cmp	r3, #64	; 0x40
 80016d0:	d108      	bne.n	80016e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80016e2:	e007      	b.n	80016f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	68ba      	ldr	r2, [r7, #8]
 80016ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	60da      	str	r2, [r3, #12]
}
 80016f4:	bf00      	nop
 80016f6:	3714      	adds	r7, #20
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	b2db      	uxtb	r3, r3
 800170e:	3b10      	subs	r3, #16
 8001710:	4a14      	ldr	r2, [pc, #80]	; (8001764 <DMA_CalcBaseAndBitshift+0x64>)
 8001712:	fba2 2303 	umull	r2, r3, r2, r3
 8001716:	091b      	lsrs	r3, r3, #4
 8001718:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800171a:	4a13      	ldr	r2, [pc, #76]	; (8001768 <DMA_CalcBaseAndBitshift+0x68>)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	4413      	add	r3, r2
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	461a      	mov	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2b03      	cmp	r3, #3
 800172c:	d909      	bls.n	8001742 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001736:	f023 0303 	bic.w	r3, r3, #3
 800173a:	1d1a      	adds	r2, r3, #4
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	659a      	str	r2, [r3, #88]	; 0x58
 8001740:	e007      	b.n	8001752 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800174a:	f023 0303 	bic.w	r3, r3, #3
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001756:	4618      	mov	r0, r3
 8001758:	3714      	adds	r7, #20
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	aaaaaaab 	.word	0xaaaaaaab
 8001768:	08004990 	.word	0x08004990

0800176c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001774:	2300      	movs	r3, #0
 8001776:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d11f      	bne.n	80017c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	2b03      	cmp	r3, #3
 800178a:	d855      	bhi.n	8001838 <DMA_CheckFifoParam+0xcc>
 800178c:	a201      	add	r2, pc, #4	; (adr r2, 8001794 <DMA_CheckFifoParam+0x28>)
 800178e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001792:	bf00      	nop
 8001794:	080017a5 	.word	0x080017a5
 8001798:	080017b7 	.word	0x080017b7
 800179c:	080017a5 	.word	0x080017a5
 80017a0:	08001839 	.word	0x08001839
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d045      	beq.n	800183c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017b4:	e042      	b.n	800183c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80017be:	d13f      	bne.n	8001840 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017c4:	e03c      	b.n	8001840 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017ce:	d121      	bne.n	8001814 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	2b03      	cmp	r3, #3
 80017d4:	d836      	bhi.n	8001844 <DMA_CheckFifoParam+0xd8>
 80017d6:	a201      	add	r2, pc, #4	; (adr r2, 80017dc <DMA_CheckFifoParam+0x70>)
 80017d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017dc:	080017ed 	.word	0x080017ed
 80017e0:	080017f3 	.word	0x080017f3
 80017e4:	080017ed 	.word	0x080017ed
 80017e8:	08001805 	.word	0x08001805
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	73fb      	strb	r3, [r7, #15]
      break;
 80017f0:	e02f      	b.n	8001852 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d024      	beq.n	8001848 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001802:	e021      	b.n	8001848 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001808:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800180c:	d11e      	bne.n	800184c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001812:	e01b      	b.n	800184c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	2b02      	cmp	r3, #2
 8001818:	d902      	bls.n	8001820 <DMA_CheckFifoParam+0xb4>
 800181a:	2b03      	cmp	r3, #3
 800181c:	d003      	beq.n	8001826 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800181e:	e018      	b.n	8001852 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	73fb      	strb	r3, [r7, #15]
      break;
 8001824:	e015      	b.n	8001852 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00e      	beq.n	8001850 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	73fb      	strb	r3, [r7, #15]
      break;
 8001836:	e00b      	b.n	8001850 <DMA_CheckFifoParam+0xe4>
      break;
 8001838:	bf00      	nop
 800183a:	e00a      	b.n	8001852 <DMA_CheckFifoParam+0xe6>
      break;
 800183c:	bf00      	nop
 800183e:	e008      	b.n	8001852 <DMA_CheckFifoParam+0xe6>
      break;
 8001840:	bf00      	nop
 8001842:	e006      	b.n	8001852 <DMA_CheckFifoParam+0xe6>
      break;
 8001844:	bf00      	nop
 8001846:	e004      	b.n	8001852 <DMA_CheckFifoParam+0xe6>
      break;
 8001848:	bf00      	nop
 800184a:	e002      	b.n	8001852 <DMA_CheckFifoParam+0xe6>
      break;   
 800184c:	bf00      	nop
 800184e:	e000      	b.n	8001852 <DMA_CheckFifoParam+0xe6>
      break;
 8001850:	bf00      	nop
    }
  } 
  
  return status; 
 8001852:	7bfb      	ldrb	r3, [r7, #15]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001860:	b480      	push	{r7}
 8001862:	b089      	sub	sp, #36	; 0x24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800186e:	2300      	movs	r3, #0
 8001870:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001872:	2300      	movs	r3, #0
 8001874:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001876:	2300      	movs	r3, #0
 8001878:	61fb      	str	r3, [r7, #28]
 800187a:	e177      	b.n	8001b6c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800187c:	2201      	movs	r2, #1
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	697a      	ldr	r2, [r7, #20]
 800188c:	4013      	ands	r3, r2
 800188e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	429a      	cmp	r2, r3
 8001896:	f040 8166 	bne.w	8001b66 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d00b      	beq.n	80018ba <HAL_GPIO_Init+0x5a>
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d007      	beq.n	80018ba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018ae:	2b11      	cmp	r3, #17
 80018b0:	d003      	beq.n	80018ba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2b12      	cmp	r3, #18
 80018b8:	d130      	bne.n	800191c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	2203      	movs	r2, #3
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43db      	mvns	r3, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4013      	ands	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	68da      	ldr	r2, [r3, #12]
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018f0:	2201      	movs	r2, #1
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	4013      	ands	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	091b      	lsrs	r3, r3, #4
 8001906:	f003 0201 	and.w	r2, r3, #1
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4313      	orrs	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	2203      	movs	r2, #3
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	43db      	mvns	r3, r3
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	4013      	ands	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4313      	orrs	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	2b02      	cmp	r3, #2
 8001952:	d003      	beq.n	800195c <HAL_GPIO_Init+0xfc>
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	2b12      	cmp	r3, #18
 800195a:	d123      	bne.n	80019a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	08da      	lsrs	r2, r3, #3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3208      	adds	r2, #8
 8001964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001968:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	f003 0307 	and.w	r3, r3, #7
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	220f      	movs	r2, #15
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4013      	ands	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	691a      	ldr	r2, [r3, #16]
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4313      	orrs	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	08da      	lsrs	r2, r3, #3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	3208      	adds	r2, #8
 800199e:	69b9      	ldr	r1, [r7, #24]
 80019a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	2203      	movs	r2, #3
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	43db      	mvns	r3, r3
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	4013      	ands	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f003 0203 	and.w	r2, r3, #3
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	f000 80c0 	beq.w	8001b66 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	4b65      	ldr	r3, [pc, #404]	; (8001b80 <HAL_GPIO_Init+0x320>)
 80019ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ee:	4a64      	ldr	r2, [pc, #400]	; (8001b80 <HAL_GPIO_Init+0x320>)
 80019f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f4:	6453      	str	r3, [r2, #68]	; 0x44
 80019f6:	4b62      	ldr	r3, [pc, #392]	; (8001b80 <HAL_GPIO_Init+0x320>)
 80019f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a02:	4a60      	ldr	r2, [pc, #384]	; (8001b84 <HAL_GPIO_Init+0x324>)
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	089b      	lsrs	r3, r3, #2
 8001a08:	3302      	adds	r3, #2
 8001a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	f003 0303 	and.w	r3, r3, #3
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	220f      	movs	r2, #15
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4013      	ands	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a57      	ldr	r2, [pc, #348]	; (8001b88 <HAL_GPIO_Init+0x328>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d037      	beq.n	8001a9e <HAL_GPIO_Init+0x23e>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a56      	ldr	r2, [pc, #344]	; (8001b8c <HAL_GPIO_Init+0x32c>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d031      	beq.n	8001a9a <HAL_GPIO_Init+0x23a>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a55      	ldr	r2, [pc, #340]	; (8001b90 <HAL_GPIO_Init+0x330>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d02b      	beq.n	8001a96 <HAL_GPIO_Init+0x236>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a54      	ldr	r2, [pc, #336]	; (8001b94 <HAL_GPIO_Init+0x334>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d025      	beq.n	8001a92 <HAL_GPIO_Init+0x232>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a53      	ldr	r2, [pc, #332]	; (8001b98 <HAL_GPIO_Init+0x338>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d01f      	beq.n	8001a8e <HAL_GPIO_Init+0x22e>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a52      	ldr	r2, [pc, #328]	; (8001b9c <HAL_GPIO_Init+0x33c>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d019      	beq.n	8001a8a <HAL_GPIO_Init+0x22a>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a51      	ldr	r2, [pc, #324]	; (8001ba0 <HAL_GPIO_Init+0x340>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d013      	beq.n	8001a86 <HAL_GPIO_Init+0x226>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a50      	ldr	r2, [pc, #320]	; (8001ba4 <HAL_GPIO_Init+0x344>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d00d      	beq.n	8001a82 <HAL_GPIO_Init+0x222>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a4f      	ldr	r2, [pc, #316]	; (8001ba8 <HAL_GPIO_Init+0x348>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d007      	beq.n	8001a7e <HAL_GPIO_Init+0x21e>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a4e      	ldr	r2, [pc, #312]	; (8001bac <HAL_GPIO_Init+0x34c>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d101      	bne.n	8001a7a <HAL_GPIO_Init+0x21a>
 8001a76:	2309      	movs	r3, #9
 8001a78:	e012      	b.n	8001aa0 <HAL_GPIO_Init+0x240>
 8001a7a:	230a      	movs	r3, #10
 8001a7c:	e010      	b.n	8001aa0 <HAL_GPIO_Init+0x240>
 8001a7e:	2308      	movs	r3, #8
 8001a80:	e00e      	b.n	8001aa0 <HAL_GPIO_Init+0x240>
 8001a82:	2307      	movs	r3, #7
 8001a84:	e00c      	b.n	8001aa0 <HAL_GPIO_Init+0x240>
 8001a86:	2306      	movs	r3, #6
 8001a88:	e00a      	b.n	8001aa0 <HAL_GPIO_Init+0x240>
 8001a8a:	2305      	movs	r3, #5
 8001a8c:	e008      	b.n	8001aa0 <HAL_GPIO_Init+0x240>
 8001a8e:	2304      	movs	r3, #4
 8001a90:	e006      	b.n	8001aa0 <HAL_GPIO_Init+0x240>
 8001a92:	2303      	movs	r3, #3
 8001a94:	e004      	b.n	8001aa0 <HAL_GPIO_Init+0x240>
 8001a96:	2302      	movs	r3, #2
 8001a98:	e002      	b.n	8001aa0 <HAL_GPIO_Init+0x240>
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e000      	b.n	8001aa0 <HAL_GPIO_Init+0x240>
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	69fa      	ldr	r2, [r7, #28]
 8001aa2:	f002 0203 	and.w	r2, r2, #3
 8001aa6:	0092      	lsls	r2, r2, #2
 8001aa8:	4093      	lsls	r3, r2
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ab0:	4934      	ldr	r1, [pc, #208]	; (8001b84 <HAL_GPIO_Init+0x324>)
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	089b      	lsrs	r3, r3, #2
 8001ab6:	3302      	adds	r3, #2
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001abe:	4b3c      	ldr	r3, [pc, #240]	; (8001bb0 <HAL_GPIO_Init+0x350>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	4013      	ands	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d003      	beq.n	8001ae2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ae2:	4a33      	ldr	r2, [pc, #204]	; (8001bb0 <HAL_GPIO_Init+0x350>)
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ae8:	4b31      	ldr	r3, [pc, #196]	; (8001bb0 <HAL_GPIO_Init+0x350>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	43db      	mvns	r3, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4013      	ands	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d003      	beq.n	8001b0c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b0c:	4a28      	ldr	r2, [pc, #160]	; (8001bb0 <HAL_GPIO_Init+0x350>)
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b12:	4b27      	ldr	r3, [pc, #156]	; (8001bb0 <HAL_GPIO_Init+0x350>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d003      	beq.n	8001b36 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b36:	4a1e      	ldr	r2, [pc, #120]	; (8001bb0 <HAL_GPIO_Init+0x350>)
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b3c:	4b1c      	ldr	r3, [pc, #112]	; (8001bb0 <HAL_GPIO_Init+0x350>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	43db      	mvns	r3, r3
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d003      	beq.n	8001b60 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b60:	4a13      	ldr	r2, [pc, #76]	; (8001bb0 <HAL_GPIO_Init+0x350>)
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	61fb      	str	r3, [r7, #28]
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	2b0f      	cmp	r3, #15
 8001b70:	f67f ae84 	bls.w	800187c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b74:	bf00      	nop
 8001b76:	3724      	adds	r7, #36	; 0x24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40013800 	.word	0x40013800
 8001b88:	40020000 	.word	0x40020000
 8001b8c:	40020400 	.word	0x40020400
 8001b90:	40020800 	.word	0x40020800
 8001b94:	40020c00 	.word	0x40020c00
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	40021400 	.word	0x40021400
 8001ba0:	40021800 	.word	0x40021800
 8001ba4:	40021c00 	.word	0x40021c00
 8001ba8:	40022000 	.word	0x40022000
 8001bac:	40022400 	.word	0x40022400
 8001bb0:	40013c00 	.word	0x40013c00

08001bb4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e25b      	b.n	800207e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d075      	beq.n	8001cbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bd2:	4ba3      	ldr	r3, [pc, #652]	; (8001e60 <HAL_RCC_OscConfig+0x2ac>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 030c 	and.w	r3, r3, #12
 8001bda:	2b04      	cmp	r3, #4
 8001bdc:	d00c      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bde:	4ba0      	ldr	r3, [pc, #640]	; (8001e60 <HAL_RCC_OscConfig+0x2ac>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001be6:	2b08      	cmp	r3, #8
 8001be8:	d112      	bne.n	8001c10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bea:	4b9d      	ldr	r3, [pc, #628]	; (8001e60 <HAL_RCC_OscConfig+0x2ac>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bf6:	d10b      	bne.n	8001c10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf8:	4b99      	ldr	r3, [pc, #612]	; (8001e60 <HAL_RCC_OscConfig+0x2ac>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d05b      	beq.n	8001cbc <HAL_RCC_OscConfig+0x108>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d157      	bne.n	8001cbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e236      	b.n	800207e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c18:	d106      	bne.n	8001c28 <HAL_RCC_OscConfig+0x74>
 8001c1a:	4b91      	ldr	r3, [pc, #580]	; (8001e60 <HAL_RCC_OscConfig+0x2ac>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a90      	ldr	r2, [pc, #576]	; (8001e60 <HAL_RCC_OscConfig+0x2ac>)
 8001c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	e01d      	b.n	8001c64 <HAL_RCC_OscConfig+0xb0>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c30:	d10c      	bne.n	8001c4c <HAL_RCC_OscConfig+0x98>
 8001c32:	4b8b      	ldr	r3, [pc, #556]	; (8001e60 <HAL_RCC_OscConfig+0x2ac>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a8a      	ldr	r2, [pc, #552]	; (8001e60 <HAL_RCC_OscConfig+0x2ac>)
 8001c38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c3c:	6013      	str	r3, [r2, #0]
 8001c3e:	4b88      	ldr	r3, [pc, #544]	; (8001e60 <HAL_RCC_OscConfig+0x2ac>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a87      	ldr	r2, [pc, #540]	; (8001e60 <HAL_RCC_OscConfig+0x2ac>)
 8001c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	e00b      	b.n	8001c64 <HAL_RCC_OscConfig+0xb0>
 8001c4c:	4b84      	ldr	r3, [pc, #528]	; (8001e60 <HAL_RCC_OscConfig+0x2ac>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a83      	ldr	r2, [pc, #524]	; (8001e60 <HAL_RCC_OscConfig+0x2ac>)
 8001c52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c56:	6013      	str	r3, [r2, #0]
 8001c58:	4b81      	ldr	r3, [pc, #516]	; (8001e60 <HAL_RCC_OscConfig+0x2ac>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a80      	ldr	r2, [pc, #512]	; (8001e60 <HAL_RCC_OscConfig+0x2ac>)
 8001c5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d013      	beq.n	8001c94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6c:	f7ff f96c 	bl	8000f48 <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c74:	f7ff f968 	bl	8000f48 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b64      	cmp	r3, #100	; 0x64
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e1fb      	b.n	800207e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c86:	4b76      	ldr	r3, [pc, #472]	; (8001e60 <HAL_RCC_OscConfig+0x2ac>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d0f0      	beq.n	8001c74 <HAL_RCC_OscConfig+0xc0>
 8001c92:	e014      	b.n	8001cbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c94:	f7ff f958 	bl	8000f48 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c9c:	f7ff f954 	bl	8000f48 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b64      	cmp	r3, #100	; 0x64
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e1e7      	b.n	800207e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cae:	4b6c      	ldr	r3, [pc, #432]	; (8001e60 <HAL_RCC_OscConfig+0x2ac>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1f0      	bne.n	8001c9c <HAL_RCC_OscConfig+0xe8>
 8001cba:	e000      	b.n	8001cbe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d063      	beq.n	8001d92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cca:	4b65      	ldr	r3, [pc, #404]	; (8001e60 <HAL_RCC_OscConfig+0x2ac>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f003 030c 	and.w	r3, r3, #12
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d00b      	beq.n	8001cee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cd6:	4b62      	ldr	r3, [pc, #392]	; (8001e60 <HAL_RCC_OscConfig+0x2ac>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cde:	2b08      	cmp	r3, #8
 8001ce0:	d11c      	bne.n	8001d1c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ce2:	4b5f      	ldr	r3, [pc, #380]	; (8001e60 <HAL_RCC_OscConfig+0x2ac>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d116      	bne.n	8001d1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cee:	4b5c      	ldr	r3, [pc, #368]	; (8001e60 <HAL_RCC_OscConfig+0x2ac>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d005      	beq.n	8001d06 <HAL_RCC_OscConfig+0x152>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d001      	beq.n	8001d06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e1bb      	b.n	800207e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d06:	4b56      	ldr	r3, [pc, #344]	; (8001e60 <HAL_RCC_OscConfig+0x2ac>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	4952      	ldr	r1, [pc, #328]	; (8001e60 <HAL_RCC_OscConfig+0x2ac>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d1a:	e03a      	b.n	8001d92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d020      	beq.n	8001d66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d24:	4b4f      	ldr	r3, [pc, #316]	; (8001e64 <HAL_RCC_OscConfig+0x2b0>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d2a:	f7ff f90d 	bl	8000f48 <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d30:	e008      	b.n	8001d44 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d32:	f7ff f909 	bl	8000f48 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e19c      	b.n	800207e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d44:	4b46      	ldr	r3, [pc, #280]	; (8001e60 <HAL_RCC_OscConfig+0x2ac>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d0f0      	beq.n	8001d32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d50:	4b43      	ldr	r3, [pc, #268]	; (8001e60 <HAL_RCC_OscConfig+0x2ac>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	4940      	ldr	r1, [pc, #256]	; (8001e60 <HAL_RCC_OscConfig+0x2ac>)
 8001d60:	4313      	orrs	r3, r2
 8001d62:	600b      	str	r3, [r1, #0]
 8001d64:	e015      	b.n	8001d92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d66:	4b3f      	ldr	r3, [pc, #252]	; (8001e64 <HAL_RCC_OscConfig+0x2b0>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6c:	f7ff f8ec 	bl	8000f48 <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d74:	f7ff f8e8 	bl	8000f48 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e17b      	b.n	800207e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d86:	4b36      	ldr	r3, [pc, #216]	; (8001e60 <HAL_RCC_OscConfig+0x2ac>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1f0      	bne.n	8001d74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0308 	and.w	r3, r3, #8
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d030      	beq.n	8001e00 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	695b      	ldr	r3, [r3, #20]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d016      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001da6:	4b30      	ldr	r3, [pc, #192]	; (8001e68 <HAL_RCC_OscConfig+0x2b4>)
 8001da8:	2201      	movs	r2, #1
 8001daa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dac:	f7ff f8cc 	bl	8000f48 <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001db4:	f7ff f8c8 	bl	8000f48 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e15b      	b.n	800207e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dc6:	4b26      	ldr	r3, [pc, #152]	; (8001e60 <HAL_RCC_OscConfig+0x2ac>)
 8001dc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d0f0      	beq.n	8001db4 <HAL_RCC_OscConfig+0x200>
 8001dd2:	e015      	b.n	8001e00 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dd4:	4b24      	ldr	r3, [pc, #144]	; (8001e68 <HAL_RCC_OscConfig+0x2b4>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dda:	f7ff f8b5 	bl	8000f48 <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001de2:	f7ff f8b1 	bl	8000f48 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e144      	b.n	800207e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001df4:	4b1a      	ldr	r3, [pc, #104]	; (8001e60 <HAL_RCC_OscConfig+0x2ac>)
 8001df6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d1f0      	bne.n	8001de2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	f000 80a0 	beq.w	8001f4e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e12:	4b13      	ldr	r3, [pc, #76]	; (8001e60 <HAL_RCC_OscConfig+0x2ac>)
 8001e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d10f      	bne.n	8001e3e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60bb      	str	r3, [r7, #8]
 8001e22:	4b0f      	ldr	r3, [pc, #60]	; (8001e60 <HAL_RCC_OscConfig+0x2ac>)
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	4a0e      	ldr	r2, [pc, #56]	; (8001e60 <HAL_RCC_OscConfig+0x2ac>)
 8001e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e2e:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <HAL_RCC_OscConfig+0x2ac>)
 8001e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e36:	60bb      	str	r3, [r7, #8]
 8001e38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e3e:	4b0b      	ldr	r3, [pc, #44]	; (8001e6c <HAL_RCC_OscConfig+0x2b8>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d121      	bne.n	8001e8e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e4a:	4b08      	ldr	r3, [pc, #32]	; (8001e6c <HAL_RCC_OscConfig+0x2b8>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a07      	ldr	r2, [pc, #28]	; (8001e6c <HAL_RCC_OscConfig+0x2b8>)
 8001e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e56:	f7ff f877 	bl	8000f48 <HAL_GetTick>
 8001e5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e5c:	e011      	b.n	8001e82 <HAL_RCC_OscConfig+0x2ce>
 8001e5e:	bf00      	nop
 8001e60:	40023800 	.word	0x40023800
 8001e64:	42470000 	.word	0x42470000
 8001e68:	42470e80 	.word	0x42470e80
 8001e6c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e70:	f7ff f86a 	bl	8000f48 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e0fd      	b.n	800207e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e82:	4b81      	ldr	r3, [pc, #516]	; (8002088 <HAL_RCC_OscConfig+0x4d4>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d0f0      	beq.n	8001e70 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d106      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x2f0>
 8001e96:	4b7d      	ldr	r3, [pc, #500]	; (800208c <HAL_RCC_OscConfig+0x4d8>)
 8001e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e9a:	4a7c      	ldr	r2, [pc, #496]	; (800208c <HAL_RCC_OscConfig+0x4d8>)
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ea2:	e01c      	b.n	8001ede <HAL_RCC_OscConfig+0x32a>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	2b05      	cmp	r3, #5
 8001eaa:	d10c      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x312>
 8001eac:	4b77      	ldr	r3, [pc, #476]	; (800208c <HAL_RCC_OscConfig+0x4d8>)
 8001eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb0:	4a76      	ldr	r2, [pc, #472]	; (800208c <HAL_RCC_OscConfig+0x4d8>)
 8001eb2:	f043 0304 	orr.w	r3, r3, #4
 8001eb6:	6713      	str	r3, [r2, #112]	; 0x70
 8001eb8:	4b74      	ldr	r3, [pc, #464]	; (800208c <HAL_RCC_OscConfig+0x4d8>)
 8001eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ebc:	4a73      	ldr	r2, [pc, #460]	; (800208c <HAL_RCC_OscConfig+0x4d8>)
 8001ebe:	f043 0301 	orr.w	r3, r3, #1
 8001ec2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ec4:	e00b      	b.n	8001ede <HAL_RCC_OscConfig+0x32a>
 8001ec6:	4b71      	ldr	r3, [pc, #452]	; (800208c <HAL_RCC_OscConfig+0x4d8>)
 8001ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eca:	4a70      	ldr	r2, [pc, #448]	; (800208c <HAL_RCC_OscConfig+0x4d8>)
 8001ecc:	f023 0301 	bic.w	r3, r3, #1
 8001ed0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ed2:	4b6e      	ldr	r3, [pc, #440]	; (800208c <HAL_RCC_OscConfig+0x4d8>)
 8001ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed6:	4a6d      	ldr	r2, [pc, #436]	; (800208c <HAL_RCC_OscConfig+0x4d8>)
 8001ed8:	f023 0304 	bic.w	r3, r3, #4
 8001edc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d015      	beq.n	8001f12 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee6:	f7ff f82f 	bl	8000f48 <HAL_GetTick>
 8001eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eec:	e00a      	b.n	8001f04 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eee:	f7ff f82b 	bl	8000f48 <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e0bc      	b.n	800207e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f04:	4b61      	ldr	r3, [pc, #388]	; (800208c <HAL_RCC_OscConfig+0x4d8>)
 8001f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d0ee      	beq.n	8001eee <HAL_RCC_OscConfig+0x33a>
 8001f10:	e014      	b.n	8001f3c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f12:	f7ff f819 	bl	8000f48 <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f18:	e00a      	b.n	8001f30 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f1a:	f7ff f815 	bl	8000f48 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e0a6      	b.n	800207e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f30:	4b56      	ldr	r3, [pc, #344]	; (800208c <HAL_RCC_OscConfig+0x4d8>)
 8001f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1ee      	bne.n	8001f1a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f3c:	7dfb      	ldrb	r3, [r7, #23]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d105      	bne.n	8001f4e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f42:	4b52      	ldr	r3, [pc, #328]	; (800208c <HAL_RCC_OscConfig+0x4d8>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	4a51      	ldr	r2, [pc, #324]	; (800208c <HAL_RCC_OscConfig+0x4d8>)
 8001f48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f4c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f000 8092 	beq.w	800207c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f58:	4b4c      	ldr	r3, [pc, #304]	; (800208c <HAL_RCC_OscConfig+0x4d8>)
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f003 030c 	and.w	r3, r3, #12
 8001f60:	2b08      	cmp	r3, #8
 8001f62:	d05c      	beq.n	800201e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d141      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f6c:	4b48      	ldr	r3, [pc, #288]	; (8002090 <HAL_RCC_OscConfig+0x4dc>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f72:	f7fe ffe9 	bl	8000f48 <HAL_GetTick>
 8001f76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f78:	e008      	b.n	8001f8c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f7a:	f7fe ffe5 	bl	8000f48 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e078      	b.n	800207e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f8c:	4b3f      	ldr	r3, [pc, #252]	; (800208c <HAL_RCC_OscConfig+0x4d8>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d1f0      	bne.n	8001f7a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	69da      	ldr	r2, [r3, #28]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	431a      	orrs	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa6:	019b      	lsls	r3, r3, #6
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fae:	085b      	lsrs	r3, r3, #1
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	041b      	lsls	r3, r3, #16
 8001fb4:	431a      	orrs	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fba:	061b      	lsls	r3, r3, #24
 8001fbc:	4933      	ldr	r1, [pc, #204]	; (800208c <HAL_RCC_OscConfig+0x4d8>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fc2:	4b33      	ldr	r3, [pc, #204]	; (8002090 <HAL_RCC_OscConfig+0x4dc>)
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc8:	f7fe ffbe 	bl	8000f48 <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fd0:	f7fe ffba 	bl	8000f48 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e04d      	b.n	800207e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fe2:	4b2a      	ldr	r3, [pc, #168]	; (800208c <HAL_RCC_OscConfig+0x4d8>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d0f0      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x41c>
 8001fee:	e045      	b.n	800207c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ff0:	4b27      	ldr	r3, [pc, #156]	; (8002090 <HAL_RCC_OscConfig+0x4dc>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff6:	f7fe ffa7 	bl	8000f48 <HAL_GetTick>
 8001ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ffc:	e008      	b.n	8002010 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ffe:	f7fe ffa3 	bl	8000f48 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e036      	b.n	800207e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002010:	4b1e      	ldr	r3, [pc, #120]	; (800208c <HAL_RCC_OscConfig+0x4d8>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d1f0      	bne.n	8001ffe <HAL_RCC_OscConfig+0x44a>
 800201c:	e02e      	b.n	800207c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d101      	bne.n	800202a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e029      	b.n	800207e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800202a:	4b18      	ldr	r3, [pc, #96]	; (800208c <HAL_RCC_OscConfig+0x4d8>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	69db      	ldr	r3, [r3, #28]
 800203a:	429a      	cmp	r2, r3
 800203c:	d11c      	bne.n	8002078 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002048:	429a      	cmp	r2, r3
 800204a:	d115      	bne.n	8002078 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002052:	4013      	ands	r3, r2
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002058:	4293      	cmp	r3, r2
 800205a:	d10d      	bne.n	8002078 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002066:	429a      	cmp	r2, r3
 8002068:	d106      	bne.n	8002078 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002074:	429a      	cmp	r2, r3
 8002076:	d001      	beq.n	800207c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e000      	b.n	800207e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3718      	adds	r7, #24
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40007000 	.word	0x40007000
 800208c:	40023800 	.word	0x40023800
 8002090:	42470060 	.word	0x42470060

08002094 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d101      	bne.n	80020a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e0cc      	b.n	8002242 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020a8:	4b68      	ldr	r3, [pc, #416]	; (800224c <HAL_RCC_ClockConfig+0x1b8>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 030f 	and.w	r3, r3, #15
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d90c      	bls.n	80020d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020b6:	4b65      	ldr	r3, [pc, #404]	; (800224c <HAL_RCC_ClockConfig+0x1b8>)
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	b2d2      	uxtb	r2, r2
 80020bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020be:	4b63      	ldr	r3, [pc, #396]	; (800224c <HAL_RCC_ClockConfig+0x1b8>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d001      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e0b8      	b.n	8002242 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d020      	beq.n	800211e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0304 	and.w	r3, r3, #4
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d005      	beq.n	80020f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020e8:	4b59      	ldr	r3, [pc, #356]	; (8002250 <HAL_RCC_ClockConfig+0x1bc>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	4a58      	ldr	r2, [pc, #352]	; (8002250 <HAL_RCC_ClockConfig+0x1bc>)
 80020ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0308 	and.w	r3, r3, #8
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d005      	beq.n	800210c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002100:	4b53      	ldr	r3, [pc, #332]	; (8002250 <HAL_RCC_ClockConfig+0x1bc>)
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	4a52      	ldr	r2, [pc, #328]	; (8002250 <HAL_RCC_ClockConfig+0x1bc>)
 8002106:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800210a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800210c:	4b50      	ldr	r3, [pc, #320]	; (8002250 <HAL_RCC_ClockConfig+0x1bc>)
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	494d      	ldr	r1, [pc, #308]	; (8002250 <HAL_RCC_ClockConfig+0x1bc>)
 800211a:	4313      	orrs	r3, r2
 800211c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	2b00      	cmp	r3, #0
 8002128:	d044      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d107      	bne.n	8002142 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002132:	4b47      	ldr	r3, [pc, #284]	; (8002250 <HAL_RCC_ClockConfig+0x1bc>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d119      	bne.n	8002172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e07f      	b.n	8002242 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	2b02      	cmp	r3, #2
 8002148:	d003      	beq.n	8002152 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800214e:	2b03      	cmp	r3, #3
 8002150:	d107      	bne.n	8002162 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002152:	4b3f      	ldr	r3, [pc, #252]	; (8002250 <HAL_RCC_ClockConfig+0x1bc>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d109      	bne.n	8002172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e06f      	b.n	8002242 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002162:	4b3b      	ldr	r3, [pc, #236]	; (8002250 <HAL_RCC_ClockConfig+0x1bc>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e067      	b.n	8002242 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002172:	4b37      	ldr	r3, [pc, #220]	; (8002250 <HAL_RCC_ClockConfig+0x1bc>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f023 0203 	bic.w	r2, r3, #3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	4934      	ldr	r1, [pc, #208]	; (8002250 <HAL_RCC_ClockConfig+0x1bc>)
 8002180:	4313      	orrs	r3, r2
 8002182:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002184:	f7fe fee0 	bl	8000f48 <HAL_GetTick>
 8002188:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800218a:	e00a      	b.n	80021a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800218c:	f7fe fedc 	bl	8000f48 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	f241 3288 	movw	r2, #5000	; 0x1388
 800219a:	4293      	cmp	r3, r2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e04f      	b.n	8002242 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021a2:	4b2b      	ldr	r3, [pc, #172]	; (8002250 <HAL_RCC_ClockConfig+0x1bc>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 020c 	and.w	r2, r3, #12
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d1eb      	bne.n	800218c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021b4:	4b25      	ldr	r3, [pc, #148]	; (800224c <HAL_RCC_ClockConfig+0x1b8>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 030f 	and.w	r3, r3, #15
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d20c      	bcs.n	80021dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021c2:	4b22      	ldr	r3, [pc, #136]	; (800224c <HAL_RCC_ClockConfig+0x1b8>)
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	b2d2      	uxtb	r2, r2
 80021c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ca:	4b20      	ldr	r3, [pc, #128]	; (800224c <HAL_RCC_ClockConfig+0x1b8>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 030f 	and.w	r3, r3, #15
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d001      	beq.n	80021dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e032      	b.n	8002242 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d008      	beq.n	80021fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021e8:	4b19      	ldr	r3, [pc, #100]	; (8002250 <HAL_RCC_ClockConfig+0x1bc>)
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	4916      	ldr	r1, [pc, #88]	; (8002250 <HAL_RCC_ClockConfig+0x1bc>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0308 	and.w	r3, r3, #8
 8002202:	2b00      	cmp	r3, #0
 8002204:	d009      	beq.n	800221a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002206:	4b12      	ldr	r3, [pc, #72]	; (8002250 <HAL_RCC_ClockConfig+0x1bc>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	490e      	ldr	r1, [pc, #56]	; (8002250 <HAL_RCC_ClockConfig+0x1bc>)
 8002216:	4313      	orrs	r3, r2
 8002218:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800221a:	f000 f821 	bl	8002260 <HAL_RCC_GetSysClockFreq>
 800221e:	4601      	mov	r1, r0
 8002220:	4b0b      	ldr	r3, [pc, #44]	; (8002250 <HAL_RCC_ClockConfig+0x1bc>)
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	091b      	lsrs	r3, r3, #4
 8002226:	f003 030f 	and.w	r3, r3, #15
 800222a:	4a0a      	ldr	r2, [pc, #40]	; (8002254 <HAL_RCC_ClockConfig+0x1c0>)
 800222c:	5cd3      	ldrb	r3, [r2, r3]
 800222e:	fa21 f303 	lsr.w	r3, r1, r3
 8002232:	4a09      	ldr	r2, [pc, #36]	; (8002258 <HAL_RCC_ClockConfig+0x1c4>)
 8002234:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002236:	4b09      	ldr	r3, [pc, #36]	; (800225c <HAL_RCC_ClockConfig+0x1c8>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4618      	mov	r0, r3
 800223c:	f7fe fe40 	bl	8000ec0 <HAL_InitTick>

  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40023c00 	.word	0x40023c00
 8002250:	40023800 	.word	0x40023800
 8002254:	08004978 	.word	0x08004978
 8002258:	20000000 	.word	0x20000000
 800225c:	20000004 	.word	0x20000004

08002260 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002266:	2300      	movs	r3, #0
 8002268:	607b      	str	r3, [r7, #4]
 800226a:	2300      	movs	r3, #0
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	2300      	movs	r3, #0
 8002270:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002272:	2300      	movs	r3, #0
 8002274:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002276:	4b50      	ldr	r3, [pc, #320]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f003 030c 	and.w	r3, r3, #12
 800227e:	2b04      	cmp	r3, #4
 8002280:	d007      	beq.n	8002292 <HAL_RCC_GetSysClockFreq+0x32>
 8002282:	2b08      	cmp	r3, #8
 8002284:	d008      	beq.n	8002298 <HAL_RCC_GetSysClockFreq+0x38>
 8002286:	2b00      	cmp	r3, #0
 8002288:	f040 808d 	bne.w	80023a6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800228c:	4b4b      	ldr	r3, [pc, #300]	; (80023bc <HAL_RCC_GetSysClockFreq+0x15c>)
 800228e:	60bb      	str	r3, [r7, #8]
       break;
 8002290:	e08c      	b.n	80023ac <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002292:	4b4b      	ldr	r3, [pc, #300]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002294:	60bb      	str	r3, [r7, #8]
      break;
 8002296:	e089      	b.n	80023ac <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002298:	4b47      	ldr	r3, [pc, #284]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x158>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022a0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022a2:	4b45      	ldr	r3, [pc, #276]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x158>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d023      	beq.n	80022f6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022ae:	4b42      	ldr	r3, [pc, #264]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x158>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	099b      	lsrs	r3, r3, #6
 80022b4:	f04f 0400 	mov.w	r4, #0
 80022b8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80022bc:	f04f 0200 	mov.w	r2, #0
 80022c0:	ea03 0501 	and.w	r5, r3, r1
 80022c4:	ea04 0602 	and.w	r6, r4, r2
 80022c8:	4a3d      	ldr	r2, [pc, #244]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x160>)
 80022ca:	fb02 f106 	mul.w	r1, r2, r6
 80022ce:	2200      	movs	r2, #0
 80022d0:	fb02 f205 	mul.w	r2, r2, r5
 80022d4:	440a      	add	r2, r1
 80022d6:	493a      	ldr	r1, [pc, #232]	; (80023c0 <HAL_RCC_GetSysClockFreq+0x160>)
 80022d8:	fba5 0101 	umull	r0, r1, r5, r1
 80022dc:	1853      	adds	r3, r2, r1
 80022de:	4619      	mov	r1, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f04f 0400 	mov.w	r4, #0
 80022e6:	461a      	mov	r2, r3
 80022e8:	4623      	mov	r3, r4
 80022ea:	f7fd ffd1 	bl	8000290 <__aeabi_uldivmod>
 80022ee:	4603      	mov	r3, r0
 80022f0:	460c      	mov	r4, r1
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	e049      	b.n	800238a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022f6:	4b30      	ldr	r3, [pc, #192]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x158>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	099b      	lsrs	r3, r3, #6
 80022fc:	f04f 0400 	mov.w	r4, #0
 8002300:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002304:	f04f 0200 	mov.w	r2, #0
 8002308:	ea03 0501 	and.w	r5, r3, r1
 800230c:	ea04 0602 	and.w	r6, r4, r2
 8002310:	4629      	mov	r1, r5
 8002312:	4632      	mov	r2, r6
 8002314:	f04f 0300 	mov.w	r3, #0
 8002318:	f04f 0400 	mov.w	r4, #0
 800231c:	0154      	lsls	r4, r2, #5
 800231e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002322:	014b      	lsls	r3, r1, #5
 8002324:	4619      	mov	r1, r3
 8002326:	4622      	mov	r2, r4
 8002328:	1b49      	subs	r1, r1, r5
 800232a:	eb62 0206 	sbc.w	r2, r2, r6
 800232e:	f04f 0300 	mov.w	r3, #0
 8002332:	f04f 0400 	mov.w	r4, #0
 8002336:	0194      	lsls	r4, r2, #6
 8002338:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800233c:	018b      	lsls	r3, r1, #6
 800233e:	1a5b      	subs	r3, r3, r1
 8002340:	eb64 0402 	sbc.w	r4, r4, r2
 8002344:	f04f 0100 	mov.w	r1, #0
 8002348:	f04f 0200 	mov.w	r2, #0
 800234c:	00e2      	lsls	r2, r4, #3
 800234e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002352:	00d9      	lsls	r1, r3, #3
 8002354:	460b      	mov	r3, r1
 8002356:	4614      	mov	r4, r2
 8002358:	195b      	adds	r3, r3, r5
 800235a:	eb44 0406 	adc.w	r4, r4, r6
 800235e:	f04f 0100 	mov.w	r1, #0
 8002362:	f04f 0200 	mov.w	r2, #0
 8002366:	02a2      	lsls	r2, r4, #10
 8002368:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800236c:	0299      	lsls	r1, r3, #10
 800236e:	460b      	mov	r3, r1
 8002370:	4614      	mov	r4, r2
 8002372:	4618      	mov	r0, r3
 8002374:	4621      	mov	r1, r4
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f04f 0400 	mov.w	r4, #0
 800237c:	461a      	mov	r2, r3
 800237e:	4623      	mov	r3, r4
 8002380:	f7fd ff86 	bl	8000290 <__aeabi_uldivmod>
 8002384:	4603      	mov	r3, r0
 8002386:	460c      	mov	r4, r1
 8002388:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800238a:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x158>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	0c1b      	lsrs	r3, r3, #16
 8002390:	f003 0303 	and.w	r3, r3, #3
 8002394:	3301      	adds	r3, #1
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a2:	60bb      	str	r3, [r7, #8]
      break;
 80023a4:	e002      	b.n	80023ac <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023a6:	4b05      	ldr	r3, [pc, #20]	; (80023bc <HAL_RCC_GetSysClockFreq+0x15c>)
 80023a8:	60bb      	str	r3, [r7, #8]
      break;
 80023aa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023ac:	68bb      	ldr	r3, [r7, #8]
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3714      	adds	r7, #20
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023b6:	bf00      	nop
 80023b8:	40023800 	.word	0x40023800
 80023bc:	00f42400 	.word	0x00f42400
 80023c0:	017d7840 	.word	0x017d7840

080023c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023c8:	4b03      	ldr	r3, [pc, #12]	; (80023d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80023ca:	681b      	ldr	r3, [r3, #0]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	20000000 	.word	0x20000000

080023dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023e0:	f7ff fff0 	bl	80023c4 <HAL_RCC_GetHCLKFreq>
 80023e4:	4601      	mov	r1, r0
 80023e6:	4b05      	ldr	r3, [pc, #20]	; (80023fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	0a9b      	lsrs	r3, r3, #10
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	4a03      	ldr	r2, [pc, #12]	; (8002400 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023f2:	5cd3      	ldrb	r3, [r2, r3]
 80023f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40023800 	.word	0x40023800
 8002400:	08004988 	.word	0x08004988

08002404 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002408:	f7ff ffdc 	bl	80023c4 <HAL_RCC_GetHCLKFreq>
 800240c:	4601      	mov	r1, r0
 800240e:	4b05      	ldr	r3, [pc, #20]	; (8002424 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	0b5b      	lsrs	r3, r3, #13
 8002414:	f003 0307 	and.w	r3, r3, #7
 8002418:	4a03      	ldr	r2, [pc, #12]	; (8002428 <HAL_RCC_GetPCLK2Freq+0x24>)
 800241a:	5cd3      	ldrb	r3, [r2, r3]
 800241c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002420:	4618      	mov	r0, r3
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40023800 	.word	0x40023800
 8002428:	08004988 	.word	0x08004988

0800242c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e01d      	b.n	800247a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d106      	bne.n	8002458 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f7fe fbe8 	bl	8000c28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2202      	movs	r2, #2
 800245c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3304      	adds	r3, #4
 8002468:	4619      	mov	r1, r3
 800246a:	4610      	mov	r0, r2
 800246c:	f000 f9bc 	bl	80027e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d101      	bne.n	8002494 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e01d      	b.n	80024d0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b00      	cmp	r3, #0
 800249e:	d106      	bne.n	80024ae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 f815 	bl	80024d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2202      	movs	r2, #2
 80024b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	3304      	adds	r3, #4
 80024be:	4619      	mov	r1, r3
 80024c0:	4610      	mov	r0, r2
 80024c2:	f000 f991 	bl	80027e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d101      	bne.n	8002506 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002502:	2302      	movs	r3, #2
 8002504:	e0b4      	b.n	8002670 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2201      	movs	r2, #1
 800250a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2202      	movs	r2, #2
 8002512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b0c      	cmp	r3, #12
 800251a:	f200 809f 	bhi.w	800265c <HAL_TIM_PWM_ConfigChannel+0x170>
 800251e:	a201      	add	r2, pc, #4	; (adr r2, 8002524 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002524:	08002559 	.word	0x08002559
 8002528:	0800265d 	.word	0x0800265d
 800252c:	0800265d 	.word	0x0800265d
 8002530:	0800265d 	.word	0x0800265d
 8002534:	08002599 	.word	0x08002599
 8002538:	0800265d 	.word	0x0800265d
 800253c:	0800265d 	.word	0x0800265d
 8002540:	0800265d 	.word	0x0800265d
 8002544:	080025db 	.word	0x080025db
 8002548:	0800265d 	.word	0x0800265d
 800254c:	0800265d 	.word	0x0800265d
 8002550:	0800265d 	.word	0x0800265d
 8002554:	0800261b 	.word	0x0800261b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68b9      	ldr	r1, [r7, #8]
 800255e:	4618      	mov	r0, r3
 8002560:	f000 f9e2 	bl	8002928 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	699a      	ldr	r2, [r3, #24]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f042 0208 	orr.w	r2, r2, #8
 8002572:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	699a      	ldr	r2, [r3, #24]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f022 0204 	bic.w	r2, r2, #4
 8002582:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6999      	ldr	r1, [r3, #24]
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	691a      	ldr	r2, [r3, #16]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	430a      	orrs	r2, r1
 8002594:	619a      	str	r2, [r3, #24]
      break;
 8002596:	e062      	b.n	800265e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68b9      	ldr	r1, [r7, #8]
 800259e:	4618      	mov	r0, r3
 80025a0:	f000 fa32 	bl	8002a08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	699a      	ldr	r2, [r3, #24]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	699a      	ldr	r2, [r3, #24]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6999      	ldr	r1, [r3, #24]
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	021a      	lsls	r2, r3, #8
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	430a      	orrs	r2, r1
 80025d6:	619a      	str	r2, [r3, #24]
      break;
 80025d8:	e041      	b.n	800265e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68b9      	ldr	r1, [r7, #8]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f000 fa87 	bl	8002af4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	69da      	ldr	r2, [r3, #28]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f042 0208 	orr.w	r2, r2, #8
 80025f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	69da      	ldr	r2, [r3, #28]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 0204 	bic.w	r2, r2, #4
 8002604:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	69d9      	ldr	r1, [r3, #28]
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	691a      	ldr	r2, [r3, #16]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	430a      	orrs	r2, r1
 8002616:	61da      	str	r2, [r3, #28]
      break;
 8002618:	e021      	b.n	800265e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68b9      	ldr	r1, [r7, #8]
 8002620:	4618      	mov	r0, r3
 8002622:	f000 fadb 	bl	8002bdc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	69da      	ldr	r2, [r3, #28]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002634:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	69da      	ldr	r2, [r3, #28]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002644:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	69d9      	ldr	r1, [r3, #28]
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	021a      	lsls	r2, r3, #8
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	430a      	orrs	r2, r1
 8002658:	61da      	str	r2, [r3, #28]
      break;
 800265a:	e000      	b.n	800265e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800265c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002688:	2b01      	cmp	r3, #1
 800268a:	d101      	bne.n	8002690 <HAL_TIM_ConfigClockSource+0x18>
 800268c:	2302      	movs	r3, #2
 800268e:	e0a6      	b.n	80027de <HAL_TIM_ConfigClockSource+0x166>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2202      	movs	r2, #2
 800269c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80026ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026b6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2b40      	cmp	r3, #64	; 0x40
 80026c6:	d067      	beq.n	8002798 <HAL_TIM_ConfigClockSource+0x120>
 80026c8:	2b40      	cmp	r3, #64	; 0x40
 80026ca:	d80b      	bhi.n	80026e4 <HAL_TIM_ConfigClockSource+0x6c>
 80026cc:	2b10      	cmp	r3, #16
 80026ce:	d073      	beq.n	80027b8 <HAL_TIM_ConfigClockSource+0x140>
 80026d0:	2b10      	cmp	r3, #16
 80026d2:	d802      	bhi.n	80026da <HAL_TIM_ConfigClockSource+0x62>
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d06f      	beq.n	80027b8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80026d8:	e078      	b.n	80027cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80026da:	2b20      	cmp	r3, #32
 80026dc:	d06c      	beq.n	80027b8 <HAL_TIM_ConfigClockSource+0x140>
 80026de:	2b30      	cmp	r3, #48	; 0x30
 80026e0:	d06a      	beq.n	80027b8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80026e2:	e073      	b.n	80027cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80026e4:	2b70      	cmp	r3, #112	; 0x70
 80026e6:	d00d      	beq.n	8002704 <HAL_TIM_ConfigClockSource+0x8c>
 80026e8:	2b70      	cmp	r3, #112	; 0x70
 80026ea:	d804      	bhi.n	80026f6 <HAL_TIM_ConfigClockSource+0x7e>
 80026ec:	2b50      	cmp	r3, #80	; 0x50
 80026ee:	d033      	beq.n	8002758 <HAL_TIM_ConfigClockSource+0xe0>
 80026f0:	2b60      	cmp	r3, #96	; 0x60
 80026f2:	d041      	beq.n	8002778 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80026f4:	e06a      	b.n	80027cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80026f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026fa:	d066      	beq.n	80027ca <HAL_TIM_ConfigClockSource+0x152>
 80026fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002700:	d017      	beq.n	8002732 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002702:	e063      	b.n	80027cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6818      	ldr	r0, [r3, #0]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	6899      	ldr	r1, [r3, #8]
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	f000 fb32 	bl	8002d7c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002726:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	609a      	str	r2, [r3, #8]
      break;
 8002730:	e04c      	b.n	80027cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6818      	ldr	r0, [r3, #0]
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	6899      	ldr	r1, [r3, #8]
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	f000 fb1b 	bl	8002d7c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	689a      	ldr	r2, [r3, #8]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002754:	609a      	str	r2, [r3, #8]
      break;
 8002756:	e039      	b.n	80027cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6818      	ldr	r0, [r3, #0]
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	6859      	ldr	r1, [r3, #4]
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	461a      	mov	r2, r3
 8002766:	f000 fa8f 	bl	8002c88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2150      	movs	r1, #80	; 0x50
 8002770:	4618      	mov	r0, r3
 8002772:	f000 fae8 	bl	8002d46 <TIM_ITRx_SetConfig>
      break;
 8002776:	e029      	b.n	80027cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6818      	ldr	r0, [r3, #0]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	6859      	ldr	r1, [r3, #4]
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	461a      	mov	r2, r3
 8002786:	f000 faae 	bl	8002ce6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2160      	movs	r1, #96	; 0x60
 8002790:	4618      	mov	r0, r3
 8002792:	f000 fad8 	bl	8002d46 <TIM_ITRx_SetConfig>
      break;
 8002796:	e019      	b.n	80027cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6818      	ldr	r0, [r3, #0]
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	6859      	ldr	r1, [r3, #4]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	461a      	mov	r2, r3
 80027a6:	f000 fa6f 	bl	8002c88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2140      	movs	r1, #64	; 0x40
 80027b0:	4618      	mov	r0, r3
 80027b2:	f000 fac8 	bl	8002d46 <TIM_ITRx_SetConfig>
      break;
 80027b6:	e009      	b.n	80027cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4619      	mov	r1, r3
 80027c2:	4610      	mov	r0, r2
 80027c4:	f000 fabf 	bl	8002d46 <TIM_ITRx_SetConfig>
      break;
 80027c8:	e000      	b.n	80027cc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80027ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
	...

080027e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a40      	ldr	r2, [pc, #256]	; (80028fc <TIM_Base_SetConfig+0x114>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d013      	beq.n	8002828 <TIM_Base_SetConfig+0x40>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002806:	d00f      	beq.n	8002828 <TIM_Base_SetConfig+0x40>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a3d      	ldr	r2, [pc, #244]	; (8002900 <TIM_Base_SetConfig+0x118>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d00b      	beq.n	8002828 <TIM_Base_SetConfig+0x40>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a3c      	ldr	r2, [pc, #240]	; (8002904 <TIM_Base_SetConfig+0x11c>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d007      	beq.n	8002828 <TIM_Base_SetConfig+0x40>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a3b      	ldr	r2, [pc, #236]	; (8002908 <TIM_Base_SetConfig+0x120>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d003      	beq.n	8002828 <TIM_Base_SetConfig+0x40>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a3a      	ldr	r2, [pc, #232]	; (800290c <TIM_Base_SetConfig+0x124>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d108      	bne.n	800283a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800282e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	4313      	orrs	r3, r2
 8002838:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a2f      	ldr	r2, [pc, #188]	; (80028fc <TIM_Base_SetConfig+0x114>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d02b      	beq.n	800289a <TIM_Base_SetConfig+0xb2>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002848:	d027      	beq.n	800289a <TIM_Base_SetConfig+0xb2>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a2c      	ldr	r2, [pc, #176]	; (8002900 <TIM_Base_SetConfig+0x118>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d023      	beq.n	800289a <TIM_Base_SetConfig+0xb2>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a2b      	ldr	r2, [pc, #172]	; (8002904 <TIM_Base_SetConfig+0x11c>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d01f      	beq.n	800289a <TIM_Base_SetConfig+0xb2>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a2a      	ldr	r2, [pc, #168]	; (8002908 <TIM_Base_SetConfig+0x120>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d01b      	beq.n	800289a <TIM_Base_SetConfig+0xb2>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a29      	ldr	r2, [pc, #164]	; (800290c <TIM_Base_SetConfig+0x124>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d017      	beq.n	800289a <TIM_Base_SetConfig+0xb2>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a28      	ldr	r2, [pc, #160]	; (8002910 <TIM_Base_SetConfig+0x128>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d013      	beq.n	800289a <TIM_Base_SetConfig+0xb2>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a27      	ldr	r2, [pc, #156]	; (8002914 <TIM_Base_SetConfig+0x12c>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d00f      	beq.n	800289a <TIM_Base_SetConfig+0xb2>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a26      	ldr	r2, [pc, #152]	; (8002918 <TIM_Base_SetConfig+0x130>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d00b      	beq.n	800289a <TIM_Base_SetConfig+0xb2>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a25      	ldr	r2, [pc, #148]	; (800291c <TIM_Base_SetConfig+0x134>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d007      	beq.n	800289a <TIM_Base_SetConfig+0xb2>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a24      	ldr	r2, [pc, #144]	; (8002920 <TIM_Base_SetConfig+0x138>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d003      	beq.n	800289a <TIM_Base_SetConfig+0xb2>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a23      	ldr	r2, [pc, #140]	; (8002924 <TIM_Base_SetConfig+0x13c>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d108      	bne.n	80028ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	689a      	ldr	r2, [r3, #8]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a0a      	ldr	r2, [pc, #40]	; (80028fc <TIM_Base_SetConfig+0x114>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d003      	beq.n	80028e0 <TIM_Base_SetConfig+0xf8>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a0c      	ldr	r2, [pc, #48]	; (800290c <TIM_Base_SetConfig+0x124>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d103      	bne.n	80028e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	691a      	ldr	r2, [r3, #16]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	615a      	str	r2, [r3, #20]
}
 80028ee:	bf00      	nop
 80028f0:	3714      	adds	r7, #20
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	40010000 	.word	0x40010000
 8002900:	40000400 	.word	0x40000400
 8002904:	40000800 	.word	0x40000800
 8002908:	40000c00 	.word	0x40000c00
 800290c:	40010400 	.word	0x40010400
 8002910:	40014000 	.word	0x40014000
 8002914:	40014400 	.word	0x40014400
 8002918:	40014800 	.word	0x40014800
 800291c:	40001800 	.word	0x40001800
 8002920:	40001c00 	.word	0x40001c00
 8002924:	40002000 	.word	0x40002000

08002928 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002928:	b480      	push	{r7}
 800292a:	b087      	sub	sp, #28
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	f023 0201 	bic.w	r2, r3, #1
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f023 0303 	bic.w	r3, r3, #3
 800295e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	4313      	orrs	r3, r2
 8002968:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	f023 0302 	bic.w	r3, r3, #2
 8002970:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	4313      	orrs	r3, r2
 800297a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a20      	ldr	r2, [pc, #128]	; (8002a00 <TIM_OC1_SetConfig+0xd8>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d003      	beq.n	800298c <TIM_OC1_SetConfig+0x64>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a1f      	ldr	r2, [pc, #124]	; (8002a04 <TIM_OC1_SetConfig+0xdc>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d10c      	bne.n	80029a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	f023 0308 	bic.w	r3, r3, #8
 8002992:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	4313      	orrs	r3, r2
 800299c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	f023 0304 	bic.w	r3, r3, #4
 80029a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a15      	ldr	r2, [pc, #84]	; (8002a00 <TIM_OC1_SetConfig+0xd8>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d003      	beq.n	80029b6 <TIM_OC1_SetConfig+0x8e>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a14      	ldr	r2, [pc, #80]	; (8002a04 <TIM_OC1_SetConfig+0xdc>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d111      	bne.n	80029da <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80029c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685a      	ldr	r2, [r3, #4]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	621a      	str	r2, [r3, #32]
}
 80029f4:	bf00      	nop
 80029f6:	371c      	adds	r7, #28
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	40010000 	.word	0x40010000
 8002a04:	40010400 	.word	0x40010400

08002a08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b087      	sub	sp, #28
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	f023 0210 	bic.w	r2, r3, #16
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	021b      	lsls	r3, r3, #8
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	f023 0320 	bic.w	r3, r3, #32
 8002a52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	011b      	lsls	r3, r3, #4
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a22      	ldr	r2, [pc, #136]	; (8002aec <TIM_OC2_SetConfig+0xe4>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d003      	beq.n	8002a70 <TIM_OC2_SetConfig+0x68>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a21      	ldr	r2, [pc, #132]	; (8002af0 <TIM_OC2_SetConfig+0xe8>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d10d      	bne.n	8002a8c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	011b      	lsls	r3, r3, #4
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a17      	ldr	r2, [pc, #92]	; (8002aec <TIM_OC2_SetConfig+0xe4>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d003      	beq.n	8002a9c <TIM_OC2_SetConfig+0x94>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a16      	ldr	r2, [pc, #88]	; (8002af0 <TIM_OC2_SetConfig+0xe8>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d113      	bne.n	8002ac4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002aa2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	695b      	ldr	r3, [r3, #20]
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	621a      	str	r2, [r3, #32]
}
 8002ade:	bf00      	nop
 8002ae0:	371c      	adds	r7, #28
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	40010000 	.word	0x40010000
 8002af0:	40010400 	.word	0x40010400

08002af4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b087      	sub	sp, #28
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
 8002b0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f023 0303 	bic.w	r3, r3, #3
 8002b2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	021b      	lsls	r3, r3, #8
 8002b44:	697a      	ldr	r2, [r7, #20]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a21      	ldr	r2, [pc, #132]	; (8002bd4 <TIM_OC3_SetConfig+0xe0>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d003      	beq.n	8002b5a <TIM_OC3_SetConfig+0x66>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a20      	ldr	r2, [pc, #128]	; (8002bd8 <TIM_OC3_SetConfig+0xe4>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d10d      	bne.n	8002b76 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	021b      	lsls	r3, r3, #8
 8002b68:	697a      	ldr	r2, [r7, #20]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a16      	ldr	r2, [pc, #88]	; (8002bd4 <TIM_OC3_SetConfig+0xe0>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d003      	beq.n	8002b86 <TIM_OC3_SetConfig+0x92>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a15      	ldr	r2, [pc, #84]	; (8002bd8 <TIM_OC3_SetConfig+0xe4>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d113      	bne.n	8002bae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	011b      	lsls	r3, r3, #4
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	011b      	lsls	r3, r3, #4
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685a      	ldr	r2, [r3, #4]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	621a      	str	r2, [r3, #32]
}
 8002bc8:	bf00      	nop
 8002bca:	371c      	adds	r7, #28
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	40010000 	.word	0x40010000
 8002bd8:	40010400 	.word	0x40010400

08002bdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b087      	sub	sp, #28
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	69db      	ldr	r3, [r3, #28]
 8002c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	021b      	lsls	r3, r3, #8
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	031b      	lsls	r3, r3, #12
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a12      	ldr	r2, [pc, #72]	; (8002c80 <TIM_OC4_SetConfig+0xa4>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d003      	beq.n	8002c44 <TIM_OC4_SetConfig+0x68>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a11      	ldr	r2, [pc, #68]	; (8002c84 <TIM_OC4_SetConfig+0xa8>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d109      	bne.n	8002c58 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	695b      	ldr	r3, [r3, #20]
 8002c50:	019b      	lsls	r3, r3, #6
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	621a      	str	r2, [r3, #32]
}
 8002c72:	bf00      	nop
 8002c74:	371c      	adds	r7, #28
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	40010000 	.word	0x40010000
 8002c84:	40010400 	.word	0x40010400

08002c88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b087      	sub	sp, #28
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	f023 0201 	bic.w	r2, r3, #1
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	011b      	lsls	r3, r3, #4
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	f023 030a 	bic.w	r3, r3, #10
 8002cc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	621a      	str	r2, [r3, #32]
}
 8002cda:	bf00      	nop
 8002cdc:	371c      	adds	r7, #28
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr

08002ce6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b087      	sub	sp, #28
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	60f8      	str	r0, [r7, #12]
 8002cee:	60b9      	str	r1, [r7, #8]
 8002cf0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	f023 0210 	bic.w	r2, r3, #16
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	031b      	lsls	r3, r3, #12
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	011b      	lsls	r3, r3, #4
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	621a      	str	r2, [r3, #32]
}
 8002d3a:	bf00      	nop
 8002d3c:	371c      	adds	r7, #28
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d46:	b480      	push	{r7}
 8002d48:	b085      	sub	sp, #20
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
 8002d4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	f043 0307 	orr.w	r3, r3, #7
 8002d68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	609a      	str	r2, [r3, #8]
}
 8002d70:	bf00      	nop
 8002d72:	3714      	adds	r7, #20
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b087      	sub	sp, #28
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]
 8002d88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	021a      	lsls	r2, r3, #8
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	697a      	ldr	r2, [r7, #20]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	609a      	str	r2, [r3, #8]
}
 8002db0:	bf00      	nop
 8002db2:	371c      	adds	r7, #28
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d101      	bne.n	8002dd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	e05a      	b.n	8002e8a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2202      	movs	r2, #2
 8002de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a21      	ldr	r2, [pc, #132]	; (8002e98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d022      	beq.n	8002e5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e20:	d01d      	beq.n	8002e5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a1d      	ldr	r2, [pc, #116]	; (8002e9c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d018      	beq.n	8002e5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a1b      	ldr	r2, [pc, #108]	; (8002ea0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d013      	beq.n	8002e5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a1a      	ldr	r2, [pc, #104]	; (8002ea4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d00e      	beq.n	8002e5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a18      	ldr	r2, [pc, #96]	; (8002ea8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d009      	beq.n	8002e5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a17      	ldr	r2, [pc, #92]	; (8002eac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d004      	beq.n	8002e5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a15      	ldr	r2, [pc, #84]	; (8002eb0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d10c      	bne.n	8002e78 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68ba      	ldr	r2, [r7, #8]
 8002e76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3714      	adds	r7, #20
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	40010000 	.word	0x40010000
 8002e9c:	40000400 	.word	0x40000400
 8002ea0:	40000800 	.word	0x40000800
 8002ea4:	40000c00 	.word	0x40000c00
 8002ea8:	40010400 	.word	0x40010400
 8002eac:	40014000 	.word	0x40014000
 8002eb0:	40001800 	.word	0x40001800

08002eb4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d101      	bne.n	8002ed0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002ecc:	2302      	movs	r3, #2
 8002ece:	e03d      	b.n	8002f4c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3714      	adds	r7, #20
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e03f      	b.n	8002fea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d106      	bne.n	8002f84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7fd fed8 	bl	8000d34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2224      	movs	r2, #36	; 0x24
 8002f88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68da      	ldr	r2, [r3, #12]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 fa35 	bl	800340c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	691a      	ldr	r2, [r3, #16]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	695a      	ldr	r2, [r3, #20]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68da      	ldr	r2, [r3, #12]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2220      	movs	r2, #32
 8002fdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
	...

08002ff4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	4613      	mov	r3, r2
 8003000:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b20      	cmp	r3, #32
 800300c:	d153      	bne.n	80030b6 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d002      	beq.n	800301a <HAL_UART_Transmit_DMA+0x26>
 8003014:	88fb      	ldrh	r3, [r7, #6]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e04c      	b.n	80030b8 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003024:	2b01      	cmp	r3, #1
 8003026:	d101      	bne.n	800302c <HAL_UART_Transmit_DMA+0x38>
 8003028:	2302      	movs	r3, #2
 800302a:	e045      	b.n	80030b8 <HAL_UART_Transmit_DMA+0xc4>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8003034:	68ba      	ldr	r2, [r7, #8]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	88fa      	ldrh	r2, [r7, #6]
 800303e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	88fa      	ldrh	r2, [r7, #6]
 8003044:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2221      	movs	r2, #33	; 0x21
 8003050:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003058:	4a19      	ldr	r2, [pc, #100]	; (80030c0 <HAL_UART_Transmit_DMA+0xcc>)
 800305a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003060:	4a18      	ldr	r2, [pc, #96]	; (80030c4 <HAL_UART_Transmit_DMA+0xd0>)
 8003062:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003068:	4a17      	ldr	r2, [pc, #92]	; (80030c8 <HAL_UART_Transmit_DMA+0xd4>)
 800306a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003070:	2200      	movs	r2, #0
 8003072:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8003074:	f107 0308 	add.w	r3, r7, #8
 8003078:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	6819      	ldr	r1, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	3304      	adds	r3, #4
 8003088:	461a      	mov	r2, r3
 800308a:	88fb      	ldrh	r3, [r7, #6]
 800308c:	f7fe f928 	bl	80012e0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003098:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	695a      	ldr	r2, [r3, #20]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030b0:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80030b2:	2300      	movs	r3, #0
 80030b4:	e000      	b.n	80030b8 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80030b6:	2302      	movs	r3, #2
  }
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3718      	adds	r7, #24
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	0800321d 	.word	0x0800321d
 80030c4:	0800326f 	.word	0x0800326f
 80030c8:	0800330f 	.word	0x0800330f

080030cc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	4613      	mov	r3, r2
 80030d8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b20      	cmp	r3, #32
 80030e4:	d166      	bne.n	80031b4 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d002      	beq.n	80030f2 <HAL_UART_Receive_DMA+0x26>
 80030ec:	88fb      	ldrh	r3, [r7, #6]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e05f      	b.n	80031b6 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d101      	bne.n	8003104 <HAL_UART_Receive_DMA+0x38>
 8003100:	2302      	movs	r3, #2
 8003102:	e058      	b.n	80031b6 <HAL_UART_Receive_DMA+0xea>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800310c:	68ba      	ldr	r2, [r7, #8]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	88fa      	ldrh	r2, [r7, #6]
 8003116:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2222      	movs	r2, #34	; 0x22
 8003122:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800312a:	4a25      	ldr	r2, [pc, #148]	; (80031c0 <HAL_UART_Receive_DMA+0xf4>)
 800312c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003132:	4a24      	ldr	r2, [pc, #144]	; (80031c4 <HAL_UART_Receive_DMA+0xf8>)
 8003134:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800313a:	4a23      	ldr	r2, [pc, #140]	; (80031c8 <HAL_UART_Receive_DMA+0xfc>)
 800313c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003142:	2200      	movs	r2, #0
 8003144:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8003146:	f107 0308 	add.w	r3, r7, #8
 800314a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	3304      	adds	r3, #4
 8003156:	4619      	mov	r1, r3
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	88fb      	ldrh	r3, [r7, #6]
 800315e:	f7fe f8bf 	bl	80012e0 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003162:	2300      	movs	r3, #0
 8003164:	613b      	str	r3, [r7, #16]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	613b      	str	r3, [r7, #16]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	613b      	str	r3, [r7, #16]
 8003176:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68da      	ldr	r2, [r3, #12]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800318e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	695a      	ldr	r2, [r3, #20]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f042 0201 	orr.w	r2, r2, #1
 800319e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	695a      	ldr	r2, [r3, #20]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031ae:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80031b0:	2300      	movs	r3, #0
 80031b2:	e000      	b.n	80031b6 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80031b4:	2302      	movs	r3, #2
  }
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3718      	adds	r7, #24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	0800328b 	.word	0x0800328b
 80031c4:	080032f3 	.word	0x080032f3
 80031c8:	0800330f 	.word	0x0800330f

080031cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003228:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003234:	2b00      	cmp	r3, #0
 8003236:	d113      	bne.n	8003260 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	695a      	ldr	r2, [r3, #20]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800324c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68da      	ldr	r2, [r3, #12]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800325c:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800325e:	e002      	b.n	8003266 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8003260:	68f8      	ldr	r0, [r7, #12]
 8003262:	f7ff ffb3 	bl	80031cc <HAL_UART_TxCpltCallback>
}
 8003266:	bf00      	nop
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800326e:	b580      	push	{r7, lr}
 8003270:	b084      	sub	sp, #16
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800327c:	68f8      	ldr	r0, [r7, #12]
 800327e:	f7ff ffaf 	bl	80031e0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003282:	bf00      	nop
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b084      	sub	sp, #16
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003296:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d11e      	bne.n	80032e4 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68da      	ldr	r2, [r3, #12]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032ba:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	695a      	ldr	r2, [r3, #20]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 0201 	bic.w	r2, r2, #1
 80032ca:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	695a      	ldr	r2, [r3, #20]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032da:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2220      	movs	r2, #32
 80032e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f7fd fac5 	bl	8000874 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80032ea:	bf00      	nop
 80032ec:	3710      	adds	r7, #16
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b084      	sub	sp, #16
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fe:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	f7ff ff77 	bl	80031f4 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003306:	bf00      	nop
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b084      	sub	sp, #16
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003316:	2300      	movs	r3, #0
 8003318:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800332a:	2b80      	cmp	r3, #128	; 0x80
 800332c:	bf0c      	ite	eq
 800332e:	2301      	moveq	r3, #1
 8003330:	2300      	movne	r3, #0
 8003332:	b2db      	uxtb	r3, r3
 8003334:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b21      	cmp	r3, #33	; 0x21
 8003340:	d108      	bne.n	8003354 <UART_DMAError+0x46>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d005      	beq.n	8003354 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	2200      	movs	r2, #0
 800334c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800334e:	68b8      	ldr	r0, [r7, #8]
 8003350:	f000 f827 	bl	80033a2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335e:	2b40      	cmp	r3, #64	; 0x40
 8003360:	bf0c      	ite	eq
 8003362:	2301      	moveq	r3, #1
 8003364:	2300      	movne	r3, #0
 8003366:	b2db      	uxtb	r3, r3
 8003368:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b22      	cmp	r3, #34	; 0x22
 8003374:	d108      	bne.n	8003388 <UART_DMAError+0x7a>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d005      	beq.n	8003388 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	2200      	movs	r2, #0
 8003380:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003382:	68b8      	ldr	r0, [r7, #8]
 8003384:	f000 f823 	bl	80033ce <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800338c:	f043 0210 	orr.w	r2, r3, #16
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003394:	68b8      	ldr	r0, [r7, #8]
 8003396:	f7ff ff37 	bl	8003208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800339a:	bf00      	nop
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b083      	sub	sp, #12
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68da      	ldr	r2, [r3, #12]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80033b8:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2220      	movs	r2, #32
 80033be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80033c2:	bf00      	nop
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr

080033ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033ce:	b480      	push	{r7}
 80033d0:	b083      	sub	sp, #12
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68da      	ldr	r2, [r3, #12]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80033e4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	695a      	ldr	r2, [r3, #20]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 0201 	bic.w	r2, r2, #1
 80033f4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2220      	movs	r2, #32
 80033fa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80033fe:	bf00      	nop
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
	...

0800340c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800340c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003410:	b085      	sub	sp, #20
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	68da      	ldr	r2, [r3, #12]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	430a      	orrs	r2, r1
 800342a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	689a      	ldr	r2, [r3, #8]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	431a      	orrs	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	431a      	orrs	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	69db      	ldr	r3, [r3, #28]
 8003440:	4313      	orrs	r3, r2
 8003442:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800344e:	f023 030c 	bic.w	r3, r3, #12
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	6812      	ldr	r2, [r2, #0]
 8003456:	68f9      	ldr	r1, [r7, #12]
 8003458:	430b      	orrs	r3, r1
 800345a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	699a      	ldr	r2, [r3, #24]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	430a      	orrs	r2, r1
 8003470:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	69db      	ldr	r3, [r3, #28]
 8003476:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800347a:	f040 818b 	bne.w	8003794 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4ac1      	ldr	r2, [pc, #772]	; (8003788 <UART_SetConfig+0x37c>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d005      	beq.n	8003494 <UART_SetConfig+0x88>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4abf      	ldr	r2, [pc, #764]	; (800378c <UART_SetConfig+0x380>)
 800348e:	4293      	cmp	r3, r2
 8003490:	f040 80bd 	bne.w	800360e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003494:	f7fe ffb6 	bl	8002404 <HAL_RCC_GetPCLK2Freq>
 8003498:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	461d      	mov	r5, r3
 800349e:	f04f 0600 	mov.w	r6, #0
 80034a2:	46a8      	mov	r8, r5
 80034a4:	46b1      	mov	r9, r6
 80034a6:	eb18 0308 	adds.w	r3, r8, r8
 80034aa:	eb49 0409 	adc.w	r4, r9, r9
 80034ae:	4698      	mov	r8, r3
 80034b0:	46a1      	mov	r9, r4
 80034b2:	eb18 0805 	adds.w	r8, r8, r5
 80034b6:	eb49 0906 	adc.w	r9, r9, r6
 80034ba:	f04f 0100 	mov.w	r1, #0
 80034be:	f04f 0200 	mov.w	r2, #0
 80034c2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80034c6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80034ca:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80034ce:	4688      	mov	r8, r1
 80034d0:	4691      	mov	r9, r2
 80034d2:	eb18 0005 	adds.w	r0, r8, r5
 80034d6:	eb49 0106 	adc.w	r1, r9, r6
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	461d      	mov	r5, r3
 80034e0:	f04f 0600 	mov.w	r6, #0
 80034e4:	196b      	adds	r3, r5, r5
 80034e6:	eb46 0406 	adc.w	r4, r6, r6
 80034ea:	461a      	mov	r2, r3
 80034ec:	4623      	mov	r3, r4
 80034ee:	f7fc fecf 	bl	8000290 <__aeabi_uldivmod>
 80034f2:	4603      	mov	r3, r0
 80034f4:	460c      	mov	r4, r1
 80034f6:	461a      	mov	r2, r3
 80034f8:	4ba5      	ldr	r3, [pc, #660]	; (8003790 <UART_SetConfig+0x384>)
 80034fa:	fba3 2302 	umull	r2, r3, r3, r2
 80034fe:	095b      	lsrs	r3, r3, #5
 8003500:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	461d      	mov	r5, r3
 8003508:	f04f 0600 	mov.w	r6, #0
 800350c:	46a9      	mov	r9, r5
 800350e:	46b2      	mov	sl, r6
 8003510:	eb19 0309 	adds.w	r3, r9, r9
 8003514:	eb4a 040a 	adc.w	r4, sl, sl
 8003518:	4699      	mov	r9, r3
 800351a:	46a2      	mov	sl, r4
 800351c:	eb19 0905 	adds.w	r9, r9, r5
 8003520:	eb4a 0a06 	adc.w	sl, sl, r6
 8003524:	f04f 0100 	mov.w	r1, #0
 8003528:	f04f 0200 	mov.w	r2, #0
 800352c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003530:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003534:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003538:	4689      	mov	r9, r1
 800353a:	4692      	mov	sl, r2
 800353c:	eb19 0005 	adds.w	r0, r9, r5
 8003540:	eb4a 0106 	adc.w	r1, sl, r6
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	461d      	mov	r5, r3
 800354a:	f04f 0600 	mov.w	r6, #0
 800354e:	196b      	adds	r3, r5, r5
 8003550:	eb46 0406 	adc.w	r4, r6, r6
 8003554:	461a      	mov	r2, r3
 8003556:	4623      	mov	r3, r4
 8003558:	f7fc fe9a 	bl	8000290 <__aeabi_uldivmod>
 800355c:	4603      	mov	r3, r0
 800355e:	460c      	mov	r4, r1
 8003560:	461a      	mov	r2, r3
 8003562:	4b8b      	ldr	r3, [pc, #556]	; (8003790 <UART_SetConfig+0x384>)
 8003564:	fba3 1302 	umull	r1, r3, r3, r2
 8003568:	095b      	lsrs	r3, r3, #5
 800356a:	2164      	movs	r1, #100	; 0x64
 800356c:	fb01 f303 	mul.w	r3, r1, r3
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	3332      	adds	r3, #50	; 0x32
 8003576:	4a86      	ldr	r2, [pc, #536]	; (8003790 <UART_SetConfig+0x384>)
 8003578:	fba2 2303 	umull	r2, r3, r2, r3
 800357c:	095b      	lsrs	r3, r3, #5
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003584:	4498      	add	r8, r3
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	461d      	mov	r5, r3
 800358a:	f04f 0600 	mov.w	r6, #0
 800358e:	46a9      	mov	r9, r5
 8003590:	46b2      	mov	sl, r6
 8003592:	eb19 0309 	adds.w	r3, r9, r9
 8003596:	eb4a 040a 	adc.w	r4, sl, sl
 800359a:	4699      	mov	r9, r3
 800359c:	46a2      	mov	sl, r4
 800359e:	eb19 0905 	adds.w	r9, r9, r5
 80035a2:	eb4a 0a06 	adc.w	sl, sl, r6
 80035a6:	f04f 0100 	mov.w	r1, #0
 80035aa:	f04f 0200 	mov.w	r2, #0
 80035ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80035b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80035ba:	4689      	mov	r9, r1
 80035bc:	4692      	mov	sl, r2
 80035be:	eb19 0005 	adds.w	r0, r9, r5
 80035c2:	eb4a 0106 	adc.w	r1, sl, r6
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	461d      	mov	r5, r3
 80035cc:	f04f 0600 	mov.w	r6, #0
 80035d0:	196b      	adds	r3, r5, r5
 80035d2:	eb46 0406 	adc.w	r4, r6, r6
 80035d6:	461a      	mov	r2, r3
 80035d8:	4623      	mov	r3, r4
 80035da:	f7fc fe59 	bl	8000290 <__aeabi_uldivmod>
 80035de:	4603      	mov	r3, r0
 80035e0:	460c      	mov	r4, r1
 80035e2:	461a      	mov	r2, r3
 80035e4:	4b6a      	ldr	r3, [pc, #424]	; (8003790 <UART_SetConfig+0x384>)
 80035e6:	fba3 1302 	umull	r1, r3, r3, r2
 80035ea:	095b      	lsrs	r3, r3, #5
 80035ec:	2164      	movs	r1, #100	; 0x64
 80035ee:	fb01 f303 	mul.w	r3, r1, r3
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	3332      	adds	r3, #50	; 0x32
 80035f8:	4a65      	ldr	r2, [pc, #404]	; (8003790 <UART_SetConfig+0x384>)
 80035fa:	fba2 2303 	umull	r2, r3, r2, r3
 80035fe:	095b      	lsrs	r3, r3, #5
 8003600:	f003 0207 	and.w	r2, r3, #7
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4442      	add	r2, r8
 800360a:	609a      	str	r2, [r3, #8]
 800360c:	e26f      	b.n	8003aee <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800360e:	f7fe fee5 	bl	80023dc <HAL_RCC_GetPCLK1Freq>
 8003612:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	461d      	mov	r5, r3
 8003618:	f04f 0600 	mov.w	r6, #0
 800361c:	46a8      	mov	r8, r5
 800361e:	46b1      	mov	r9, r6
 8003620:	eb18 0308 	adds.w	r3, r8, r8
 8003624:	eb49 0409 	adc.w	r4, r9, r9
 8003628:	4698      	mov	r8, r3
 800362a:	46a1      	mov	r9, r4
 800362c:	eb18 0805 	adds.w	r8, r8, r5
 8003630:	eb49 0906 	adc.w	r9, r9, r6
 8003634:	f04f 0100 	mov.w	r1, #0
 8003638:	f04f 0200 	mov.w	r2, #0
 800363c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003640:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003644:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003648:	4688      	mov	r8, r1
 800364a:	4691      	mov	r9, r2
 800364c:	eb18 0005 	adds.w	r0, r8, r5
 8003650:	eb49 0106 	adc.w	r1, r9, r6
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	461d      	mov	r5, r3
 800365a:	f04f 0600 	mov.w	r6, #0
 800365e:	196b      	adds	r3, r5, r5
 8003660:	eb46 0406 	adc.w	r4, r6, r6
 8003664:	461a      	mov	r2, r3
 8003666:	4623      	mov	r3, r4
 8003668:	f7fc fe12 	bl	8000290 <__aeabi_uldivmod>
 800366c:	4603      	mov	r3, r0
 800366e:	460c      	mov	r4, r1
 8003670:	461a      	mov	r2, r3
 8003672:	4b47      	ldr	r3, [pc, #284]	; (8003790 <UART_SetConfig+0x384>)
 8003674:	fba3 2302 	umull	r2, r3, r3, r2
 8003678:	095b      	lsrs	r3, r3, #5
 800367a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	461d      	mov	r5, r3
 8003682:	f04f 0600 	mov.w	r6, #0
 8003686:	46a9      	mov	r9, r5
 8003688:	46b2      	mov	sl, r6
 800368a:	eb19 0309 	adds.w	r3, r9, r9
 800368e:	eb4a 040a 	adc.w	r4, sl, sl
 8003692:	4699      	mov	r9, r3
 8003694:	46a2      	mov	sl, r4
 8003696:	eb19 0905 	adds.w	r9, r9, r5
 800369a:	eb4a 0a06 	adc.w	sl, sl, r6
 800369e:	f04f 0100 	mov.w	r1, #0
 80036a2:	f04f 0200 	mov.w	r2, #0
 80036a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80036ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80036b2:	4689      	mov	r9, r1
 80036b4:	4692      	mov	sl, r2
 80036b6:	eb19 0005 	adds.w	r0, r9, r5
 80036ba:	eb4a 0106 	adc.w	r1, sl, r6
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	461d      	mov	r5, r3
 80036c4:	f04f 0600 	mov.w	r6, #0
 80036c8:	196b      	adds	r3, r5, r5
 80036ca:	eb46 0406 	adc.w	r4, r6, r6
 80036ce:	461a      	mov	r2, r3
 80036d0:	4623      	mov	r3, r4
 80036d2:	f7fc fddd 	bl	8000290 <__aeabi_uldivmod>
 80036d6:	4603      	mov	r3, r0
 80036d8:	460c      	mov	r4, r1
 80036da:	461a      	mov	r2, r3
 80036dc:	4b2c      	ldr	r3, [pc, #176]	; (8003790 <UART_SetConfig+0x384>)
 80036de:	fba3 1302 	umull	r1, r3, r3, r2
 80036e2:	095b      	lsrs	r3, r3, #5
 80036e4:	2164      	movs	r1, #100	; 0x64
 80036e6:	fb01 f303 	mul.w	r3, r1, r3
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	00db      	lsls	r3, r3, #3
 80036ee:	3332      	adds	r3, #50	; 0x32
 80036f0:	4a27      	ldr	r2, [pc, #156]	; (8003790 <UART_SetConfig+0x384>)
 80036f2:	fba2 2303 	umull	r2, r3, r2, r3
 80036f6:	095b      	lsrs	r3, r3, #5
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80036fe:	4498      	add	r8, r3
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	461d      	mov	r5, r3
 8003704:	f04f 0600 	mov.w	r6, #0
 8003708:	46a9      	mov	r9, r5
 800370a:	46b2      	mov	sl, r6
 800370c:	eb19 0309 	adds.w	r3, r9, r9
 8003710:	eb4a 040a 	adc.w	r4, sl, sl
 8003714:	4699      	mov	r9, r3
 8003716:	46a2      	mov	sl, r4
 8003718:	eb19 0905 	adds.w	r9, r9, r5
 800371c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003720:	f04f 0100 	mov.w	r1, #0
 8003724:	f04f 0200 	mov.w	r2, #0
 8003728:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800372c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003730:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003734:	4689      	mov	r9, r1
 8003736:	4692      	mov	sl, r2
 8003738:	eb19 0005 	adds.w	r0, r9, r5
 800373c:	eb4a 0106 	adc.w	r1, sl, r6
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	461d      	mov	r5, r3
 8003746:	f04f 0600 	mov.w	r6, #0
 800374a:	196b      	adds	r3, r5, r5
 800374c:	eb46 0406 	adc.w	r4, r6, r6
 8003750:	461a      	mov	r2, r3
 8003752:	4623      	mov	r3, r4
 8003754:	f7fc fd9c 	bl	8000290 <__aeabi_uldivmod>
 8003758:	4603      	mov	r3, r0
 800375a:	460c      	mov	r4, r1
 800375c:	461a      	mov	r2, r3
 800375e:	4b0c      	ldr	r3, [pc, #48]	; (8003790 <UART_SetConfig+0x384>)
 8003760:	fba3 1302 	umull	r1, r3, r3, r2
 8003764:	095b      	lsrs	r3, r3, #5
 8003766:	2164      	movs	r1, #100	; 0x64
 8003768:	fb01 f303 	mul.w	r3, r1, r3
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	3332      	adds	r3, #50	; 0x32
 8003772:	4a07      	ldr	r2, [pc, #28]	; (8003790 <UART_SetConfig+0x384>)
 8003774:	fba2 2303 	umull	r2, r3, r2, r3
 8003778:	095b      	lsrs	r3, r3, #5
 800377a:	f003 0207 	and.w	r2, r3, #7
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4442      	add	r2, r8
 8003784:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003786:	e1b2      	b.n	8003aee <UART_SetConfig+0x6e2>
 8003788:	40011000 	.word	0x40011000
 800378c:	40011400 	.word	0x40011400
 8003790:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4ad7      	ldr	r2, [pc, #860]	; (8003af8 <UART_SetConfig+0x6ec>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d005      	beq.n	80037aa <UART_SetConfig+0x39e>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4ad6      	ldr	r2, [pc, #856]	; (8003afc <UART_SetConfig+0x6f0>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	f040 80d1 	bne.w	800394c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80037aa:	f7fe fe2b 	bl	8002404 <HAL_RCC_GetPCLK2Freq>
 80037ae:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	469a      	mov	sl, r3
 80037b4:	f04f 0b00 	mov.w	fp, #0
 80037b8:	46d0      	mov	r8, sl
 80037ba:	46d9      	mov	r9, fp
 80037bc:	eb18 0308 	adds.w	r3, r8, r8
 80037c0:	eb49 0409 	adc.w	r4, r9, r9
 80037c4:	4698      	mov	r8, r3
 80037c6:	46a1      	mov	r9, r4
 80037c8:	eb18 080a 	adds.w	r8, r8, sl
 80037cc:	eb49 090b 	adc.w	r9, r9, fp
 80037d0:	f04f 0100 	mov.w	r1, #0
 80037d4:	f04f 0200 	mov.w	r2, #0
 80037d8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80037dc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80037e0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80037e4:	4688      	mov	r8, r1
 80037e6:	4691      	mov	r9, r2
 80037e8:	eb1a 0508 	adds.w	r5, sl, r8
 80037ec:	eb4b 0609 	adc.w	r6, fp, r9
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	4619      	mov	r1, r3
 80037f6:	f04f 0200 	mov.w	r2, #0
 80037fa:	f04f 0300 	mov.w	r3, #0
 80037fe:	f04f 0400 	mov.w	r4, #0
 8003802:	0094      	lsls	r4, r2, #2
 8003804:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003808:	008b      	lsls	r3, r1, #2
 800380a:	461a      	mov	r2, r3
 800380c:	4623      	mov	r3, r4
 800380e:	4628      	mov	r0, r5
 8003810:	4631      	mov	r1, r6
 8003812:	f7fc fd3d 	bl	8000290 <__aeabi_uldivmod>
 8003816:	4603      	mov	r3, r0
 8003818:	460c      	mov	r4, r1
 800381a:	461a      	mov	r2, r3
 800381c:	4bb8      	ldr	r3, [pc, #736]	; (8003b00 <UART_SetConfig+0x6f4>)
 800381e:	fba3 2302 	umull	r2, r3, r3, r2
 8003822:	095b      	lsrs	r3, r3, #5
 8003824:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	469b      	mov	fp, r3
 800382c:	f04f 0c00 	mov.w	ip, #0
 8003830:	46d9      	mov	r9, fp
 8003832:	46e2      	mov	sl, ip
 8003834:	eb19 0309 	adds.w	r3, r9, r9
 8003838:	eb4a 040a 	adc.w	r4, sl, sl
 800383c:	4699      	mov	r9, r3
 800383e:	46a2      	mov	sl, r4
 8003840:	eb19 090b 	adds.w	r9, r9, fp
 8003844:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003848:	f04f 0100 	mov.w	r1, #0
 800384c:	f04f 0200 	mov.w	r2, #0
 8003850:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003854:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003858:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800385c:	4689      	mov	r9, r1
 800385e:	4692      	mov	sl, r2
 8003860:	eb1b 0509 	adds.w	r5, fp, r9
 8003864:	eb4c 060a 	adc.w	r6, ip, sl
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	4619      	mov	r1, r3
 800386e:	f04f 0200 	mov.w	r2, #0
 8003872:	f04f 0300 	mov.w	r3, #0
 8003876:	f04f 0400 	mov.w	r4, #0
 800387a:	0094      	lsls	r4, r2, #2
 800387c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003880:	008b      	lsls	r3, r1, #2
 8003882:	461a      	mov	r2, r3
 8003884:	4623      	mov	r3, r4
 8003886:	4628      	mov	r0, r5
 8003888:	4631      	mov	r1, r6
 800388a:	f7fc fd01 	bl	8000290 <__aeabi_uldivmod>
 800388e:	4603      	mov	r3, r0
 8003890:	460c      	mov	r4, r1
 8003892:	461a      	mov	r2, r3
 8003894:	4b9a      	ldr	r3, [pc, #616]	; (8003b00 <UART_SetConfig+0x6f4>)
 8003896:	fba3 1302 	umull	r1, r3, r3, r2
 800389a:	095b      	lsrs	r3, r3, #5
 800389c:	2164      	movs	r1, #100	; 0x64
 800389e:	fb01 f303 	mul.w	r3, r1, r3
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	011b      	lsls	r3, r3, #4
 80038a6:	3332      	adds	r3, #50	; 0x32
 80038a8:	4a95      	ldr	r2, [pc, #596]	; (8003b00 <UART_SetConfig+0x6f4>)
 80038aa:	fba2 2303 	umull	r2, r3, r2, r3
 80038ae:	095b      	lsrs	r3, r3, #5
 80038b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038b4:	4498      	add	r8, r3
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	469b      	mov	fp, r3
 80038ba:	f04f 0c00 	mov.w	ip, #0
 80038be:	46d9      	mov	r9, fp
 80038c0:	46e2      	mov	sl, ip
 80038c2:	eb19 0309 	adds.w	r3, r9, r9
 80038c6:	eb4a 040a 	adc.w	r4, sl, sl
 80038ca:	4699      	mov	r9, r3
 80038cc:	46a2      	mov	sl, r4
 80038ce:	eb19 090b 	adds.w	r9, r9, fp
 80038d2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80038d6:	f04f 0100 	mov.w	r1, #0
 80038da:	f04f 0200 	mov.w	r2, #0
 80038de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038e2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80038e6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80038ea:	4689      	mov	r9, r1
 80038ec:	4692      	mov	sl, r2
 80038ee:	eb1b 0509 	adds.w	r5, fp, r9
 80038f2:	eb4c 060a 	adc.w	r6, ip, sl
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	4619      	mov	r1, r3
 80038fc:	f04f 0200 	mov.w	r2, #0
 8003900:	f04f 0300 	mov.w	r3, #0
 8003904:	f04f 0400 	mov.w	r4, #0
 8003908:	0094      	lsls	r4, r2, #2
 800390a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800390e:	008b      	lsls	r3, r1, #2
 8003910:	461a      	mov	r2, r3
 8003912:	4623      	mov	r3, r4
 8003914:	4628      	mov	r0, r5
 8003916:	4631      	mov	r1, r6
 8003918:	f7fc fcba 	bl	8000290 <__aeabi_uldivmod>
 800391c:	4603      	mov	r3, r0
 800391e:	460c      	mov	r4, r1
 8003920:	461a      	mov	r2, r3
 8003922:	4b77      	ldr	r3, [pc, #476]	; (8003b00 <UART_SetConfig+0x6f4>)
 8003924:	fba3 1302 	umull	r1, r3, r3, r2
 8003928:	095b      	lsrs	r3, r3, #5
 800392a:	2164      	movs	r1, #100	; 0x64
 800392c:	fb01 f303 	mul.w	r3, r1, r3
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	011b      	lsls	r3, r3, #4
 8003934:	3332      	adds	r3, #50	; 0x32
 8003936:	4a72      	ldr	r2, [pc, #456]	; (8003b00 <UART_SetConfig+0x6f4>)
 8003938:	fba2 2303 	umull	r2, r3, r2, r3
 800393c:	095b      	lsrs	r3, r3, #5
 800393e:	f003 020f 	and.w	r2, r3, #15
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4442      	add	r2, r8
 8003948:	609a      	str	r2, [r3, #8]
 800394a:	e0d0      	b.n	8003aee <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800394c:	f7fe fd46 	bl	80023dc <HAL_RCC_GetPCLK1Freq>
 8003950:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	469a      	mov	sl, r3
 8003956:	f04f 0b00 	mov.w	fp, #0
 800395a:	46d0      	mov	r8, sl
 800395c:	46d9      	mov	r9, fp
 800395e:	eb18 0308 	adds.w	r3, r8, r8
 8003962:	eb49 0409 	adc.w	r4, r9, r9
 8003966:	4698      	mov	r8, r3
 8003968:	46a1      	mov	r9, r4
 800396a:	eb18 080a 	adds.w	r8, r8, sl
 800396e:	eb49 090b 	adc.w	r9, r9, fp
 8003972:	f04f 0100 	mov.w	r1, #0
 8003976:	f04f 0200 	mov.w	r2, #0
 800397a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800397e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003982:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003986:	4688      	mov	r8, r1
 8003988:	4691      	mov	r9, r2
 800398a:	eb1a 0508 	adds.w	r5, sl, r8
 800398e:	eb4b 0609 	adc.w	r6, fp, r9
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	4619      	mov	r1, r3
 8003998:	f04f 0200 	mov.w	r2, #0
 800399c:	f04f 0300 	mov.w	r3, #0
 80039a0:	f04f 0400 	mov.w	r4, #0
 80039a4:	0094      	lsls	r4, r2, #2
 80039a6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80039aa:	008b      	lsls	r3, r1, #2
 80039ac:	461a      	mov	r2, r3
 80039ae:	4623      	mov	r3, r4
 80039b0:	4628      	mov	r0, r5
 80039b2:	4631      	mov	r1, r6
 80039b4:	f7fc fc6c 	bl	8000290 <__aeabi_uldivmod>
 80039b8:	4603      	mov	r3, r0
 80039ba:	460c      	mov	r4, r1
 80039bc:	461a      	mov	r2, r3
 80039be:	4b50      	ldr	r3, [pc, #320]	; (8003b00 <UART_SetConfig+0x6f4>)
 80039c0:	fba3 2302 	umull	r2, r3, r3, r2
 80039c4:	095b      	lsrs	r3, r3, #5
 80039c6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	469b      	mov	fp, r3
 80039ce:	f04f 0c00 	mov.w	ip, #0
 80039d2:	46d9      	mov	r9, fp
 80039d4:	46e2      	mov	sl, ip
 80039d6:	eb19 0309 	adds.w	r3, r9, r9
 80039da:	eb4a 040a 	adc.w	r4, sl, sl
 80039de:	4699      	mov	r9, r3
 80039e0:	46a2      	mov	sl, r4
 80039e2:	eb19 090b 	adds.w	r9, r9, fp
 80039e6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80039ea:	f04f 0100 	mov.w	r1, #0
 80039ee:	f04f 0200 	mov.w	r2, #0
 80039f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80039fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80039fe:	4689      	mov	r9, r1
 8003a00:	4692      	mov	sl, r2
 8003a02:	eb1b 0509 	adds.w	r5, fp, r9
 8003a06:	eb4c 060a 	adc.w	r6, ip, sl
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	4619      	mov	r1, r3
 8003a10:	f04f 0200 	mov.w	r2, #0
 8003a14:	f04f 0300 	mov.w	r3, #0
 8003a18:	f04f 0400 	mov.w	r4, #0
 8003a1c:	0094      	lsls	r4, r2, #2
 8003a1e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003a22:	008b      	lsls	r3, r1, #2
 8003a24:	461a      	mov	r2, r3
 8003a26:	4623      	mov	r3, r4
 8003a28:	4628      	mov	r0, r5
 8003a2a:	4631      	mov	r1, r6
 8003a2c:	f7fc fc30 	bl	8000290 <__aeabi_uldivmod>
 8003a30:	4603      	mov	r3, r0
 8003a32:	460c      	mov	r4, r1
 8003a34:	461a      	mov	r2, r3
 8003a36:	4b32      	ldr	r3, [pc, #200]	; (8003b00 <UART_SetConfig+0x6f4>)
 8003a38:	fba3 1302 	umull	r1, r3, r3, r2
 8003a3c:	095b      	lsrs	r3, r3, #5
 8003a3e:	2164      	movs	r1, #100	; 0x64
 8003a40:	fb01 f303 	mul.w	r3, r1, r3
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	011b      	lsls	r3, r3, #4
 8003a48:	3332      	adds	r3, #50	; 0x32
 8003a4a:	4a2d      	ldr	r2, [pc, #180]	; (8003b00 <UART_SetConfig+0x6f4>)
 8003a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a50:	095b      	lsrs	r3, r3, #5
 8003a52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a56:	4498      	add	r8, r3
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	469b      	mov	fp, r3
 8003a5c:	f04f 0c00 	mov.w	ip, #0
 8003a60:	46d9      	mov	r9, fp
 8003a62:	46e2      	mov	sl, ip
 8003a64:	eb19 0309 	adds.w	r3, r9, r9
 8003a68:	eb4a 040a 	adc.w	r4, sl, sl
 8003a6c:	4699      	mov	r9, r3
 8003a6e:	46a2      	mov	sl, r4
 8003a70:	eb19 090b 	adds.w	r9, r9, fp
 8003a74:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003a78:	f04f 0100 	mov.w	r1, #0
 8003a7c:	f04f 0200 	mov.w	r2, #0
 8003a80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a84:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a88:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a8c:	4689      	mov	r9, r1
 8003a8e:	4692      	mov	sl, r2
 8003a90:	eb1b 0509 	adds.w	r5, fp, r9
 8003a94:	eb4c 060a 	adc.w	r6, ip, sl
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	f04f 0200 	mov.w	r2, #0
 8003aa2:	f04f 0300 	mov.w	r3, #0
 8003aa6:	f04f 0400 	mov.w	r4, #0
 8003aaa:	0094      	lsls	r4, r2, #2
 8003aac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ab0:	008b      	lsls	r3, r1, #2
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	4623      	mov	r3, r4
 8003ab6:	4628      	mov	r0, r5
 8003ab8:	4631      	mov	r1, r6
 8003aba:	f7fc fbe9 	bl	8000290 <__aeabi_uldivmod>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	460c      	mov	r4, r1
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	4b0e      	ldr	r3, [pc, #56]	; (8003b00 <UART_SetConfig+0x6f4>)
 8003ac6:	fba3 1302 	umull	r1, r3, r3, r2
 8003aca:	095b      	lsrs	r3, r3, #5
 8003acc:	2164      	movs	r1, #100	; 0x64
 8003ace:	fb01 f303 	mul.w	r3, r1, r3
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	011b      	lsls	r3, r3, #4
 8003ad6:	3332      	adds	r3, #50	; 0x32
 8003ad8:	4a09      	ldr	r2, [pc, #36]	; (8003b00 <UART_SetConfig+0x6f4>)
 8003ada:	fba2 2303 	umull	r2, r3, r2, r3
 8003ade:	095b      	lsrs	r3, r3, #5
 8003ae0:	f003 020f 	and.w	r2, r3, #15
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4442      	add	r2, r8
 8003aea:	609a      	str	r2, [r3, #8]
}
 8003aec:	e7ff      	b.n	8003aee <UART_SetConfig+0x6e2>
 8003aee:	bf00      	nop
 8003af0:	3714      	adds	r7, #20
 8003af2:	46bd      	mov	sp, r7
 8003af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003af8:	40011000 	.word	0x40011000
 8003afc:	40011400 	.word	0x40011400
 8003b00:	51eb851f 	.word	0x51eb851f

08003b04 <__errno>:
 8003b04:	4b01      	ldr	r3, [pc, #4]	; (8003b0c <__errno+0x8>)
 8003b06:	6818      	ldr	r0, [r3, #0]
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	2000000c 	.word	0x2000000c

08003b10 <__libc_init_array>:
 8003b10:	b570      	push	{r4, r5, r6, lr}
 8003b12:	4e0d      	ldr	r6, [pc, #52]	; (8003b48 <__libc_init_array+0x38>)
 8003b14:	4c0d      	ldr	r4, [pc, #52]	; (8003b4c <__libc_init_array+0x3c>)
 8003b16:	1ba4      	subs	r4, r4, r6
 8003b18:	10a4      	asrs	r4, r4, #2
 8003b1a:	2500      	movs	r5, #0
 8003b1c:	42a5      	cmp	r5, r4
 8003b1e:	d109      	bne.n	8003b34 <__libc_init_array+0x24>
 8003b20:	4e0b      	ldr	r6, [pc, #44]	; (8003b50 <__libc_init_array+0x40>)
 8003b22:	4c0c      	ldr	r4, [pc, #48]	; (8003b54 <__libc_init_array+0x44>)
 8003b24:	f000 ff0c 	bl	8004940 <_init>
 8003b28:	1ba4      	subs	r4, r4, r6
 8003b2a:	10a4      	asrs	r4, r4, #2
 8003b2c:	2500      	movs	r5, #0
 8003b2e:	42a5      	cmp	r5, r4
 8003b30:	d105      	bne.n	8003b3e <__libc_init_array+0x2e>
 8003b32:	bd70      	pop	{r4, r5, r6, pc}
 8003b34:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b38:	4798      	blx	r3
 8003b3a:	3501      	adds	r5, #1
 8003b3c:	e7ee      	b.n	8003b1c <__libc_init_array+0xc>
 8003b3e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b42:	4798      	blx	r3
 8003b44:	3501      	adds	r5, #1
 8003b46:	e7f2      	b.n	8003b2e <__libc_init_array+0x1e>
 8003b48:	08004a38 	.word	0x08004a38
 8003b4c:	08004a38 	.word	0x08004a38
 8003b50:	08004a38 	.word	0x08004a38
 8003b54:	08004a3c 	.word	0x08004a3c

08003b58 <malloc>:
 8003b58:	4b02      	ldr	r3, [pc, #8]	; (8003b64 <malloc+0xc>)
 8003b5a:	4601      	mov	r1, r0
 8003b5c:	6818      	ldr	r0, [r3, #0]
 8003b5e:	f000 b859 	b.w	8003c14 <_malloc_r>
 8003b62:	bf00      	nop
 8003b64:	2000000c 	.word	0x2000000c

08003b68 <memset>:
 8003b68:	4402      	add	r2, r0
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d100      	bne.n	8003b72 <memset+0xa>
 8003b70:	4770      	bx	lr
 8003b72:	f803 1b01 	strb.w	r1, [r3], #1
 8003b76:	e7f9      	b.n	8003b6c <memset+0x4>

08003b78 <_free_r>:
 8003b78:	b538      	push	{r3, r4, r5, lr}
 8003b7a:	4605      	mov	r5, r0
 8003b7c:	2900      	cmp	r1, #0
 8003b7e:	d045      	beq.n	8003c0c <_free_r+0x94>
 8003b80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b84:	1f0c      	subs	r4, r1, #4
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	bfb8      	it	lt
 8003b8a:	18e4      	addlt	r4, r4, r3
 8003b8c:	f000 f98e 	bl	8003eac <__malloc_lock>
 8003b90:	4a1f      	ldr	r2, [pc, #124]	; (8003c10 <_free_r+0x98>)
 8003b92:	6813      	ldr	r3, [r2, #0]
 8003b94:	4610      	mov	r0, r2
 8003b96:	b933      	cbnz	r3, 8003ba6 <_free_r+0x2e>
 8003b98:	6063      	str	r3, [r4, #4]
 8003b9a:	6014      	str	r4, [r2, #0]
 8003b9c:	4628      	mov	r0, r5
 8003b9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ba2:	f000 b984 	b.w	8003eae <__malloc_unlock>
 8003ba6:	42a3      	cmp	r3, r4
 8003ba8:	d90c      	bls.n	8003bc4 <_free_r+0x4c>
 8003baa:	6821      	ldr	r1, [r4, #0]
 8003bac:	1862      	adds	r2, r4, r1
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	bf04      	itt	eq
 8003bb2:	681a      	ldreq	r2, [r3, #0]
 8003bb4:	685b      	ldreq	r3, [r3, #4]
 8003bb6:	6063      	str	r3, [r4, #4]
 8003bb8:	bf04      	itt	eq
 8003bba:	1852      	addeq	r2, r2, r1
 8003bbc:	6022      	streq	r2, [r4, #0]
 8003bbe:	6004      	str	r4, [r0, #0]
 8003bc0:	e7ec      	b.n	8003b9c <_free_r+0x24>
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	b10a      	cbz	r2, 8003bcc <_free_r+0x54>
 8003bc8:	42a2      	cmp	r2, r4
 8003bca:	d9fa      	bls.n	8003bc2 <_free_r+0x4a>
 8003bcc:	6819      	ldr	r1, [r3, #0]
 8003bce:	1858      	adds	r0, r3, r1
 8003bd0:	42a0      	cmp	r0, r4
 8003bd2:	d10b      	bne.n	8003bec <_free_r+0x74>
 8003bd4:	6820      	ldr	r0, [r4, #0]
 8003bd6:	4401      	add	r1, r0
 8003bd8:	1858      	adds	r0, r3, r1
 8003bda:	4282      	cmp	r2, r0
 8003bdc:	6019      	str	r1, [r3, #0]
 8003bde:	d1dd      	bne.n	8003b9c <_free_r+0x24>
 8003be0:	6810      	ldr	r0, [r2, #0]
 8003be2:	6852      	ldr	r2, [r2, #4]
 8003be4:	605a      	str	r2, [r3, #4]
 8003be6:	4401      	add	r1, r0
 8003be8:	6019      	str	r1, [r3, #0]
 8003bea:	e7d7      	b.n	8003b9c <_free_r+0x24>
 8003bec:	d902      	bls.n	8003bf4 <_free_r+0x7c>
 8003bee:	230c      	movs	r3, #12
 8003bf0:	602b      	str	r3, [r5, #0]
 8003bf2:	e7d3      	b.n	8003b9c <_free_r+0x24>
 8003bf4:	6820      	ldr	r0, [r4, #0]
 8003bf6:	1821      	adds	r1, r4, r0
 8003bf8:	428a      	cmp	r2, r1
 8003bfa:	bf04      	itt	eq
 8003bfc:	6811      	ldreq	r1, [r2, #0]
 8003bfe:	6852      	ldreq	r2, [r2, #4]
 8003c00:	6062      	str	r2, [r4, #4]
 8003c02:	bf04      	itt	eq
 8003c04:	1809      	addeq	r1, r1, r0
 8003c06:	6021      	streq	r1, [r4, #0]
 8003c08:	605c      	str	r4, [r3, #4]
 8003c0a:	e7c7      	b.n	8003b9c <_free_r+0x24>
 8003c0c:	bd38      	pop	{r3, r4, r5, pc}
 8003c0e:	bf00      	nop
 8003c10:	20000090 	.word	0x20000090

08003c14 <_malloc_r>:
 8003c14:	b570      	push	{r4, r5, r6, lr}
 8003c16:	1ccd      	adds	r5, r1, #3
 8003c18:	f025 0503 	bic.w	r5, r5, #3
 8003c1c:	3508      	adds	r5, #8
 8003c1e:	2d0c      	cmp	r5, #12
 8003c20:	bf38      	it	cc
 8003c22:	250c      	movcc	r5, #12
 8003c24:	2d00      	cmp	r5, #0
 8003c26:	4606      	mov	r6, r0
 8003c28:	db01      	blt.n	8003c2e <_malloc_r+0x1a>
 8003c2a:	42a9      	cmp	r1, r5
 8003c2c:	d903      	bls.n	8003c36 <_malloc_r+0x22>
 8003c2e:	230c      	movs	r3, #12
 8003c30:	6033      	str	r3, [r6, #0]
 8003c32:	2000      	movs	r0, #0
 8003c34:	bd70      	pop	{r4, r5, r6, pc}
 8003c36:	f000 f939 	bl	8003eac <__malloc_lock>
 8003c3a:	4a21      	ldr	r2, [pc, #132]	; (8003cc0 <_malloc_r+0xac>)
 8003c3c:	6814      	ldr	r4, [r2, #0]
 8003c3e:	4621      	mov	r1, r4
 8003c40:	b991      	cbnz	r1, 8003c68 <_malloc_r+0x54>
 8003c42:	4c20      	ldr	r4, [pc, #128]	; (8003cc4 <_malloc_r+0xb0>)
 8003c44:	6823      	ldr	r3, [r4, #0]
 8003c46:	b91b      	cbnz	r3, 8003c50 <_malloc_r+0x3c>
 8003c48:	4630      	mov	r0, r6
 8003c4a:	f000 f855 	bl	8003cf8 <_sbrk_r>
 8003c4e:	6020      	str	r0, [r4, #0]
 8003c50:	4629      	mov	r1, r5
 8003c52:	4630      	mov	r0, r6
 8003c54:	f000 f850 	bl	8003cf8 <_sbrk_r>
 8003c58:	1c43      	adds	r3, r0, #1
 8003c5a:	d124      	bne.n	8003ca6 <_malloc_r+0x92>
 8003c5c:	230c      	movs	r3, #12
 8003c5e:	6033      	str	r3, [r6, #0]
 8003c60:	4630      	mov	r0, r6
 8003c62:	f000 f924 	bl	8003eae <__malloc_unlock>
 8003c66:	e7e4      	b.n	8003c32 <_malloc_r+0x1e>
 8003c68:	680b      	ldr	r3, [r1, #0]
 8003c6a:	1b5b      	subs	r3, r3, r5
 8003c6c:	d418      	bmi.n	8003ca0 <_malloc_r+0x8c>
 8003c6e:	2b0b      	cmp	r3, #11
 8003c70:	d90f      	bls.n	8003c92 <_malloc_r+0x7e>
 8003c72:	600b      	str	r3, [r1, #0]
 8003c74:	50cd      	str	r5, [r1, r3]
 8003c76:	18cc      	adds	r4, r1, r3
 8003c78:	4630      	mov	r0, r6
 8003c7a:	f000 f918 	bl	8003eae <__malloc_unlock>
 8003c7e:	f104 000b 	add.w	r0, r4, #11
 8003c82:	1d23      	adds	r3, r4, #4
 8003c84:	f020 0007 	bic.w	r0, r0, #7
 8003c88:	1ac3      	subs	r3, r0, r3
 8003c8a:	d0d3      	beq.n	8003c34 <_malloc_r+0x20>
 8003c8c:	425a      	negs	r2, r3
 8003c8e:	50e2      	str	r2, [r4, r3]
 8003c90:	e7d0      	b.n	8003c34 <_malloc_r+0x20>
 8003c92:	428c      	cmp	r4, r1
 8003c94:	684b      	ldr	r3, [r1, #4]
 8003c96:	bf16      	itet	ne
 8003c98:	6063      	strne	r3, [r4, #4]
 8003c9a:	6013      	streq	r3, [r2, #0]
 8003c9c:	460c      	movne	r4, r1
 8003c9e:	e7eb      	b.n	8003c78 <_malloc_r+0x64>
 8003ca0:	460c      	mov	r4, r1
 8003ca2:	6849      	ldr	r1, [r1, #4]
 8003ca4:	e7cc      	b.n	8003c40 <_malloc_r+0x2c>
 8003ca6:	1cc4      	adds	r4, r0, #3
 8003ca8:	f024 0403 	bic.w	r4, r4, #3
 8003cac:	42a0      	cmp	r0, r4
 8003cae:	d005      	beq.n	8003cbc <_malloc_r+0xa8>
 8003cb0:	1a21      	subs	r1, r4, r0
 8003cb2:	4630      	mov	r0, r6
 8003cb4:	f000 f820 	bl	8003cf8 <_sbrk_r>
 8003cb8:	3001      	adds	r0, #1
 8003cba:	d0cf      	beq.n	8003c5c <_malloc_r+0x48>
 8003cbc:	6025      	str	r5, [r4, #0]
 8003cbe:	e7db      	b.n	8003c78 <_malloc_r+0x64>
 8003cc0:	20000090 	.word	0x20000090
 8003cc4:	20000094 	.word	0x20000094

08003cc8 <iprintf>:
 8003cc8:	b40f      	push	{r0, r1, r2, r3}
 8003cca:	4b0a      	ldr	r3, [pc, #40]	; (8003cf4 <iprintf+0x2c>)
 8003ccc:	b513      	push	{r0, r1, r4, lr}
 8003cce:	681c      	ldr	r4, [r3, #0]
 8003cd0:	b124      	cbz	r4, 8003cdc <iprintf+0x14>
 8003cd2:	69a3      	ldr	r3, [r4, #24]
 8003cd4:	b913      	cbnz	r3, 8003cdc <iprintf+0x14>
 8003cd6:	4620      	mov	r0, r4
 8003cd8:	f000 f85e 	bl	8003d98 <__sinit>
 8003cdc:	ab05      	add	r3, sp, #20
 8003cde:	9a04      	ldr	r2, [sp, #16]
 8003ce0:	68a1      	ldr	r1, [r4, #8]
 8003ce2:	9301      	str	r3, [sp, #4]
 8003ce4:	4620      	mov	r0, r4
 8003ce6:	f000 f90d 	bl	8003f04 <_vfiprintf_r>
 8003cea:	b002      	add	sp, #8
 8003cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cf0:	b004      	add	sp, #16
 8003cf2:	4770      	bx	lr
 8003cf4:	2000000c 	.word	0x2000000c

08003cf8 <_sbrk_r>:
 8003cf8:	b538      	push	{r3, r4, r5, lr}
 8003cfa:	4c06      	ldr	r4, [pc, #24]	; (8003d14 <_sbrk_r+0x1c>)
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	4605      	mov	r5, r0
 8003d00:	4608      	mov	r0, r1
 8003d02:	6023      	str	r3, [r4, #0]
 8003d04:	f7fc feae 	bl	8000a64 <_sbrk>
 8003d08:	1c43      	adds	r3, r0, #1
 8003d0a:	d102      	bne.n	8003d12 <_sbrk_r+0x1a>
 8003d0c:	6823      	ldr	r3, [r4, #0]
 8003d0e:	b103      	cbz	r3, 8003d12 <_sbrk_r+0x1a>
 8003d10:	602b      	str	r3, [r5, #0]
 8003d12:	bd38      	pop	{r3, r4, r5, pc}
 8003d14:	20000180 	.word	0x20000180

08003d18 <std>:
 8003d18:	2300      	movs	r3, #0
 8003d1a:	b510      	push	{r4, lr}
 8003d1c:	4604      	mov	r4, r0
 8003d1e:	e9c0 3300 	strd	r3, r3, [r0]
 8003d22:	6083      	str	r3, [r0, #8]
 8003d24:	8181      	strh	r1, [r0, #12]
 8003d26:	6643      	str	r3, [r0, #100]	; 0x64
 8003d28:	81c2      	strh	r2, [r0, #14]
 8003d2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d2e:	6183      	str	r3, [r0, #24]
 8003d30:	4619      	mov	r1, r3
 8003d32:	2208      	movs	r2, #8
 8003d34:	305c      	adds	r0, #92	; 0x5c
 8003d36:	f7ff ff17 	bl	8003b68 <memset>
 8003d3a:	4b05      	ldr	r3, [pc, #20]	; (8003d50 <std+0x38>)
 8003d3c:	6263      	str	r3, [r4, #36]	; 0x24
 8003d3e:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <std+0x3c>)
 8003d40:	62a3      	str	r3, [r4, #40]	; 0x28
 8003d42:	4b05      	ldr	r3, [pc, #20]	; (8003d58 <std+0x40>)
 8003d44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003d46:	4b05      	ldr	r3, [pc, #20]	; (8003d5c <std+0x44>)
 8003d48:	6224      	str	r4, [r4, #32]
 8003d4a:	6323      	str	r3, [r4, #48]	; 0x30
 8003d4c:	bd10      	pop	{r4, pc}
 8003d4e:	bf00      	nop
 8003d50:	08004441 	.word	0x08004441
 8003d54:	08004463 	.word	0x08004463
 8003d58:	0800449b 	.word	0x0800449b
 8003d5c:	080044bf 	.word	0x080044bf

08003d60 <_cleanup_r>:
 8003d60:	4901      	ldr	r1, [pc, #4]	; (8003d68 <_cleanup_r+0x8>)
 8003d62:	f000 b885 	b.w	8003e70 <_fwalk_reent>
 8003d66:	bf00      	nop
 8003d68:	08004799 	.word	0x08004799

08003d6c <__sfmoreglue>:
 8003d6c:	b570      	push	{r4, r5, r6, lr}
 8003d6e:	1e4a      	subs	r2, r1, #1
 8003d70:	2568      	movs	r5, #104	; 0x68
 8003d72:	4355      	muls	r5, r2
 8003d74:	460e      	mov	r6, r1
 8003d76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003d7a:	f7ff ff4b 	bl	8003c14 <_malloc_r>
 8003d7e:	4604      	mov	r4, r0
 8003d80:	b140      	cbz	r0, 8003d94 <__sfmoreglue+0x28>
 8003d82:	2100      	movs	r1, #0
 8003d84:	e9c0 1600 	strd	r1, r6, [r0]
 8003d88:	300c      	adds	r0, #12
 8003d8a:	60a0      	str	r0, [r4, #8]
 8003d8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003d90:	f7ff feea 	bl	8003b68 <memset>
 8003d94:	4620      	mov	r0, r4
 8003d96:	bd70      	pop	{r4, r5, r6, pc}

08003d98 <__sinit>:
 8003d98:	6983      	ldr	r3, [r0, #24]
 8003d9a:	b510      	push	{r4, lr}
 8003d9c:	4604      	mov	r4, r0
 8003d9e:	bb33      	cbnz	r3, 8003dee <__sinit+0x56>
 8003da0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003da4:	6503      	str	r3, [r0, #80]	; 0x50
 8003da6:	4b12      	ldr	r3, [pc, #72]	; (8003df0 <__sinit+0x58>)
 8003da8:	4a12      	ldr	r2, [pc, #72]	; (8003df4 <__sinit+0x5c>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6282      	str	r2, [r0, #40]	; 0x28
 8003dae:	4298      	cmp	r0, r3
 8003db0:	bf04      	itt	eq
 8003db2:	2301      	moveq	r3, #1
 8003db4:	6183      	streq	r3, [r0, #24]
 8003db6:	f000 f81f 	bl	8003df8 <__sfp>
 8003dba:	6060      	str	r0, [r4, #4]
 8003dbc:	4620      	mov	r0, r4
 8003dbe:	f000 f81b 	bl	8003df8 <__sfp>
 8003dc2:	60a0      	str	r0, [r4, #8]
 8003dc4:	4620      	mov	r0, r4
 8003dc6:	f000 f817 	bl	8003df8 <__sfp>
 8003dca:	2200      	movs	r2, #0
 8003dcc:	60e0      	str	r0, [r4, #12]
 8003dce:	2104      	movs	r1, #4
 8003dd0:	6860      	ldr	r0, [r4, #4]
 8003dd2:	f7ff ffa1 	bl	8003d18 <std>
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	2109      	movs	r1, #9
 8003dda:	68a0      	ldr	r0, [r4, #8]
 8003ddc:	f7ff ff9c 	bl	8003d18 <std>
 8003de0:	2202      	movs	r2, #2
 8003de2:	2112      	movs	r1, #18
 8003de4:	68e0      	ldr	r0, [r4, #12]
 8003de6:	f7ff ff97 	bl	8003d18 <std>
 8003dea:	2301      	movs	r3, #1
 8003dec:	61a3      	str	r3, [r4, #24]
 8003dee:	bd10      	pop	{r4, pc}
 8003df0:	08004998 	.word	0x08004998
 8003df4:	08003d61 	.word	0x08003d61

08003df8 <__sfp>:
 8003df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dfa:	4b1b      	ldr	r3, [pc, #108]	; (8003e68 <__sfp+0x70>)
 8003dfc:	681e      	ldr	r6, [r3, #0]
 8003dfe:	69b3      	ldr	r3, [r6, #24]
 8003e00:	4607      	mov	r7, r0
 8003e02:	b913      	cbnz	r3, 8003e0a <__sfp+0x12>
 8003e04:	4630      	mov	r0, r6
 8003e06:	f7ff ffc7 	bl	8003d98 <__sinit>
 8003e0a:	3648      	adds	r6, #72	; 0x48
 8003e0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003e10:	3b01      	subs	r3, #1
 8003e12:	d503      	bpl.n	8003e1c <__sfp+0x24>
 8003e14:	6833      	ldr	r3, [r6, #0]
 8003e16:	b133      	cbz	r3, 8003e26 <__sfp+0x2e>
 8003e18:	6836      	ldr	r6, [r6, #0]
 8003e1a:	e7f7      	b.n	8003e0c <__sfp+0x14>
 8003e1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003e20:	b16d      	cbz	r5, 8003e3e <__sfp+0x46>
 8003e22:	3468      	adds	r4, #104	; 0x68
 8003e24:	e7f4      	b.n	8003e10 <__sfp+0x18>
 8003e26:	2104      	movs	r1, #4
 8003e28:	4638      	mov	r0, r7
 8003e2a:	f7ff ff9f 	bl	8003d6c <__sfmoreglue>
 8003e2e:	6030      	str	r0, [r6, #0]
 8003e30:	2800      	cmp	r0, #0
 8003e32:	d1f1      	bne.n	8003e18 <__sfp+0x20>
 8003e34:	230c      	movs	r3, #12
 8003e36:	603b      	str	r3, [r7, #0]
 8003e38:	4604      	mov	r4, r0
 8003e3a:	4620      	mov	r0, r4
 8003e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e3e:	4b0b      	ldr	r3, [pc, #44]	; (8003e6c <__sfp+0x74>)
 8003e40:	6665      	str	r5, [r4, #100]	; 0x64
 8003e42:	e9c4 5500 	strd	r5, r5, [r4]
 8003e46:	60a5      	str	r5, [r4, #8]
 8003e48:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003e4c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003e50:	2208      	movs	r2, #8
 8003e52:	4629      	mov	r1, r5
 8003e54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003e58:	f7ff fe86 	bl	8003b68 <memset>
 8003e5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003e60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003e64:	e7e9      	b.n	8003e3a <__sfp+0x42>
 8003e66:	bf00      	nop
 8003e68:	08004998 	.word	0x08004998
 8003e6c:	ffff0001 	.word	0xffff0001

08003e70 <_fwalk_reent>:
 8003e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e74:	4680      	mov	r8, r0
 8003e76:	4689      	mov	r9, r1
 8003e78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003e7c:	2600      	movs	r6, #0
 8003e7e:	b914      	cbnz	r4, 8003e86 <_fwalk_reent+0x16>
 8003e80:	4630      	mov	r0, r6
 8003e82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e86:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003e8a:	3f01      	subs	r7, #1
 8003e8c:	d501      	bpl.n	8003e92 <_fwalk_reent+0x22>
 8003e8e:	6824      	ldr	r4, [r4, #0]
 8003e90:	e7f5      	b.n	8003e7e <_fwalk_reent+0xe>
 8003e92:	89ab      	ldrh	r3, [r5, #12]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d907      	bls.n	8003ea8 <_fwalk_reent+0x38>
 8003e98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	d003      	beq.n	8003ea8 <_fwalk_reent+0x38>
 8003ea0:	4629      	mov	r1, r5
 8003ea2:	4640      	mov	r0, r8
 8003ea4:	47c8      	blx	r9
 8003ea6:	4306      	orrs	r6, r0
 8003ea8:	3568      	adds	r5, #104	; 0x68
 8003eaa:	e7ee      	b.n	8003e8a <_fwalk_reent+0x1a>

08003eac <__malloc_lock>:
 8003eac:	4770      	bx	lr

08003eae <__malloc_unlock>:
 8003eae:	4770      	bx	lr

08003eb0 <__sfputc_r>:
 8003eb0:	6893      	ldr	r3, [r2, #8]
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	b410      	push	{r4}
 8003eb8:	6093      	str	r3, [r2, #8]
 8003eba:	da08      	bge.n	8003ece <__sfputc_r+0x1e>
 8003ebc:	6994      	ldr	r4, [r2, #24]
 8003ebe:	42a3      	cmp	r3, r4
 8003ec0:	db01      	blt.n	8003ec6 <__sfputc_r+0x16>
 8003ec2:	290a      	cmp	r1, #10
 8003ec4:	d103      	bne.n	8003ece <__sfputc_r+0x1e>
 8003ec6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003eca:	f000 bafd 	b.w	80044c8 <__swbuf_r>
 8003ece:	6813      	ldr	r3, [r2, #0]
 8003ed0:	1c58      	adds	r0, r3, #1
 8003ed2:	6010      	str	r0, [r2, #0]
 8003ed4:	7019      	strb	r1, [r3, #0]
 8003ed6:	4608      	mov	r0, r1
 8003ed8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003edc:	4770      	bx	lr

08003ede <__sfputs_r>:
 8003ede:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ee0:	4606      	mov	r6, r0
 8003ee2:	460f      	mov	r7, r1
 8003ee4:	4614      	mov	r4, r2
 8003ee6:	18d5      	adds	r5, r2, r3
 8003ee8:	42ac      	cmp	r4, r5
 8003eea:	d101      	bne.n	8003ef0 <__sfputs_r+0x12>
 8003eec:	2000      	movs	r0, #0
 8003eee:	e007      	b.n	8003f00 <__sfputs_r+0x22>
 8003ef0:	463a      	mov	r2, r7
 8003ef2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ef6:	4630      	mov	r0, r6
 8003ef8:	f7ff ffda 	bl	8003eb0 <__sfputc_r>
 8003efc:	1c43      	adds	r3, r0, #1
 8003efe:	d1f3      	bne.n	8003ee8 <__sfputs_r+0xa>
 8003f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003f04 <_vfiprintf_r>:
 8003f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f08:	460c      	mov	r4, r1
 8003f0a:	b09d      	sub	sp, #116	; 0x74
 8003f0c:	4617      	mov	r7, r2
 8003f0e:	461d      	mov	r5, r3
 8003f10:	4606      	mov	r6, r0
 8003f12:	b118      	cbz	r0, 8003f1c <_vfiprintf_r+0x18>
 8003f14:	6983      	ldr	r3, [r0, #24]
 8003f16:	b90b      	cbnz	r3, 8003f1c <_vfiprintf_r+0x18>
 8003f18:	f7ff ff3e 	bl	8003d98 <__sinit>
 8003f1c:	4b7c      	ldr	r3, [pc, #496]	; (8004110 <_vfiprintf_r+0x20c>)
 8003f1e:	429c      	cmp	r4, r3
 8003f20:	d158      	bne.n	8003fd4 <_vfiprintf_r+0xd0>
 8003f22:	6874      	ldr	r4, [r6, #4]
 8003f24:	89a3      	ldrh	r3, [r4, #12]
 8003f26:	0718      	lsls	r0, r3, #28
 8003f28:	d55e      	bpl.n	8003fe8 <_vfiprintf_r+0xe4>
 8003f2a:	6923      	ldr	r3, [r4, #16]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d05b      	beq.n	8003fe8 <_vfiprintf_r+0xe4>
 8003f30:	2300      	movs	r3, #0
 8003f32:	9309      	str	r3, [sp, #36]	; 0x24
 8003f34:	2320      	movs	r3, #32
 8003f36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f3a:	2330      	movs	r3, #48	; 0x30
 8003f3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f40:	9503      	str	r5, [sp, #12]
 8003f42:	f04f 0b01 	mov.w	fp, #1
 8003f46:	46b8      	mov	r8, r7
 8003f48:	4645      	mov	r5, r8
 8003f4a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003f4e:	b10b      	cbz	r3, 8003f54 <_vfiprintf_r+0x50>
 8003f50:	2b25      	cmp	r3, #37	; 0x25
 8003f52:	d154      	bne.n	8003ffe <_vfiprintf_r+0xfa>
 8003f54:	ebb8 0a07 	subs.w	sl, r8, r7
 8003f58:	d00b      	beq.n	8003f72 <_vfiprintf_r+0x6e>
 8003f5a:	4653      	mov	r3, sl
 8003f5c:	463a      	mov	r2, r7
 8003f5e:	4621      	mov	r1, r4
 8003f60:	4630      	mov	r0, r6
 8003f62:	f7ff ffbc 	bl	8003ede <__sfputs_r>
 8003f66:	3001      	adds	r0, #1
 8003f68:	f000 80c2 	beq.w	80040f0 <_vfiprintf_r+0x1ec>
 8003f6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f6e:	4453      	add	r3, sl
 8003f70:	9309      	str	r3, [sp, #36]	; 0x24
 8003f72:	f898 3000 	ldrb.w	r3, [r8]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f000 80ba 	beq.w	80040f0 <_vfiprintf_r+0x1ec>
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8003f82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f86:	9304      	str	r3, [sp, #16]
 8003f88:	9307      	str	r3, [sp, #28]
 8003f8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f8e:	931a      	str	r3, [sp, #104]	; 0x68
 8003f90:	46a8      	mov	r8, r5
 8003f92:	2205      	movs	r2, #5
 8003f94:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003f98:	485e      	ldr	r0, [pc, #376]	; (8004114 <_vfiprintf_r+0x210>)
 8003f9a:	f7fc f929 	bl	80001f0 <memchr>
 8003f9e:	9b04      	ldr	r3, [sp, #16]
 8003fa0:	bb78      	cbnz	r0, 8004002 <_vfiprintf_r+0xfe>
 8003fa2:	06d9      	lsls	r1, r3, #27
 8003fa4:	bf44      	itt	mi
 8003fa6:	2220      	movmi	r2, #32
 8003fa8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003fac:	071a      	lsls	r2, r3, #28
 8003fae:	bf44      	itt	mi
 8003fb0:	222b      	movmi	r2, #43	; 0x2b
 8003fb2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003fb6:	782a      	ldrb	r2, [r5, #0]
 8003fb8:	2a2a      	cmp	r2, #42	; 0x2a
 8003fba:	d02a      	beq.n	8004012 <_vfiprintf_r+0x10e>
 8003fbc:	9a07      	ldr	r2, [sp, #28]
 8003fbe:	46a8      	mov	r8, r5
 8003fc0:	2000      	movs	r0, #0
 8003fc2:	250a      	movs	r5, #10
 8003fc4:	4641      	mov	r1, r8
 8003fc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fca:	3b30      	subs	r3, #48	; 0x30
 8003fcc:	2b09      	cmp	r3, #9
 8003fce:	d969      	bls.n	80040a4 <_vfiprintf_r+0x1a0>
 8003fd0:	b360      	cbz	r0, 800402c <_vfiprintf_r+0x128>
 8003fd2:	e024      	b.n	800401e <_vfiprintf_r+0x11a>
 8003fd4:	4b50      	ldr	r3, [pc, #320]	; (8004118 <_vfiprintf_r+0x214>)
 8003fd6:	429c      	cmp	r4, r3
 8003fd8:	d101      	bne.n	8003fde <_vfiprintf_r+0xda>
 8003fda:	68b4      	ldr	r4, [r6, #8]
 8003fdc:	e7a2      	b.n	8003f24 <_vfiprintf_r+0x20>
 8003fde:	4b4f      	ldr	r3, [pc, #316]	; (800411c <_vfiprintf_r+0x218>)
 8003fe0:	429c      	cmp	r4, r3
 8003fe2:	bf08      	it	eq
 8003fe4:	68f4      	ldreq	r4, [r6, #12]
 8003fe6:	e79d      	b.n	8003f24 <_vfiprintf_r+0x20>
 8003fe8:	4621      	mov	r1, r4
 8003fea:	4630      	mov	r0, r6
 8003fec:	f000 fad0 	bl	8004590 <__swsetup_r>
 8003ff0:	2800      	cmp	r0, #0
 8003ff2:	d09d      	beq.n	8003f30 <_vfiprintf_r+0x2c>
 8003ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff8:	b01d      	add	sp, #116	; 0x74
 8003ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ffe:	46a8      	mov	r8, r5
 8004000:	e7a2      	b.n	8003f48 <_vfiprintf_r+0x44>
 8004002:	4a44      	ldr	r2, [pc, #272]	; (8004114 <_vfiprintf_r+0x210>)
 8004004:	1a80      	subs	r0, r0, r2
 8004006:	fa0b f000 	lsl.w	r0, fp, r0
 800400a:	4318      	orrs	r0, r3
 800400c:	9004      	str	r0, [sp, #16]
 800400e:	4645      	mov	r5, r8
 8004010:	e7be      	b.n	8003f90 <_vfiprintf_r+0x8c>
 8004012:	9a03      	ldr	r2, [sp, #12]
 8004014:	1d11      	adds	r1, r2, #4
 8004016:	6812      	ldr	r2, [r2, #0]
 8004018:	9103      	str	r1, [sp, #12]
 800401a:	2a00      	cmp	r2, #0
 800401c:	db01      	blt.n	8004022 <_vfiprintf_r+0x11e>
 800401e:	9207      	str	r2, [sp, #28]
 8004020:	e004      	b.n	800402c <_vfiprintf_r+0x128>
 8004022:	4252      	negs	r2, r2
 8004024:	f043 0302 	orr.w	r3, r3, #2
 8004028:	9207      	str	r2, [sp, #28]
 800402a:	9304      	str	r3, [sp, #16]
 800402c:	f898 3000 	ldrb.w	r3, [r8]
 8004030:	2b2e      	cmp	r3, #46	; 0x2e
 8004032:	d10e      	bne.n	8004052 <_vfiprintf_r+0x14e>
 8004034:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004038:	2b2a      	cmp	r3, #42	; 0x2a
 800403a:	d138      	bne.n	80040ae <_vfiprintf_r+0x1aa>
 800403c:	9b03      	ldr	r3, [sp, #12]
 800403e:	1d1a      	adds	r2, r3, #4
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	9203      	str	r2, [sp, #12]
 8004044:	2b00      	cmp	r3, #0
 8004046:	bfb8      	it	lt
 8004048:	f04f 33ff 	movlt.w	r3, #4294967295
 800404c:	f108 0802 	add.w	r8, r8, #2
 8004050:	9305      	str	r3, [sp, #20]
 8004052:	4d33      	ldr	r5, [pc, #204]	; (8004120 <_vfiprintf_r+0x21c>)
 8004054:	f898 1000 	ldrb.w	r1, [r8]
 8004058:	2203      	movs	r2, #3
 800405a:	4628      	mov	r0, r5
 800405c:	f7fc f8c8 	bl	80001f0 <memchr>
 8004060:	b140      	cbz	r0, 8004074 <_vfiprintf_r+0x170>
 8004062:	2340      	movs	r3, #64	; 0x40
 8004064:	1b40      	subs	r0, r0, r5
 8004066:	fa03 f000 	lsl.w	r0, r3, r0
 800406a:	9b04      	ldr	r3, [sp, #16]
 800406c:	4303      	orrs	r3, r0
 800406e:	f108 0801 	add.w	r8, r8, #1
 8004072:	9304      	str	r3, [sp, #16]
 8004074:	f898 1000 	ldrb.w	r1, [r8]
 8004078:	482a      	ldr	r0, [pc, #168]	; (8004124 <_vfiprintf_r+0x220>)
 800407a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800407e:	2206      	movs	r2, #6
 8004080:	f108 0701 	add.w	r7, r8, #1
 8004084:	f7fc f8b4 	bl	80001f0 <memchr>
 8004088:	2800      	cmp	r0, #0
 800408a:	d037      	beq.n	80040fc <_vfiprintf_r+0x1f8>
 800408c:	4b26      	ldr	r3, [pc, #152]	; (8004128 <_vfiprintf_r+0x224>)
 800408e:	bb1b      	cbnz	r3, 80040d8 <_vfiprintf_r+0x1d4>
 8004090:	9b03      	ldr	r3, [sp, #12]
 8004092:	3307      	adds	r3, #7
 8004094:	f023 0307 	bic.w	r3, r3, #7
 8004098:	3308      	adds	r3, #8
 800409a:	9303      	str	r3, [sp, #12]
 800409c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800409e:	444b      	add	r3, r9
 80040a0:	9309      	str	r3, [sp, #36]	; 0x24
 80040a2:	e750      	b.n	8003f46 <_vfiprintf_r+0x42>
 80040a4:	fb05 3202 	mla	r2, r5, r2, r3
 80040a8:	2001      	movs	r0, #1
 80040aa:	4688      	mov	r8, r1
 80040ac:	e78a      	b.n	8003fc4 <_vfiprintf_r+0xc0>
 80040ae:	2300      	movs	r3, #0
 80040b0:	f108 0801 	add.w	r8, r8, #1
 80040b4:	9305      	str	r3, [sp, #20]
 80040b6:	4619      	mov	r1, r3
 80040b8:	250a      	movs	r5, #10
 80040ba:	4640      	mov	r0, r8
 80040bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040c0:	3a30      	subs	r2, #48	; 0x30
 80040c2:	2a09      	cmp	r2, #9
 80040c4:	d903      	bls.n	80040ce <_vfiprintf_r+0x1ca>
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d0c3      	beq.n	8004052 <_vfiprintf_r+0x14e>
 80040ca:	9105      	str	r1, [sp, #20]
 80040cc:	e7c1      	b.n	8004052 <_vfiprintf_r+0x14e>
 80040ce:	fb05 2101 	mla	r1, r5, r1, r2
 80040d2:	2301      	movs	r3, #1
 80040d4:	4680      	mov	r8, r0
 80040d6:	e7f0      	b.n	80040ba <_vfiprintf_r+0x1b6>
 80040d8:	ab03      	add	r3, sp, #12
 80040da:	9300      	str	r3, [sp, #0]
 80040dc:	4622      	mov	r2, r4
 80040de:	4b13      	ldr	r3, [pc, #76]	; (800412c <_vfiprintf_r+0x228>)
 80040e0:	a904      	add	r1, sp, #16
 80040e2:	4630      	mov	r0, r6
 80040e4:	f3af 8000 	nop.w
 80040e8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80040ec:	4681      	mov	r9, r0
 80040ee:	d1d5      	bne.n	800409c <_vfiprintf_r+0x198>
 80040f0:	89a3      	ldrh	r3, [r4, #12]
 80040f2:	065b      	lsls	r3, r3, #25
 80040f4:	f53f af7e 	bmi.w	8003ff4 <_vfiprintf_r+0xf0>
 80040f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80040fa:	e77d      	b.n	8003ff8 <_vfiprintf_r+0xf4>
 80040fc:	ab03      	add	r3, sp, #12
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	4622      	mov	r2, r4
 8004102:	4b0a      	ldr	r3, [pc, #40]	; (800412c <_vfiprintf_r+0x228>)
 8004104:	a904      	add	r1, sp, #16
 8004106:	4630      	mov	r0, r6
 8004108:	f000 f888 	bl	800421c <_printf_i>
 800410c:	e7ec      	b.n	80040e8 <_vfiprintf_r+0x1e4>
 800410e:	bf00      	nop
 8004110:	080049bc 	.word	0x080049bc
 8004114:	080049fc 	.word	0x080049fc
 8004118:	080049dc 	.word	0x080049dc
 800411c:	0800499c 	.word	0x0800499c
 8004120:	08004a02 	.word	0x08004a02
 8004124:	08004a06 	.word	0x08004a06
 8004128:	00000000 	.word	0x00000000
 800412c:	08003edf 	.word	0x08003edf

08004130 <_printf_common>:
 8004130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004134:	4691      	mov	r9, r2
 8004136:	461f      	mov	r7, r3
 8004138:	688a      	ldr	r2, [r1, #8]
 800413a:	690b      	ldr	r3, [r1, #16]
 800413c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004140:	4293      	cmp	r3, r2
 8004142:	bfb8      	it	lt
 8004144:	4613      	movlt	r3, r2
 8004146:	f8c9 3000 	str.w	r3, [r9]
 800414a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800414e:	4606      	mov	r6, r0
 8004150:	460c      	mov	r4, r1
 8004152:	b112      	cbz	r2, 800415a <_printf_common+0x2a>
 8004154:	3301      	adds	r3, #1
 8004156:	f8c9 3000 	str.w	r3, [r9]
 800415a:	6823      	ldr	r3, [r4, #0]
 800415c:	0699      	lsls	r1, r3, #26
 800415e:	bf42      	ittt	mi
 8004160:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004164:	3302      	addmi	r3, #2
 8004166:	f8c9 3000 	strmi.w	r3, [r9]
 800416a:	6825      	ldr	r5, [r4, #0]
 800416c:	f015 0506 	ands.w	r5, r5, #6
 8004170:	d107      	bne.n	8004182 <_printf_common+0x52>
 8004172:	f104 0a19 	add.w	sl, r4, #25
 8004176:	68e3      	ldr	r3, [r4, #12]
 8004178:	f8d9 2000 	ldr.w	r2, [r9]
 800417c:	1a9b      	subs	r3, r3, r2
 800417e:	42ab      	cmp	r3, r5
 8004180:	dc28      	bgt.n	80041d4 <_printf_common+0xa4>
 8004182:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004186:	6822      	ldr	r2, [r4, #0]
 8004188:	3300      	adds	r3, #0
 800418a:	bf18      	it	ne
 800418c:	2301      	movne	r3, #1
 800418e:	0692      	lsls	r2, r2, #26
 8004190:	d42d      	bmi.n	80041ee <_printf_common+0xbe>
 8004192:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004196:	4639      	mov	r1, r7
 8004198:	4630      	mov	r0, r6
 800419a:	47c0      	blx	r8
 800419c:	3001      	adds	r0, #1
 800419e:	d020      	beq.n	80041e2 <_printf_common+0xb2>
 80041a0:	6823      	ldr	r3, [r4, #0]
 80041a2:	68e5      	ldr	r5, [r4, #12]
 80041a4:	f8d9 2000 	ldr.w	r2, [r9]
 80041a8:	f003 0306 	and.w	r3, r3, #6
 80041ac:	2b04      	cmp	r3, #4
 80041ae:	bf08      	it	eq
 80041b0:	1aad      	subeq	r5, r5, r2
 80041b2:	68a3      	ldr	r3, [r4, #8]
 80041b4:	6922      	ldr	r2, [r4, #16]
 80041b6:	bf0c      	ite	eq
 80041b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041bc:	2500      	movne	r5, #0
 80041be:	4293      	cmp	r3, r2
 80041c0:	bfc4      	itt	gt
 80041c2:	1a9b      	subgt	r3, r3, r2
 80041c4:	18ed      	addgt	r5, r5, r3
 80041c6:	f04f 0900 	mov.w	r9, #0
 80041ca:	341a      	adds	r4, #26
 80041cc:	454d      	cmp	r5, r9
 80041ce:	d11a      	bne.n	8004206 <_printf_common+0xd6>
 80041d0:	2000      	movs	r0, #0
 80041d2:	e008      	b.n	80041e6 <_printf_common+0xb6>
 80041d4:	2301      	movs	r3, #1
 80041d6:	4652      	mov	r2, sl
 80041d8:	4639      	mov	r1, r7
 80041da:	4630      	mov	r0, r6
 80041dc:	47c0      	blx	r8
 80041de:	3001      	adds	r0, #1
 80041e0:	d103      	bne.n	80041ea <_printf_common+0xba>
 80041e2:	f04f 30ff 	mov.w	r0, #4294967295
 80041e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041ea:	3501      	adds	r5, #1
 80041ec:	e7c3      	b.n	8004176 <_printf_common+0x46>
 80041ee:	18e1      	adds	r1, r4, r3
 80041f0:	1c5a      	adds	r2, r3, #1
 80041f2:	2030      	movs	r0, #48	; 0x30
 80041f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80041f8:	4422      	add	r2, r4
 80041fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80041fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004202:	3302      	adds	r3, #2
 8004204:	e7c5      	b.n	8004192 <_printf_common+0x62>
 8004206:	2301      	movs	r3, #1
 8004208:	4622      	mov	r2, r4
 800420a:	4639      	mov	r1, r7
 800420c:	4630      	mov	r0, r6
 800420e:	47c0      	blx	r8
 8004210:	3001      	adds	r0, #1
 8004212:	d0e6      	beq.n	80041e2 <_printf_common+0xb2>
 8004214:	f109 0901 	add.w	r9, r9, #1
 8004218:	e7d8      	b.n	80041cc <_printf_common+0x9c>
	...

0800421c <_printf_i>:
 800421c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004220:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004224:	460c      	mov	r4, r1
 8004226:	7e09      	ldrb	r1, [r1, #24]
 8004228:	b085      	sub	sp, #20
 800422a:	296e      	cmp	r1, #110	; 0x6e
 800422c:	4617      	mov	r7, r2
 800422e:	4606      	mov	r6, r0
 8004230:	4698      	mov	r8, r3
 8004232:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004234:	f000 80b3 	beq.w	800439e <_printf_i+0x182>
 8004238:	d822      	bhi.n	8004280 <_printf_i+0x64>
 800423a:	2963      	cmp	r1, #99	; 0x63
 800423c:	d036      	beq.n	80042ac <_printf_i+0x90>
 800423e:	d80a      	bhi.n	8004256 <_printf_i+0x3a>
 8004240:	2900      	cmp	r1, #0
 8004242:	f000 80b9 	beq.w	80043b8 <_printf_i+0x19c>
 8004246:	2958      	cmp	r1, #88	; 0x58
 8004248:	f000 8083 	beq.w	8004352 <_printf_i+0x136>
 800424c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004250:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004254:	e032      	b.n	80042bc <_printf_i+0xa0>
 8004256:	2964      	cmp	r1, #100	; 0x64
 8004258:	d001      	beq.n	800425e <_printf_i+0x42>
 800425a:	2969      	cmp	r1, #105	; 0x69
 800425c:	d1f6      	bne.n	800424c <_printf_i+0x30>
 800425e:	6820      	ldr	r0, [r4, #0]
 8004260:	6813      	ldr	r3, [r2, #0]
 8004262:	0605      	lsls	r5, r0, #24
 8004264:	f103 0104 	add.w	r1, r3, #4
 8004268:	d52a      	bpl.n	80042c0 <_printf_i+0xa4>
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6011      	str	r1, [r2, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	da03      	bge.n	800427a <_printf_i+0x5e>
 8004272:	222d      	movs	r2, #45	; 0x2d
 8004274:	425b      	negs	r3, r3
 8004276:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800427a:	486f      	ldr	r0, [pc, #444]	; (8004438 <_printf_i+0x21c>)
 800427c:	220a      	movs	r2, #10
 800427e:	e039      	b.n	80042f4 <_printf_i+0xd8>
 8004280:	2973      	cmp	r1, #115	; 0x73
 8004282:	f000 809d 	beq.w	80043c0 <_printf_i+0x1a4>
 8004286:	d808      	bhi.n	800429a <_printf_i+0x7e>
 8004288:	296f      	cmp	r1, #111	; 0x6f
 800428a:	d020      	beq.n	80042ce <_printf_i+0xb2>
 800428c:	2970      	cmp	r1, #112	; 0x70
 800428e:	d1dd      	bne.n	800424c <_printf_i+0x30>
 8004290:	6823      	ldr	r3, [r4, #0]
 8004292:	f043 0320 	orr.w	r3, r3, #32
 8004296:	6023      	str	r3, [r4, #0]
 8004298:	e003      	b.n	80042a2 <_printf_i+0x86>
 800429a:	2975      	cmp	r1, #117	; 0x75
 800429c:	d017      	beq.n	80042ce <_printf_i+0xb2>
 800429e:	2978      	cmp	r1, #120	; 0x78
 80042a0:	d1d4      	bne.n	800424c <_printf_i+0x30>
 80042a2:	2378      	movs	r3, #120	; 0x78
 80042a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80042a8:	4864      	ldr	r0, [pc, #400]	; (800443c <_printf_i+0x220>)
 80042aa:	e055      	b.n	8004358 <_printf_i+0x13c>
 80042ac:	6813      	ldr	r3, [r2, #0]
 80042ae:	1d19      	adds	r1, r3, #4
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	6011      	str	r1, [r2, #0]
 80042b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042bc:	2301      	movs	r3, #1
 80042be:	e08c      	b.n	80043da <_printf_i+0x1be>
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	6011      	str	r1, [r2, #0]
 80042c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80042c8:	bf18      	it	ne
 80042ca:	b21b      	sxthne	r3, r3
 80042cc:	e7cf      	b.n	800426e <_printf_i+0x52>
 80042ce:	6813      	ldr	r3, [r2, #0]
 80042d0:	6825      	ldr	r5, [r4, #0]
 80042d2:	1d18      	adds	r0, r3, #4
 80042d4:	6010      	str	r0, [r2, #0]
 80042d6:	0628      	lsls	r0, r5, #24
 80042d8:	d501      	bpl.n	80042de <_printf_i+0xc2>
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	e002      	b.n	80042e4 <_printf_i+0xc8>
 80042de:	0668      	lsls	r0, r5, #25
 80042e0:	d5fb      	bpl.n	80042da <_printf_i+0xbe>
 80042e2:	881b      	ldrh	r3, [r3, #0]
 80042e4:	4854      	ldr	r0, [pc, #336]	; (8004438 <_printf_i+0x21c>)
 80042e6:	296f      	cmp	r1, #111	; 0x6f
 80042e8:	bf14      	ite	ne
 80042ea:	220a      	movne	r2, #10
 80042ec:	2208      	moveq	r2, #8
 80042ee:	2100      	movs	r1, #0
 80042f0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80042f4:	6865      	ldr	r5, [r4, #4]
 80042f6:	60a5      	str	r5, [r4, #8]
 80042f8:	2d00      	cmp	r5, #0
 80042fa:	f2c0 8095 	blt.w	8004428 <_printf_i+0x20c>
 80042fe:	6821      	ldr	r1, [r4, #0]
 8004300:	f021 0104 	bic.w	r1, r1, #4
 8004304:	6021      	str	r1, [r4, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d13d      	bne.n	8004386 <_printf_i+0x16a>
 800430a:	2d00      	cmp	r5, #0
 800430c:	f040 808e 	bne.w	800442c <_printf_i+0x210>
 8004310:	4665      	mov	r5, ip
 8004312:	2a08      	cmp	r2, #8
 8004314:	d10b      	bne.n	800432e <_printf_i+0x112>
 8004316:	6823      	ldr	r3, [r4, #0]
 8004318:	07db      	lsls	r3, r3, #31
 800431a:	d508      	bpl.n	800432e <_printf_i+0x112>
 800431c:	6923      	ldr	r3, [r4, #16]
 800431e:	6862      	ldr	r2, [r4, #4]
 8004320:	429a      	cmp	r2, r3
 8004322:	bfde      	ittt	le
 8004324:	2330      	movle	r3, #48	; 0x30
 8004326:	f805 3c01 	strble.w	r3, [r5, #-1]
 800432a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800432e:	ebac 0305 	sub.w	r3, ip, r5
 8004332:	6123      	str	r3, [r4, #16]
 8004334:	f8cd 8000 	str.w	r8, [sp]
 8004338:	463b      	mov	r3, r7
 800433a:	aa03      	add	r2, sp, #12
 800433c:	4621      	mov	r1, r4
 800433e:	4630      	mov	r0, r6
 8004340:	f7ff fef6 	bl	8004130 <_printf_common>
 8004344:	3001      	adds	r0, #1
 8004346:	d14d      	bne.n	80043e4 <_printf_i+0x1c8>
 8004348:	f04f 30ff 	mov.w	r0, #4294967295
 800434c:	b005      	add	sp, #20
 800434e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004352:	4839      	ldr	r0, [pc, #228]	; (8004438 <_printf_i+0x21c>)
 8004354:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004358:	6813      	ldr	r3, [r2, #0]
 800435a:	6821      	ldr	r1, [r4, #0]
 800435c:	1d1d      	adds	r5, r3, #4
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	6015      	str	r5, [r2, #0]
 8004362:	060a      	lsls	r2, r1, #24
 8004364:	d50b      	bpl.n	800437e <_printf_i+0x162>
 8004366:	07ca      	lsls	r2, r1, #31
 8004368:	bf44      	itt	mi
 800436a:	f041 0120 	orrmi.w	r1, r1, #32
 800436e:	6021      	strmi	r1, [r4, #0]
 8004370:	b91b      	cbnz	r3, 800437a <_printf_i+0x15e>
 8004372:	6822      	ldr	r2, [r4, #0]
 8004374:	f022 0220 	bic.w	r2, r2, #32
 8004378:	6022      	str	r2, [r4, #0]
 800437a:	2210      	movs	r2, #16
 800437c:	e7b7      	b.n	80042ee <_printf_i+0xd2>
 800437e:	064d      	lsls	r5, r1, #25
 8004380:	bf48      	it	mi
 8004382:	b29b      	uxthmi	r3, r3
 8004384:	e7ef      	b.n	8004366 <_printf_i+0x14a>
 8004386:	4665      	mov	r5, ip
 8004388:	fbb3 f1f2 	udiv	r1, r3, r2
 800438c:	fb02 3311 	mls	r3, r2, r1, r3
 8004390:	5cc3      	ldrb	r3, [r0, r3]
 8004392:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004396:	460b      	mov	r3, r1
 8004398:	2900      	cmp	r1, #0
 800439a:	d1f5      	bne.n	8004388 <_printf_i+0x16c>
 800439c:	e7b9      	b.n	8004312 <_printf_i+0xf6>
 800439e:	6813      	ldr	r3, [r2, #0]
 80043a0:	6825      	ldr	r5, [r4, #0]
 80043a2:	6961      	ldr	r1, [r4, #20]
 80043a4:	1d18      	adds	r0, r3, #4
 80043a6:	6010      	str	r0, [r2, #0]
 80043a8:	0628      	lsls	r0, r5, #24
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	d501      	bpl.n	80043b2 <_printf_i+0x196>
 80043ae:	6019      	str	r1, [r3, #0]
 80043b0:	e002      	b.n	80043b8 <_printf_i+0x19c>
 80043b2:	066a      	lsls	r2, r5, #25
 80043b4:	d5fb      	bpl.n	80043ae <_printf_i+0x192>
 80043b6:	8019      	strh	r1, [r3, #0]
 80043b8:	2300      	movs	r3, #0
 80043ba:	6123      	str	r3, [r4, #16]
 80043bc:	4665      	mov	r5, ip
 80043be:	e7b9      	b.n	8004334 <_printf_i+0x118>
 80043c0:	6813      	ldr	r3, [r2, #0]
 80043c2:	1d19      	adds	r1, r3, #4
 80043c4:	6011      	str	r1, [r2, #0]
 80043c6:	681d      	ldr	r5, [r3, #0]
 80043c8:	6862      	ldr	r2, [r4, #4]
 80043ca:	2100      	movs	r1, #0
 80043cc:	4628      	mov	r0, r5
 80043ce:	f7fb ff0f 	bl	80001f0 <memchr>
 80043d2:	b108      	cbz	r0, 80043d8 <_printf_i+0x1bc>
 80043d4:	1b40      	subs	r0, r0, r5
 80043d6:	6060      	str	r0, [r4, #4]
 80043d8:	6863      	ldr	r3, [r4, #4]
 80043da:	6123      	str	r3, [r4, #16]
 80043dc:	2300      	movs	r3, #0
 80043de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043e2:	e7a7      	b.n	8004334 <_printf_i+0x118>
 80043e4:	6923      	ldr	r3, [r4, #16]
 80043e6:	462a      	mov	r2, r5
 80043e8:	4639      	mov	r1, r7
 80043ea:	4630      	mov	r0, r6
 80043ec:	47c0      	blx	r8
 80043ee:	3001      	adds	r0, #1
 80043f0:	d0aa      	beq.n	8004348 <_printf_i+0x12c>
 80043f2:	6823      	ldr	r3, [r4, #0]
 80043f4:	079b      	lsls	r3, r3, #30
 80043f6:	d413      	bmi.n	8004420 <_printf_i+0x204>
 80043f8:	68e0      	ldr	r0, [r4, #12]
 80043fa:	9b03      	ldr	r3, [sp, #12]
 80043fc:	4298      	cmp	r0, r3
 80043fe:	bfb8      	it	lt
 8004400:	4618      	movlt	r0, r3
 8004402:	e7a3      	b.n	800434c <_printf_i+0x130>
 8004404:	2301      	movs	r3, #1
 8004406:	464a      	mov	r2, r9
 8004408:	4639      	mov	r1, r7
 800440a:	4630      	mov	r0, r6
 800440c:	47c0      	blx	r8
 800440e:	3001      	adds	r0, #1
 8004410:	d09a      	beq.n	8004348 <_printf_i+0x12c>
 8004412:	3501      	adds	r5, #1
 8004414:	68e3      	ldr	r3, [r4, #12]
 8004416:	9a03      	ldr	r2, [sp, #12]
 8004418:	1a9b      	subs	r3, r3, r2
 800441a:	42ab      	cmp	r3, r5
 800441c:	dcf2      	bgt.n	8004404 <_printf_i+0x1e8>
 800441e:	e7eb      	b.n	80043f8 <_printf_i+0x1dc>
 8004420:	2500      	movs	r5, #0
 8004422:	f104 0919 	add.w	r9, r4, #25
 8004426:	e7f5      	b.n	8004414 <_printf_i+0x1f8>
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1ac      	bne.n	8004386 <_printf_i+0x16a>
 800442c:	7803      	ldrb	r3, [r0, #0]
 800442e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004432:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004436:	e76c      	b.n	8004312 <_printf_i+0xf6>
 8004438:	08004a0d 	.word	0x08004a0d
 800443c:	08004a1e 	.word	0x08004a1e

08004440 <__sread>:
 8004440:	b510      	push	{r4, lr}
 8004442:	460c      	mov	r4, r1
 8004444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004448:	f000 fa46 	bl	80048d8 <_read_r>
 800444c:	2800      	cmp	r0, #0
 800444e:	bfab      	itete	ge
 8004450:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004452:	89a3      	ldrhlt	r3, [r4, #12]
 8004454:	181b      	addge	r3, r3, r0
 8004456:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800445a:	bfac      	ite	ge
 800445c:	6563      	strge	r3, [r4, #84]	; 0x54
 800445e:	81a3      	strhlt	r3, [r4, #12]
 8004460:	bd10      	pop	{r4, pc}

08004462 <__swrite>:
 8004462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004466:	461f      	mov	r7, r3
 8004468:	898b      	ldrh	r3, [r1, #12]
 800446a:	05db      	lsls	r3, r3, #23
 800446c:	4605      	mov	r5, r0
 800446e:	460c      	mov	r4, r1
 8004470:	4616      	mov	r6, r2
 8004472:	d505      	bpl.n	8004480 <__swrite+0x1e>
 8004474:	2302      	movs	r3, #2
 8004476:	2200      	movs	r2, #0
 8004478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800447c:	f000 f9b6 	bl	80047ec <_lseek_r>
 8004480:	89a3      	ldrh	r3, [r4, #12]
 8004482:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004486:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800448a:	81a3      	strh	r3, [r4, #12]
 800448c:	4632      	mov	r2, r6
 800448e:	463b      	mov	r3, r7
 8004490:	4628      	mov	r0, r5
 8004492:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004496:	f000 b869 	b.w	800456c <_write_r>

0800449a <__sseek>:
 800449a:	b510      	push	{r4, lr}
 800449c:	460c      	mov	r4, r1
 800449e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044a2:	f000 f9a3 	bl	80047ec <_lseek_r>
 80044a6:	1c43      	adds	r3, r0, #1
 80044a8:	89a3      	ldrh	r3, [r4, #12]
 80044aa:	bf15      	itete	ne
 80044ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80044ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80044b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80044b6:	81a3      	strheq	r3, [r4, #12]
 80044b8:	bf18      	it	ne
 80044ba:	81a3      	strhne	r3, [r4, #12]
 80044bc:	bd10      	pop	{r4, pc}

080044be <__sclose>:
 80044be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044c2:	f000 b8d3 	b.w	800466c <_close_r>
	...

080044c8 <__swbuf_r>:
 80044c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ca:	460e      	mov	r6, r1
 80044cc:	4614      	mov	r4, r2
 80044ce:	4605      	mov	r5, r0
 80044d0:	b118      	cbz	r0, 80044da <__swbuf_r+0x12>
 80044d2:	6983      	ldr	r3, [r0, #24]
 80044d4:	b90b      	cbnz	r3, 80044da <__swbuf_r+0x12>
 80044d6:	f7ff fc5f 	bl	8003d98 <__sinit>
 80044da:	4b21      	ldr	r3, [pc, #132]	; (8004560 <__swbuf_r+0x98>)
 80044dc:	429c      	cmp	r4, r3
 80044de:	d12a      	bne.n	8004536 <__swbuf_r+0x6e>
 80044e0:	686c      	ldr	r4, [r5, #4]
 80044e2:	69a3      	ldr	r3, [r4, #24]
 80044e4:	60a3      	str	r3, [r4, #8]
 80044e6:	89a3      	ldrh	r3, [r4, #12]
 80044e8:	071a      	lsls	r2, r3, #28
 80044ea:	d52e      	bpl.n	800454a <__swbuf_r+0x82>
 80044ec:	6923      	ldr	r3, [r4, #16]
 80044ee:	b363      	cbz	r3, 800454a <__swbuf_r+0x82>
 80044f0:	6923      	ldr	r3, [r4, #16]
 80044f2:	6820      	ldr	r0, [r4, #0]
 80044f4:	1ac0      	subs	r0, r0, r3
 80044f6:	6963      	ldr	r3, [r4, #20]
 80044f8:	b2f6      	uxtb	r6, r6
 80044fa:	4283      	cmp	r3, r0
 80044fc:	4637      	mov	r7, r6
 80044fe:	dc04      	bgt.n	800450a <__swbuf_r+0x42>
 8004500:	4621      	mov	r1, r4
 8004502:	4628      	mov	r0, r5
 8004504:	f000 f948 	bl	8004798 <_fflush_r>
 8004508:	bb28      	cbnz	r0, 8004556 <__swbuf_r+0x8e>
 800450a:	68a3      	ldr	r3, [r4, #8]
 800450c:	3b01      	subs	r3, #1
 800450e:	60a3      	str	r3, [r4, #8]
 8004510:	6823      	ldr	r3, [r4, #0]
 8004512:	1c5a      	adds	r2, r3, #1
 8004514:	6022      	str	r2, [r4, #0]
 8004516:	701e      	strb	r6, [r3, #0]
 8004518:	6963      	ldr	r3, [r4, #20]
 800451a:	3001      	adds	r0, #1
 800451c:	4283      	cmp	r3, r0
 800451e:	d004      	beq.n	800452a <__swbuf_r+0x62>
 8004520:	89a3      	ldrh	r3, [r4, #12]
 8004522:	07db      	lsls	r3, r3, #31
 8004524:	d519      	bpl.n	800455a <__swbuf_r+0x92>
 8004526:	2e0a      	cmp	r6, #10
 8004528:	d117      	bne.n	800455a <__swbuf_r+0x92>
 800452a:	4621      	mov	r1, r4
 800452c:	4628      	mov	r0, r5
 800452e:	f000 f933 	bl	8004798 <_fflush_r>
 8004532:	b190      	cbz	r0, 800455a <__swbuf_r+0x92>
 8004534:	e00f      	b.n	8004556 <__swbuf_r+0x8e>
 8004536:	4b0b      	ldr	r3, [pc, #44]	; (8004564 <__swbuf_r+0x9c>)
 8004538:	429c      	cmp	r4, r3
 800453a:	d101      	bne.n	8004540 <__swbuf_r+0x78>
 800453c:	68ac      	ldr	r4, [r5, #8]
 800453e:	e7d0      	b.n	80044e2 <__swbuf_r+0x1a>
 8004540:	4b09      	ldr	r3, [pc, #36]	; (8004568 <__swbuf_r+0xa0>)
 8004542:	429c      	cmp	r4, r3
 8004544:	bf08      	it	eq
 8004546:	68ec      	ldreq	r4, [r5, #12]
 8004548:	e7cb      	b.n	80044e2 <__swbuf_r+0x1a>
 800454a:	4621      	mov	r1, r4
 800454c:	4628      	mov	r0, r5
 800454e:	f000 f81f 	bl	8004590 <__swsetup_r>
 8004552:	2800      	cmp	r0, #0
 8004554:	d0cc      	beq.n	80044f0 <__swbuf_r+0x28>
 8004556:	f04f 37ff 	mov.w	r7, #4294967295
 800455a:	4638      	mov	r0, r7
 800455c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800455e:	bf00      	nop
 8004560:	080049bc 	.word	0x080049bc
 8004564:	080049dc 	.word	0x080049dc
 8004568:	0800499c 	.word	0x0800499c

0800456c <_write_r>:
 800456c:	b538      	push	{r3, r4, r5, lr}
 800456e:	4c07      	ldr	r4, [pc, #28]	; (800458c <_write_r+0x20>)
 8004570:	4605      	mov	r5, r0
 8004572:	4608      	mov	r0, r1
 8004574:	4611      	mov	r1, r2
 8004576:	2200      	movs	r2, #0
 8004578:	6022      	str	r2, [r4, #0]
 800457a:	461a      	mov	r2, r3
 800457c:	f7fc fa21 	bl	80009c2 <_write>
 8004580:	1c43      	adds	r3, r0, #1
 8004582:	d102      	bne.n	800458a <_write_r+0x1e>
 8004584:	6823      	ldr	r3, [r4, #0]
 8004586:	b103      	cbz	r3, 800458a <_write_r+0x1e>
 8004588:	602b      	str	r3, [r5, #0]
 800458a:	bd38      	pop	{r3, r4, r5, pc}
 800458c:	20000180 	.word	0x20000180

08004590 <__swsetup_r>:
 8004590:	4b32      	ldr	r3, [pc, #200]	; (800465c <__swsetup_r+0xcc>)
 8004592:	b570      	push	{r4, r5, r6, lr}
 8004594:	681d      	ldr	r5, [r3, #0]
 8004596:	4606      	mov	r6, r0
 8004598:	460c      	mov	r4, r1
 800459a:	b125      	cbz	r5, 80045a6 <__swsetup_r+0x16>
 800459c:	69ab      	ldr	r3, [r5, #24]
 800459e:	b913      	cbnz	r3, 80045a6 <__swsetup_r+0x16>
 80045a0:	4628      	mov	r0, r5
 80045a2:	f7ff fbf9 	bl	8003d98 <__sinit>
 80045a6:	4b2e      	ldr	r3, [pc, #184]	; (8004660 <__swsetup_r+0xd0>)
 80045a8:	429c      	cmp	r4, r3
 80045aa:	d10f      	bne.n	80045cc <__swsetup_r+0x3c>
 80045ac:	686c      	ldr	r4, [r5, #4]
 80045ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	0715      	lsls	r5, r2, #28
 80045b6:	d42c      	bmi.n	8004612 <__swsetup_r+0x82>
 80045b8:	06d0      	lsls	r0, r2, #27
 80045ba:	d411      	bmi.n	80045e0 <__swsetup_r+0x50>
 80045bc:	2209      	movs	r2, #9
 80045be:	6032      	str	r2, [r6, #0]
 80045c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045c4:	81a3      	strh	r3, [r4, #12]
 80045c6:	f04f 30ff 	mov.w	r0, #4294967295
 80045ca:	e03e      	b.n	800464a <__swsetup_r+0xba>
 80045cc:	4b25      	ldr	r3, [pc, #148]	; (8004664 <__swsetup_r+0xd4>)
 80045ce:	429c      	cmp	r4, r3
 80045d0:	d101      	bne.n	80045d6 <__swsetup_r+0x46>
 80045d2:	68ac      	ldr	r4, [r5, #8]
 80045d4:	e7eb      	b.n	80045ae <__swsetup_r+0x1e>
 80045d6:	4b24      	ldr	r3, [pc, #144]	; (8004668 <__swsetup_r+0xd8>)
 80045d8:	429c      	cmp	r4, r3
 80045da:	bf08      	it	eq
 80045dc:	68ec      	ldreq	r4, [r5, #12]
 80045de:	e7e6      	b.n	80045ae <__swsetup_r+0x1e>
 80045e0:	0751      	lsls	r1, r2, #29
 80045e2:	d512      	bpl.n	800460a <__swsetup_r+0x7a>
 80045e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045e6:	b141      	cbz	r1, 80045fa <__swsetup_r+0x6a>
 80045e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045ec:	4299      	cmp	r1, r3
 80045ee:	d002      	beq.n	80045f6 <__swsetup_r+0x66>
 80045f0:	4630      	mov	r0, r6
 80045f2:	f7ff fac1 	bl	8003b78 <_free_r>
 80045f6:	2300      	movs	r3, #0
 80045f8:	6363      	str	r3, [r4, #52]	; 0x34
 80045fa:	89a3      	ldrh	r3, [r4, #12]
 80045fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004600:	81a3      	strh	r3, [r4, #12]
 8004602:	2300      	movs	r3, #0
 8004604:	6063      	str	r3, [r4, #4]
 8004606:	6923      	ldr	r3, [r4, #16]
 8004608:	6023      	str	r3, [r4, #0]
 800460a:	89a3      	ldrh	r3, [r4, #12]
 800460c:	f043 0308 	orr.w	r3, r3, #8
 8004610:	81a3      	strh	r3, [r4, #12]
 8004612:	6923      	ldr	r3, [r4, #16]
 8004614:	b94b      	cbnz	r3, 800462a <__swsetup_r+0x9a>
 8004616:	89a3      	ldrh	r3, [r4, #12]
 8004618:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800461c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004620:	d003      	beq.n	800462a <__swsetup_r+0x9a>
 8004622:	4621      	mov	r1, r4
 8004624:	4630      	mov	r0, r6
 8004626:	f000 f917 	bl	8004858 <__smakebuf_r>
 800462a:	89a2      	ldrh	r2, [r4, #12]
 800462c:	f012 0301 	ands.w	r3, r2, #1
 8004630:	d00c      	beq.n	800464c <__swsetup_r+0xbc>
 8004632:	2300      	movs	r3, #0
 8004634:	60a3      	str	r3, [r4, #8]
 8004636:	6963      	ldr	r3, [r4, #20]
 8004638:	425b      	negs	r3, r3
 800463a:	61a3      	str	r3, [r4, #24]
 800463c:	6923      	ldr	r3, [r4, #16]
 800463e:	b953      	cbnz	r3, 8004656 <__swsetup_r+0xc6>
 8004640:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004644:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004648:	d1ba      	bne.n	80045c0 <__swsetup_r+0x30>
 800464a:	bd70      	pop	{r4, r5, r6, pc}
 800464c:	0792      	lsls	r2, r2, #30
 800464e:	bf58      	it	pl
 8004650:	6963      	ldrpl	r3, [r4, #20]
 8004652:	60a3      	str	r3, [r4, #8]
 8004654:	e7f2      	b.n	800463c <__swsetup_r+0xac>
 8004656:	2000      	movs	r0, #0
 8004658:	e7f7      	b.n	800464a <__swsetup_r+0xba>
 800465a:	bf00      	nop
 800465c:	2000000c 	.word	0x2000000c
 8004660:	080049bc 	.word	0x080049bc
 8004664:	080049dc 	.word	0x080049dc
 8004668:	0800499c 	.word	0x0800499c

0800466c <_close_r>:
 800466c:	b538      	push	{r3, r4, r5, lr}
 800466e:	4c06      	ldr	r4, [pc, #24]	; (8004688 <_close_r+0x1c>)
 8004670:	2300      	movs	r3, #0
 8004672:	4605      	mov	r5, r0
 8004674:	4608      	mov	r0, r1
 8004676:	6023      	str	r3, [r4, #0]
 8004678:	f7fc f9bf 	bl	80009fa <_close>
 800467c:	1c43      	adds	r3, r0, #1
 800467e:	d102      	bne.n	8004686 <_close_r+0x1a>
 8004680:	6823      	ldr	r3, [r4, #0]
 8004682:	b103      	cbz	r3, 8004686 <_close_r+0x1a>
 8004684:	602b      	str	r3, [r5, #0]
 8004686:	bd38      	pop	{r3, r4, r5, pc}
 8004688:	20000180 	.word	0x20000180

0800468c <__sflush_r>:
 800468c:	898a      	ldrh	r2, [r1, #12]
 800468e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004692:	4605      	mov	r5, r0
 8004694:	0710      	lsls	r0, r2, #28
 8004696:	460c      	mov	r4, r1
 8004698:	d458      	bmi.n	800474c <__sflush_r+0xc0>
 800469a:	684b      	ldr	r3, [r1, #4]
 800469c:	2b00      	cmp	r3, #0
 800469e:	dc05      	bgt.n	80046ac <__sflush_r+0x20>
 80046a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	dc02      	bgt.n	80046ac <__sflush_r+0x20>
 80046a6:	2000      	movs	r0, #0
 80046a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80046ae:	2e00      	cmp	r6, #0
 80046b0:	d0f9      	beq.n	80046a6 <__sflush_r+0x1a>
 80046b2:	2300      	movs	r3, #0
 80046b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80046b8:	682f      	ldr	r7, [r5, #0]
 80046ba:	6a21      	ldr	r1, [r4, #32]
 80046bc:	602b      	str	r3, [r5, #0]
 80046be:	d032      	beq.n	8004726 <__sflush_r+0x9a>
 80046c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80046c2:	89a3      	ldrh	r3, [r4, #12]
 80046c4:	075a      	lsls	r2, r3, #29
 80046c6:	d505      	bpl.n	80046d4 <__sflush_r+0x48>
 80046c8:	6863      	ldr	r3, [r4, #4]
 80046ca:	1ac0      	subs	r0, r0, r3
 80046cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80046ce:	b10b      	cbz	r3, 80046d4 <__sflush_r+0x48>
 80046d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80046d2:	1ac0      	subs	r0, r0, r3
 80046d4:	2300      	movs	r3, #0
 80046d6:	4602      	mov	r2, r0
 80046d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80046da:	6a21      	ldr	r1, [r4, #32]
 80046dc:	4628      	mov	r0, r5
 80046de:	47b0      	blx	r6
 80046e0:	1c43      	adds	r3, r0, #1
 80046e2:	89a3      	ldrh	r3, [r4, #12]
 80046e4:	d106      	bne.n	80046f4 <__sflush_r+0x68>
 80046e6:	6829      	ldr	r1, [r5, #0]
 80046e8:	291d      	cmp	r1, #29
 80046ea:	d848      	bhi.n	800477e <__sflush_r+0xf2>
 80046ec:	4a29      	ldr	r2, [pc, #164]	; (8004794 <__sflush_r+0x108>)
 80046ee:	40ca      	lsrs	r2, r1
 80046f0:	07d6      	lsls	r6, r2, #31
 80046f2:	d544      	bpl.n	800477e <__sflush_r+0xf2>
 80046f4:	2200      	movs	r2, #0
 80046f6:	6062      	str	r2, [r4, #4]
 80046f8:	04d9      	lsls	r1, r3, #19
 80046fa:	6922      	ldr	r2, [r4, #16]
 80046fc:	6022      	str	r2, [r4, #0]
 80046fe:	d504      	bpl.n	800470a <__sflush_r+0x7e>
 8004700:	1c42      	adds	r2, r0, #1
 8004702:	d101      	bne.n	8004708 <__sflush_r+0x7c>
 8004704:	682b      	ldr	r3, [r5, #0]
 8004706:	b903      	cbnz	r3, 800470a <__sflush_r+0x7e>
 8004708:	6560      	str	r0, [r4, #84]	; 0x54
 800470a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800470c:	602f      	str	r7, [r5, #0]
 800470e:	2900      	cmp	r1, #0
 8004710:	d0c9      	beq.n	80046a6 <__sflush_r+0x1a>
 8004712:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004716:	4299      	cmp	r1, r3
 8004718:	d002      	beq.n	8004720 <__sflush_r+0x94>
 800471a:	4628      	mov	r0, r5
 800471c:	f7ff fa2c 	bl	8003b78 <_free_r>
 8004720:	2000      	movs	r0, #0
 8004722:	6360      	str	r0, [r4, #52]	; 0x34
 8004724:	e7c0      	b.n	80046a8 <__sflush_r+0x1c>
 8004726:	2301      	movs	r3, #1
 8004728:	4628      	mov	r0, r5
 800472a:	47b0      	blx	r6
 800472c:	1c41      	adds	r1, r0, #1
 800472e:	d1c8      	bne.n	80046c2 <__sflush_r+0x36>
 8004730:	682b      	ldr	r3, [r5, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d0c5      	beq.n	80046c2 <__sflush_r+0x36>
 8004736:	2b1d      	cmp	r3, #29
 8004738:	d001      	beq.n	800473e <__sflush_r+0xb2>
 800473a:	2b16      	cmp	r3, #22
 800473c:	d101      	bne.n	8004742 <__sflush_r+0xb6>
 800473e:	602f      	str	r7, [r5, #0]
 8004740:	e7b1      	b.n	80046a6 <__sflush_r+0x1a>
 8004742:	89a3      	ldrh	r3, [r4, #12]
 8004744:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004748:	81a3      	strh	r3, [r4, #12]
 800474a:	e7ad      	b.n	80046a8 <__sflush_r+0x1c>
 800474c:	690f      	ldr	r7, [r1, #16]
 800474e:	2f00      	cmp	r7, #0
 8004750:	d0a9      	beq.n	80046a6 <__sflush_r+0x1a>
 8004752:	0793      	lsls	r3, r2, #30
 8004754:	680e      	ldr	r6, [r1, #0]
 8004756:	bf08      	it	eq
 8004758:	694b      	ldreq	r3, [r1, #20]
 800475a:	600f      	str	r7, [r1, #0]
 800475c:	bf18      	it	ne
 800475e:	2300      	movne	r3, #0
 8004760:	eba6 0807 	sub.w	r8, r6, r7
 8004764:	608b      	str	r3, [r1, #8]
 8004766:	f1b8 0f00 	cmp.w	r8, #0
 800476a:	dd9c      	ble.n	80046a6 <__sflush_r+0x1a>
 800476c:	4643      	mov	r3, r8
 800476e:	463a      	mov	r2, r7
 8004770:	6a21      	ldr	r1, [r4, #32]
 8004772:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004774:	4628      	mov	r0, r5
 8004776:	47b0      	blx	r6
 8004778:	2800      	cmp	r0, #0
 800477a:	dc06      	bgt.n	800478a <__sflush_r+0xfe>
 800477c:	89a3      	ldrh	r3, [r4, #12]
 800477e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004782:	81a3      	strh	r3, [r4, #12]
 8004784:	f04f 30ff 	mov.w	r0, #4294967295
 8004788:	e78e      	b.n	80046a8 <__sflush_r+0x1c>
 800478a:	4407      	add	r7, r0
 800478c:	eba8 0800 	sub.w	r8, r8, r0
 8004790:	e7e9      	b.n	8004766 <__sflush_r+0xda>
 8004792:	bf00      	nop
 8004794:	20400001 	.word	0x20400001

08004798 <_fflush_r>:
 8004798:	b538      	push	{r3, r4, r5, lr}
 800479a:	690b      	ldr	r3, [r1, #16]
 800479c:	4605      	mov	r5, r0
 800479e:	460c      	mov	r4, r1
 80047a0:	b1db      	cbz	r3, 80047da <_fflush_r+0x42>
 80047a2:	b118      	cbz	r0, 80047ac <_fflush_r+0x14>
 80047a4:	6983      	ldr	r3, [r0, #24]
 80047a6:	b90b      	cbnz	r3, 80047ac <_fflush_r+0x14>
 80047a8:	f7ff faf6 	bl	8003d98 <__sinit>
 80047ac:	4b0c      	ldr	r3, [pc, #48]	; (80047e0 <_fflush_r+0x48>)
 80047ae:	429c      	cmp	r4, r3
 80047b0:	d109      	bne.n	80047c6 <_fflush_r+0x2e>
 80047b2:	686c      	ldr	r4, [r5, #4]
 80047b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047b8:	b17b      	cbz	r3, 80047da <_fflush_r+0x42>
 80047ba:	4621      	mov	r1, r4
 80047bc:	4628      	mov	r0, r5
 80047be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047c2:	f7ff bf63 	b.w	800468c <__sflush_r>
 80047c6:	4b07      	ldr	r3, [pc, #28]	; (80047e4 <_fflush_r+0x4c>)
 80047c8:	429c      	cmp	r4, r3
 80047ca:	d101      	bne.n	80047d0 <_fflush_r+0x38>
 80047cc:	68ac      	ldr	r4, [r5, #8]
 80047ce:	e7f1      	b.n	80047b4 <_fflush_r+0x1c>
 80047d0:	4b05      	ldr	r3, [pc, #20]	; (80047e8 <_fflush_r+0x50>)
 80047d2:	429c      	cmp	r4, r3
 80047d4:	bf08      	it	eq
 80047d6:	68ec      	ldreq	r4, [r5, #12]
 80047d8:	e7ec      	b.n	80047b4 <_fflush_r+0x1c>
 80047da:	2000      	movs	r0, #0
 80047dc:	bd38      	pop	{r3, r4, r5, pc}
 80047de:	bf00      	nop
 80047e0:	080049bc 	.word	0x080049bc
 80047e4:	080049dc 	.word	0x080049dc
 80047e8:	0800499c 	.word	0x0800499c

080047ec <_lseek_r>:
 80047ec:	b538      	push	{r3, r4, r5, lr}
 80047ee:	4c07      	ldr	r4, [pc, #28]	; (800480c <_lseek_r+0x20>)
 80047f0:	4605      	mov	r5, r0
 80047f2:	4608      	mov	r0, r1
 80047f4:	4611      	mov	r1, r2
 80047f6:	2200      	movs	r2, #0
 80047f8:	6022      	str	r2, [r4, #0]
 80047fa:	461a      	mov	r2, r3
 80047fc:	f7fc f924 	bl	8000a48 <_lseek>
 8004800:	1c43      	adds	r3, r0, #1
 8004802:	d102      	bne.n	800480a <_lseek_r+0x1e>
 8004804:	6823      	ldr	r3, [r4, #0]
 8004806:	b103      	cbz	r3, 800480a <_lseek_r+0x1e>
 8004808:	602b      	str	r3, [r5, #0]
 800480a:	bd38      	pop	{r3, r4, r5, pc}
 800480c:	20000180 	.word	0x20000180

08004810 <__swhatbuf_r>:
 8004810:	b570      	push	{r4, r5, r6, lr}
 8004812:	460e      	mov	r6, r1
 8004814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004818:	2900      	cmp	r1, #0
 800481a:	b096      	sub	sp, #88	; 0x58
 800481c:	4614      	mov	r4, r2
 800481e:	461d      	mov	r5, r3
 8004820:	da07      	bge.n	8004832 <__swhatbuf_r+0x22>
 8004822:	2300      	movs	r3, #0
 8004824:	602b      	str	r3, [r5, #0]
 8004826:	89b3      	ldrh	r3, [r6, #12]
 8004828:	061a      	lsls	r2, r3, #24
 800482a:	d410      	bmi.n	800484e <__swhatbuf_r+0x3e>
 800482c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004830:	e00e      	b.n	8004850 <__swhatbuf_r+0x40>
 8004832:	466a      	mov	r2, sp
 8004834:	f000 f862 	bl	80048fc <_fstat_r>
 8004838:	2800      	cmp	r0, #0
 800483a:	dbf2      	blt.n	8004822 <__swhatbuf_r+0x12>
 800483c:	9a01      	ldr	r2, [sp, #4]
 800483e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004842:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004846:	425a      	negs	r2, r3
 8004848:	415a      	adcs	r2, r3
 800484a:	602a      	str	r2, [r5, #0]
 800484c:	e7ee      	b.n	800482c <__swhatbuf_r+0x1c>
 800484e:	2340      	movs	r3, #64	; 0x40
 8004850:	2000      	movs	r0, #0
 8004852:	6023      	str	r3, [r4, #0]
 8004854:	b016      	add	sp, #88	; 0x58
 8004856:	bd70      	pop	{r4, r5, r6, pc}

08004858 <__smakebuf_r>:
 8004858:	898b      	ldrh	r3, [r1, #12]
 800485a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800485c:	079d      	lsls	r5, r3, #30
 800485e:	4606      	mov	r6, r0
 8004860:	460c      	mov	r4, r1
 8004862:	d507      	bpl.n	8004874 <__smakebuf_r+0x1c>
 8004864:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004868:	6023      	str	r3, [r4, #0]
 800486a:	6123      	str	r3, [r4, #16]
 800486c:	2301      	movs	r3, #1
 800486e:	6163      	str	r3, [r4, #20]
 8004870:	b002      	add	sp, #8
 8004872:	bd70      	pop	{r4, r5, r6, pc}
 8004874:	ab01      	add	r3, sp, #4
 8004876:	466a      	mov	r2, sp
 8004878:	f7ff ffca 	bl	8004810 <__swhatbuf_r>
 800487c:	9900      	ldr	r1, [sp, #0]
 800487e:	4605      	mov	r5, r0
 8004880:	4630      	mov	r0, r6
 8004882:	f7ff f9c7 	bl	8003c14 <_malloc_r>
 8004886:	b948      	cbnz	r0, 800489c <__smakebuf_r+0x44>
 8004888:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800488c:	059a      	lsls	r2, r3, #22
 800488e:	d4ef      	bmi.n	8004870 <__smakebuf_r+0x18>
 8004890:	f023 0303 	bic.w	r3, r3, #3
 8004894:	f043 0302 	orr.w	r3, r3, #2
 8004898:	81a3      	strh	r3, [r4, #12]
 800489a:	e7e3      	b.n	8004864 <__smakebuf_r+0xc>
 800489c:	4b0d      	ldr	r3, [pc, #52]	; (80048d4 <__smakebuf_r+0x7c>)
 800489e:	62b3      	str	r3, [r6, #40]	; 0x28
 80048a0:	89a3      	ldrh	r3, [r4, #12]
 80048a2:	6020      	str	r0, [r4, #0]
 80048a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048a8:	81a3      	strh	r3, [r4, #12]
 80048aa:	9b00      	ldr	r3, [sp, #0]
 80048ac:	6163      	str	r3, [r4, #20]
 80048ae:	9b01      	ldr	r3, [sp, #4]
 80048b0:	6120      	str	r0, [r4, #16]
 80048b2:	b15b      	cbz	r3, 80048cc <__smakebuf_r+0x74>
 80048b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048b8:	4630      	mov	r0, r6
 80048ba:	f000 f831 	bl	8004920 <_isatty_r>
 80048be:	b128      	cbz	r0, 80048cc <__smakebuf_r+0x74>
 80048c0:	89a3      	ldrh	r3, [r4, #12]
 80048c2:	f023 0303 	bic.w	r3, r3, #3
 80048c6:	f043 0301 	orr.w	r3, r3, #1
 80048ca:	81a3      	strh	r3, [r4, #12]
 80048cc:	89a3      	ldrh	r3, [r4, #12]
 80048ce:	431d      	orrs	r5, r3
 80048d0:	81a5      	strh	r5, [r4, #12]
 80048d2:	e7cd      	b.n	8004870 <__smakebuf_r+0x18>
 80048d4:	08003d61 	.word	0x08003d61

080048d8 <_read_r>:
 80048d8:	b538      	push	{r3, r4, r5, lr}
 80048da:	4c07      	ldr	r4, [pc, #28]	; (80048f8 <_read_r+0x20>)
 80048dc:	4605      	mov	r5, r0
 80048de:	4608      	mov	r0, r1
 80048e0:	4611      	mov	r1, r2
 80048e2:	2200      	movs	r2, #0
 80048e4:	6022      	str	r2, [r4, #0]
 80048e6:	461a      	mov	r2, r3
 80048e8:	f7fc f84e 	bl	8000988 <_read>
 80048ec:	1c43      	adds	r3, r0, #1
 80048ee:	d102      	bne.n	80048f6 <_read_r+0x1e>
 80048f0:	6823      	ldr	r3, [r4, #0]
 80048f2:	b103      	cbz	r3, 80048f6 <_read_r+0x1e>
 80048f4:	602b      	str	r3, [r5, #0]
 80048f6:	bd38      	pop	{r3, r4, r5, pc}
 80048f8:	20000180 	.word	0x20000180

080048fc <_fstat_r>:
 80048fc:	b538      	push	{r3, r4, r5, lr}
 80048fe:	4c07      	ldr	r4, [pc, #28]	; (800491c <_fstat_r+0x20>)
 8004900:	2300      	movs	r3, #0
 8004902:	4605      	mov	r5, r0
 8004904:	4608      	mov	r0, r1
 8004906:	4611      	mov	r1, r2
 8004908:	6023      	str	r3, [r4, #0]
 800490a:	f7fc f882 	bl	8000a12 <_fstat>
 800490e:	1c43      	adds	r3, r0, #1
 8004910:	d102      	bne.n	8004918 <_fstat_r+0x1c>
 8004912:	6823      	ldr	r3, [r4, #0]
 8004914:	b103      	cbz	r3, 8004918 <_fstat_r+0x1c>
 8004916:	602b      	str	r3, [r5, #0]
 8004918:	bd38      	pop	{r3, r4, r5, pc}
 800491a:	bf00      	nop
 800491c:	20000180 	.word	0x20000180

08004920 <_isatty_r>:
 8004920:	b538      	push	{r3, r4, r5, lr}
 8004922:	4c06      	ldr	r4, [pc, #24]	; (800493c <_isatty_r+0x1c>)
 8004924:	2300      	movs	r3, #0
 8004926:	4605      	mov	r5, r0
 8004928:	4608      	mov	r0, r1
 800492a:	6023      	str	r3, [r4, #0]
 800492c:	f7fc f881 	bl	8000a32 <_isatty>
 8004930:	1c43      	adds	r3, r0, #1
 8004932:	d102      	bne.n	800493a <_isatty_r+0x1a>
 8004934:	6823      	ldr	r3, [r4, #0]
 8004936:	b103      	cbz	r3, 800493a <_isatty_r+0x1a>
 8004938:	602b      	str	r3, [r5, #0]
 800493a:	bd38      	pop	{r3, r4, r5, pc}
 800493c:	20000180 	.word	0x20000180

08004940 <_init>:
 8004940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004942:	bf00      	nop
 8004944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004946:	bc08      	pop	{r3}
 8004948:	469e      	mov	lr, r3
 800494a:	4770      	bx	lr

0800494c <_fini>:
 800494c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800494e:	bf00      	nop
 8004950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004952:	bc08      	pop	{r3}
 8004954:	469e      	mov	lr, r3
 8004956:	4770      	bx	lr
